var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/Admin.html",[0,0.171,1,3.055]],["body/classes/Admin.html",[0,0.27,1,5.597,2,1.721,3,0.172,4,0.156,5,0.156,6,6.093,7,0.172,8,0.009,9,0.008,10,0.008]],["title/classes/AdminAlbumByIdDto.html",[0,0.171,11,3.258]],["body/classes/AdminAlbumByIdDto.html",[0,0.185,2,1.177,3,0.117,4,0.107,5,0.107,7,0.117,8,0.009,9,0.006,10,0.006,11,4.707,12,5.753,13,3.08,14,3.523,15,0.47,16,1.611,17,4.697,18,4.697,19,2.89,20,3.495,21,1.89,22,3.621,23,1.176,24,5.301,25,3.495,26,3.068,27,4.971,28,0.929,29,1.357,30,1.059,31,4.724,32,4.724,33,4.724,34,3.068,35,4.724,36,4.724,37,4.17,38,4.724,39,4.724,40,4.724,41,4.724,42,2.242,43,4.724,44,2.322,45,2.498,46,2.322,47,2.498,48,1.814]],["title/controllers/AdminAlbumController.html",[49,1.229,50,3.258]],["body/controllers/AdminAlbumController.html",[0,0.235,3,0.149,4,0.135,5,0.135,7,0.149,8,0.009,9,0.008,10,0.008,15,0.597,30,0.736,49,1.687,50,5.486,51,1.818,52,5.289,53,2.67,54,5.998,55,1.923,56,2.184,57,8.295,58,1.424,59,7.356,60,5.998,61,1.568,62,1.647,63,5.998,64,0.475,65,1.064,66,4.994,67,4.822,68,5.998,69,2.589,70,1.773,71,1.531,72,5.289]],["title/classes/AdminAlbumDto.html",[0,0.171,73,3.055]],["body/classes/AdminAlbumDto.html",[0,0.252,2,1.217,3,0.121,4,0.11,5,0.11,7,0.16,8,0.009,9,0.007,10,0.007,12,5.685,15,0.486,16,1.647,19,2.938,20,3.553,21,1.992,23,1.433,25,3.553,26,3.119,28,0.92,29,1.357,30,1.043,37,4.265,42,2.363,44,2.402,45,2.583,73,5.055,74,3.066,75,4.141,76,3.682,77,3.682,78,4.885,79,4.885,80,4.885,81,4.885,82,4.885,83,4.885,84,4.885,85,4.885,86,2.175,87,3.417,88,1.929,89,1.053,90,2.489,91,2.402,92,2.108,93,3.417,94,3.417]],["title/injectables/AdminAlbumService.html",[66,2.742,95,1.062]],["body/injectables/AdminAlbumService.html",[0,0.172,3,0.109,4,0.099,5,0.099,7,0.109,8,0.009,9,0.006,10,0.006,13,1.553,15,0.437,22,2.237,23,0.818,28,0.465,30,0.737,42,1.298,55,1.571,56,1.88,61,1.148,62,1.206,64,0.498,65,0.779,66,3.771,70,1.776,71,1.121,89,0.947,95,1.461,96,1.785,97,3.873,98,5.92,99,2.244,100,3.531,101,3.747,102,5.506,103,4.392,104,1.177,105,4.481,106,4.392,107,2.087,108,1.474,109,1.474,110,3.531,111,1.955,112,3.276,113,3.072,114,2.443,115,3.276,116,1.927,117,6.009,118,2.489,119,6.009,120,4.392,121,6.009,122,2.756,123,4.392,124,3.924,125,4.202,126,2.087,127,6.009,128,3.771,129,4.392,130,7.364,131,4.525,132,2.516,133,4.392,134,2.902,135,3.531,136,4.392,137,3.873,138,3.873,139,4.392,140,4.392,141,3.072,142,1.553,143,2.516,144,4.392,145,3.873,146,1.64,147,3.873,148,2.629,149,4.392,150,2.516,151,4.392,152,2.322,153,2.902,154,4.392,155,3.072,156,3.531,157,4.392,158,3.873,159,3.873,160,4.392,161,4.392,162,6.849,163,3.873,164,4.392,165,1.955,166,2.159]],["title/interfaces/AdminAlbumSummaryDto.html",[167,3.055,168,3.258]],["body/interfaces/AdminAlbumSummaryDto.html",[3,0.13,4,0.118,5,0.118,7,0.168,8,0.009,9,0.007,10,0.007,12,3.465,14,3.911,15,0.522,16,1.725,19,3.212,21,2.037,23,1.473,24,3.911,26,3.41,27,5.72,28,0.866,29,1.382,42,2.518,88,2.071,89,1.131,90,2.671,122,3.291,126,2.491,128,3.291,146,1.958,167,4.728,168,5.579,169,4.216,170,1.76,171,6.353,172,2.883,173,3.139,174,3.465,175,4.624,176,3.465,177,3.667,178,3.004,179,2.578,180,4.216,181,4.216,182,4.216]],["title/modules/AdminModule.html",[183,1.291,184,3.055]],["body/modules/AdminModule.html",[0,0.192,3,0.122,4,0.111,5,0.111,7,0.122,8,0.009,9,0.007,10,0.007,13,2.294,50,5.41,51,1.965,64,0.569,65,0.873,66,5.165,67,3.957,108,1.651,111,2.887,170,1.651,183,2.144,184,6.083,185,2.061,186,2.124,187,2.262,188,2.262,189,2.124,190,3.334,191,2.262,192,4.34,193,4.34,194,5.165,195,5.438,196,2.981,197,1.944,198,2.191,199,4.921,200,5.41,201,5.41,202,2.602,203,3.67,204,4.34,205,4.921,206,4.921,207,4.921,208,3.957,209,3.442,210,4.921,211,3.089,212,4.34,213,2.419,214,4.34]],["title/controllers/AdminOrderController.html",[49,1.229,201,3.258]],["body/controllers/AdminOrderController.html",[0,0.169,3,0.107,4,0.097,5,0.097,7,0.107,8,0.009,9,0.006,10,0.006,15,0.43,21,1.479,23,1.106,28,0.629,29,1.316,30,0.833,42,2.161,46,3.336,49,1.214,51,1.308,53,1.921,55,1.552,56,2.302,58,1.611,61,1.775,62,1.863,64,0.511,65,0.766,69,1.863,70,1.276,71,1.732,89,1.28,104,1.591,152,3.139,166,2.919,194,4.26,201,4.428,208,3.47,215,3.806,216,4.316,217,6.787,218,4.152,219,7.31,220,4.316,221,4.83,222,6.446,223,6.446,224,5.452,225,4.316,226,4.316,227,2.282,228,3.019,229,5.062,230,3.806,231,4.316,232,4.316,233,4.316,234,4.316,235,2.584,236,3.219,237,2.199,238,1.984,239,3.019,240,3.219,241,3.806,242,3.219,243,3.806,244,4.152,245,4.316,246,4.316,247,2.282,248,5.985,249,4.316,250,4.316,251,4.316,252,4.316,253,4.316,254,4.316,255,3.47,256,3.806,257,4.316,258,4.316,259,3.806]],["title/injectables/AdminOrderService.html",[95,1.062,194,2.742]],["body/injectables/AdminOrderService.html",[0,0.119,3,0.075,4,0.068,5,0.068,7,0.075,8,0.01,9,0.005,10,0.005,13,1.627,15,0.302,21,1.545,22,2.343,23,1.035,27,3.217,28,0.588,29,0.846,30,0.761,46,3.968,47,3.278,48,1.165,55,1.203,56,2.11,61,1.453,62,1.525,64,0.4,65,0.538,70,0.897,71,1.418,89,1.198,91,2.261,92,1.309,95,1.119,96,1.233,98,4.984,99,1.718,101,2.85,102,3.698,104,1.488,107,1.441,108,1.018,109,1.018,111,2.967,112,2.262,114,1.233,115,2.262,116,2.342,118,2.933,146,1.133,148,1.816,152,2.432,158,4.056,159,4.056,163,4.056,165,2.76,166,1.491,194,2.887,221,3.671,222,4.899,223,4.899,224,4.624,260,2.675,261,3.891,262,4.056,263,3.034,264,3.034,265,3.034,266,3.034,267,4.056,268,3.034,269,3.034,270,1.491,271,3.034,272,3.034,273,2.675,274,3.034,275,3.034,276,3.034,277,3.034,278,3.034,279,3.034,280,3.034,281,2.432,282,3.217,283,2.529,284,4.056,285,2.122,286,2.675,287,2.439,288,2.675,289,1.27,290,1.198,291,3.034,292,1.668,293,3.034,294,3.034,295,7.506,296,4.6,297,4.182,298,4.6,299,3.326,300,4.6,301,1.904,302,4.6,303,2.262,304,3.891,305,3.034,306,4.6,307,4.6,308,3.43,309,4.6,310,3.039,311,3.034,312,3.034,313,2.675,314,2.262,315,3.034,316,4.6,317,5.556,318,4.6,319,3.034,320,5.556,321,3.034,322,5.556,323,3.034,324,3.034,325,2.439]],["title/interfaces/AdminPhotographerByIdDto.html",[167,3.055,177,3.055]],["body/interfaces/AdminPhotographerByIdDto.html",[3,0.118,4,0.108,5,0.108,7,0.158,8,0.009,9,0.007,10,0.007,12,3.151,14,3.557,15,0.475,16,1.621,19,1.939,21,1.976,24,3.557,26,2.058,27,5.547,28,0.923,29,1.376,42,2.611,88,3.008,89,1.642,90,3.88,122,4.78,126,2.266,128,4.78,146,1.781,167,4.442,168,5.68,169,3.834,170,1.6,171,3.834,172,2.622,173,2.855,174,3.151,175,4.205,176,3.151,177,4.442,178,4.363,179,3.511,180,6.123,181,6.123,182,6.123]],["title/controllers/AdminUserController.html",[49,1.229,200,3.258]],["body/controllers/AdminUserController.html",[0,0.139,1,2.479,3,0.088,4,0.08,5,0.08,7,0.088,8,0.009,9,0.005,10,0.005,15,0.353,21,1.957,22,2.63,23,1.247,28,0.709,29,1.27,30,0.94,49,0.997,51,1.074,53,1.578,55,1.35,56,2.416,58,1.82,61,2.004,62,2.104,64,0.507,65,0.629,66,3.823,67,2.849,70,1.8,71,1.956,72,3.125,89,1.443,99,1.323,104,1.793,114,2.476,116,1.714,118,2.213,122,3.241,142,1.254,194,3.823,195,4.025,200,3.851,204,3.125,208,2.849,235,2.122,237,1.805,238,1.629,239,2.479,240,2.643,241,3.125,242,2.643,243,3.125,244,3.611,247,1.874,248,6.759,259,3.125,326,3.125,327,5.163,328,5.163,329,4.553,330,6.693,331,6.693,332,4.553,333,6.693,334,3.544,335,3.544,336,3.544,337,3.544,338,3.544,339,3.544,340,3.544,341,3.544,342,3.544,343,3.544,344,3.544,345,3.544,346,3.544,347,3.125,348,3.544,349,3.544,350,3.544,351,3.544,352,1.874,353,3.544,354,3.544,355,3.544,356,3.544,357,3.544,358,4.151,359,3.544,360,3.544,361,3.544,362,3.544,363,3.544,364,3.544,365,3.544,366,3.544,367,3.544,368,3.544,369,3.544,370,5.163,371,3.544,372,3.544,373,2.122]],["title/classes/AdminUserDto.html",[0,0.171,87,3.055]],["body/classes/AdminUserDto.html",[0,0.263,2,1.293,3,0.129,4,0.117,5,0.117,7,0.167,8,0.009,9,0.007,10,0.007,12,5.517,15,0.516,16,1.714,19,2.11,20,2.551,21,2.031,23,1.251,25,2.551,26,2.24,28,0.863,29,1.361,30,1,42,2.2,44,2.551,45,2.744,73,5.206,74,3.257,75,2.973,76,2.644,77,2.644,86,2.31,87,4.696,88,2.94,89,1.605,90,3.792,91,3.301,92,2.898,93,4.696,94,5.206,374,4.576,375,5.189,376,5.189,377,5.189,378,4.576]],["title/injectables/AdminUserService.html",[95,1.062,195,2.886]],["body/injectables/AdminUserService.html",[0,0.091,3,0.058,4,0.053,5,0.053,7,0.058,8,0.01,9,0.004,10,0.004,11,1.74,13,2.224,15,0.232,17,1.542,18,1.542,19,1.909,20,1.842,21,1.851,22,2.738,23,1.002,24,1.74,25,1.842,26,2.026,27,4.62,28,0.569,29,1.08,30,0.81,46,1.147,47,1.234,48,1.439,55,0.98,56,2.229,61,1.644,62,1.289,64,0.443,65,0.414,70,1.107,71,1.686,73,2.62,75,2.69,76,1.189,77,1.189,86,1.039,87,1.632,88,1.48,89,1.355,90,3.202,91,1.147,92,2.32,94,2.62,95,0.911,96,0.948,98,4.322,99,1.399,101,3.036,104,1.44,105,3.502,107,1.108,108,0.783,109,0.783,111,1.039,113,1.632,114,1.523,116,2.09,118,2.496,122,3.374,128,1.464,131,2.476,142,1.325,152,1.981,155,3.284,165,3.058,166,2.308,170,2.217,171,1.876,177,1.632,178,2.147,179,2.308,180,4.733,181,4.733,182,3.775,195,2.476,203,1.74,209,1.632,261,3.374,270,1.147,281,2.482,289,1.966,290,2.123,292,2.581,297,2.352,299,2.243,301,1.464,304,1.464,332,3.304,347,3.304,358,1.876,379,2.057,380,3.747,381,5.375,382,3.747,383,2.057,384,2.333,385,3.012,386,2.333,387,3.601,388,3.747,389,2.333,390,2.06,391,2.333,392,2.333,393,2.333,394,3.747,395,5.375,396,2.333,397,1.668,398,4.695,399,1.397,400,3.747,401,1.632,402,2.333,403,1.876,404,1.876,405,2.333,406,1.283,407,1.397,408,1.876,409,1.397,410,1.542,411,3.304,412,3.747,413,2.333,414,3.502,415,3.775,416,3.012,417,1.876,418,2.057,419,1.876,420,2.333,421,1.74,422,1.74,423,3.304,424,1.632,425,3.304,426,2.057,427,3.747,428,4.695,429,4.695,430,3.747,431,2.333,432,2.333,433,2.333,434,3.304,435,3.304,436,3.747,437,2.333,438,2.333,439,2.333,440,3.747,441,3.747,442,3.012,443,3.747,444,2.333,445,2.333,446,2.333,447,2.333,448,2.333,449,2.333,450,2.333,451,2.333,452,2.333,453,2.333,454,2.333,455,1.876,456,2.333,457,4.695,458,4.695,459,2.482,460,5.375,461,4.695,462,2.333,463,3.747,464,3.747,465,2.057,466,2.057,467,1.876,468,2.057,469,2.333,470,2.057,471,2.057,472,2.333,473,2.333,474,2.333,475,2.333,476,2.333]],["title/entities/Album.html",[13,1.545,477,1.587]],["body/entities/Album.html",[0,0.109,3,0.069,4,0.063,5,0.063,7,0.069,8,0.009,9,0.004,10,0.004,13,1.52,15,0.428,16,1.097,17,3.475,18,3.475,19,2.138,20,2.585,21,1.31,22,2.679,23,1.262,25,2.585,26,2.269,28,0.918,29,1.285,30,1.046,34,3.149,37,1.835,42,2.087,44,1.365,45,1.468,48,2.019,58,2.024,64,0.382,75,3.013,76,2.679,77,2.679,92,2.269,109,0.932,111,3.015,112,2.071,141,3.678,142,2.835,148,1.662,150,1.591,165,1.913,170,2.614,172,1.527,173,3.148,179,2.113,203,2.071,221,3.912,227,2.78,409,3.148,477,1.562,478,1.415,479,2.449,480,4.637,481,5.259,482,4.637,483,4.637,484,3.475,485,2.449,486,2.777,487,2.777,488,4.4,489,2.777,490,2.777,491,3.148,492,2.777,493,3.3,494,3.206,495,3.475,496,2.777,497,2.071,498,2.777,499,2.777,500,2.273,501,2.777,502,2.232,503,2.777,504,3.456,505,4.298,506,3.544,507,2.777,508,2.777,509,1.662,510,4.298,511,2.777,512,2.777,513,3.329,514,4.298,515,2.777,516,4.298,517,2.777,518,5.22,519,2.777,520,4.298,521,2.777,522,2.777,523,2.232,524,2.777,525,3.475,526,2.777,527,2.777,528,4.298,529,3.79,530,2.573,531,4.228,532,1.468,533,2.232,534,2.777,535,3.456,536,2.777,537,2.777,538,2.071,539,2.698,540,1.662,541,2.042,542,5.259,543,1.942,544,2.777,545,2.449,546,2.449,547,2.449,548,1.835,549,2.777]],["title/controllers/AlbumAccessController.html",[49,1.229,550,3.258]],["body/controllers/AlbumAccessController.html",[0,0.186,3,0.118,4,0.107,5,0.107,7,0.118,8,0.009,9,0.007,10,0.007,13,2.243,15,0.473,23,1.182,28,0.806,29,1.207,30,0.778,37,4.19,49,1.338,51,1.442,53,2.118,55,1.658,56,2.238,58,1.506,61,1.658,62,1.741,64,0.46,65,0.844,69,2.053,70,1.406,71,1.619,89,1.367,104,1.699,116,1.784,118,1.729,235,2.848,237,2.424,238,2.187,247,3.353,352,2.515,390,3.922,397,3.176,484,3.143,550,4.73,551,5.735,552,4.195,553,5.099,554,6.342,555,6.291,556,4.757,557,4.31,558,4.757,559,4.757,560,4.757,561,4.757,562,4.757,563,4.183,564,4.713,565,2.986,566,4.713,567,4.195,568,4.195,569,4.757,570,3.548,571,3.633,572,4.757,573,4.757,574,4.757,575,4.757,576,4.757,577,4.757]],["title/injectables/AlbumAccessService.html",[95,1.062,566,2.886]],["body/injectables/AlbumAccessService.html",[0,0.138,3,0.088,4,0.08,5,0.08,7,0.088,8,0.009,9,0.005,10,0.005,13,2.623,15,0.351,20,1.736,21,1.77,23,1.133,25,1.736,26,2.223,28,0.644,29,1.302,30,0.746,48,1.356,55,1.347,56,2.036,61,1.347,62,1.414,64,0.479,65,0.626,70,1.522,71,1.551,75,3.828,76,1.799,77,1.799,86,1.572,89,1.311,92,2.223,95,1.253,96,1.436,99,1.923,100,2.839,101,3.071,104,1.629,105,3.841,107,1.678,108,1.185,109,1.185,113,2.47,114,2.094,116,1.71,118,2.581,124,2.023,142,1.249,150,2.023,155,3.602,173,3.083,174,2.333,270,1.736,281,2.723,289,2.798,290,2.639,329,4.541,390,3.673,397,2.706,414,3.841,416,2.839,417,2.839,419,2.839,421,2.634,422,2.634,467,4.14,480,5.36,484,4.694,540,3.083,551,5.371,555,4.541,566,3.403,570,4.534,578,3.114,579,3.728,580,3.531,581,5.15,582,3.531,583,5.15,584,3.531,585,2.47,586,2.839,587,2.839,588,3.403,589,2.634,590,2.839,591,2.839,592,5.15,593,1.623,594,1.799,595,3.114,596,3.531,597,3.531,598,3.841,599,3.531,600,5.15,601,3.841,602,3.531,603,3.114,604,2.839,605,1.867,606,2.839,607,5.15,608,2.216,609,3.531,610,3.531,611,2.47,612,2.216,613,3.531,614,3.531,615,3.531,616,3.531,617,3.114,618,2.839,619,3.114,620,2.839,621,2.333,622,3.531,623,3.114,624,3.114,625,2.634,626,3.114,627,3.531]],["title/controllers/AlbumController.html",[49,1.229,628,3.258]],["body/controllers/AlbumController.html",[0,0.142,3,0.09,4,0.082,5,0.082,7,0.09,8,0.009,9,0.005,10,0.005,13,1.285,15,0.362,21,1.687,23,1.339,28,0.761,29,1.228,30,0.881,49,1.022,51,1.101,53,1.618,55,1.375,56,2.3,58,1.706,61,1.879,62,1.859,64,0.483,65,0.645,69,1.568,70,1.074,71,1.834,89,1.549,104,1.925,116,2.021,235,2.176,236,2.71,237,1.851,238,1.67,239,2.542,247,3.799,261,3.3,352,2.78,397,3.644,557,4.668,563,2.891,568,3.205,571,4.117,628,3.922,629,3.205,630,2.498,631,5.258,632,4.637,633,4.968,634,3.634,635,4.701,636,3.205,637,3.634,638,3.634,639,2.922,640,3.634,641,3.205,642,5.239,643,2.922,644,3.634,645,3.205,646,3.634,647,3.634,648,5.449,649,3.205,650,5.532,651,3.634,652,3.634,653,2.542,654,2.71,655,3.205,656,3.878,657,3.205,658,2.082,659,4.228,660,2.71,661,3.205,662,3.634,663,3.634,664,3.634,665,3.634,666,3.634,667,3.634,668,2.71,669,3.634,670,3.634,671,2.71,672,3.634,673,2.922,674,3.634,675,3.634]],["title/modules/AlbumModule.html",[183,1.291,211,2.742]],["body/modules/AlbumModule.html",[0,0.189,3,0.12,4,0.109,5,0.109,7,0.12,8,0.009,9,0.007,10,0.007,13,2.541,51,1.94,64,0.554,65,0.856,108,1.62,183,2.124,185,2.021,186,2.083,187,2.218,188,2.218,189,2.083,190,3.303,191,3.303,196,2.943,197,1.906,198,2.149,202,2.552,211,5.521,213,3.148,550,5.359,566,5.812,567,4.256,585,4.478,590,3.88,628,5.359,656,5.521,657,4.256,676,4.256,677,4.256,678,4.256,679,4.256,680,4.17,681,4.826,682,4.826,683,3.6,684,4.23,685,4.826,686,4.826,687,4.826]],["title/injectables/AlbumService.html",[95,1.062,656,2.742]],["body/injectables/AlbumService.html",[0,0.079,3,0.05,4,0.045,5,0.045,7,0.05,8,0.01,9,0.003,10,0.003,13,2.693,15,0.2,17,2.192,18,2.192,19,1.349,21,1.942,22,1.024,23,1.208,26,0.867,28,0.687,29,1.273,30,0.795,34,0.867,42,1.253,48,0.772,55,0.868,56,2.216,61,1.622,62,1.495,64,0.458,65,0.356,70,1.253,71,1.496,75,2.428,89,1.449,92,3.13,95,0.807,96,0.817,99,1.239,100,1.616,101,2.261,104,1.737,105,2.475,107,0.955,108,0.674,109,0.674,113,1.406,114,1.723,116,2.04,118,2.728,122,1.261,125,2.964,132,1.901,137,2.926,141,2.321,143,1.901,146,1.837,147,1.772,150,1.901,155,1.406,165,0.895,166,2.083,173,4.145,221,3.598,224,2.475,228,3.441,261,2.082,270,2.418,281,1.754,286,1.772,287,1.616,289,2.973,290,2.735,292,2.993,373,1.203,387,1.901,390,1.824,397,3.471,414,1.499,415,1.616,455,2.668,459,2.879,467,3.955,470,1.772,471,1.772,482,2.926,483,1.772,484,1.328,539,2.66,540,2.537,541,0.955,548,1.328,579,2.947,585,1.406,586,1.616,588,2.192,589,1.499,590,1.616,591,1.616,593,0.924,594,2.986,603,1.772,606,1.616,608,2.082,612,2.082,617,4.338,619,1.772,620,1.616,630,1.576,632,2.926,633,2.668,635,3.088,641,2.926,642,4.1,645,2.926,648,3.737,649,2.926,650,3.441,653,2.321,655,1.772,656,2.082,658,1.151,659,2.668,660,1.499,688,1.772,689,3.318,690,3.318,691,3.318,692,4.069,693,2.01,694,2.668,695,2.01,696,3.713,697,2.01,698,2.01,699,3.318,700,2.01,701,3.318,702,2.01,703,3.318,704,2.01,705,2.01,706,2.428,707,2.01,708,1.328,709,1.499,710,2.01,711,2.01,712,1.772,713,3.161,714,3.441,715,2.01,716,2.926,717,2.01,718,1.616,719,1.616,720,1.406,721,1.616,722,3.318,723,2.01,724,3.737,725,3.318,726,3.318,727,2.01,728,2.01,729,2.964,730,1.772,731,3.161,732,2.01,733,2.945,734,3.318,735,3.318,736,2.926,737,2.01,738,2.01,739,3.318,740,2.01,741,2.01,742,3.318,743,2.668,744,2.01,745,2.01,746,2.01,747,2.01,748,3.318,749,2.01,750,2.01,751,2.01,752,2.01,753,2.01,754,2.01,755,2.01,756,1.616,757,1.616,758,1.616,759,2.01,760,2.01,761,2.01,762,1.616,763,2.01,764,1.499]],["title/classes/AlbumSummaryDto.html",[0,0.171,765,3.055]],["body/classes/AlbumSummaryDto.html",[0,0.282,2,1.211,3,0.121,4,0.11,5,0.11,7,0.179,8,0.009,9,0.007,10,0.007,13,1.72,15,0.484,16,1.642,19,2.931,20,3.545,21,2.043,23,1.199,25,3.545,26,3.112,28,0.899,29,1.362,30,1.026,34,2.098,37,3.212,42,2.54,44,3.163,45,2.57,46,2.39,47,2.57,48,1.867,76,3.673,77,3.673,86,2.164,283,2.673,513,2.39,765,5.043,766,6.334,767,3.626,768,4.862,769,4.862,770,4.862,771,4.862,772,4.862,773,4.862,774,4.862,775,4.499,776,2.91,777,3.051,778,3.4,779,3.212]],["title/modules/AppModule.html",[183,1.291,780,3.258]],["body/modules/AppModule.html",[0,0.141,3,0.09,4,0.081,5,0.081,7,0.09,8,0.01,9,0.005,10,0.005,28,0.382,51,1.093,64,0.56,65,0.64,86,1.606,108,1.211,142,2.387,166,1.774,183,1.819,184,5.226,185,1.511,186,1.557,187,1.658,188,1.658,189,1.557,190,2.404,191,1.658,196,2.404,197,1.425,198,1.606,202,1.908,211,4.689,213,2.572,373,3.132,459,1.908,680,3.806,684,4.937,780,6.725,781,3.181,782,3.181,783,5.226,784,4.937,785,5.226,786,4.473,787,5.226,788,4.937,789,4.937,790,5.226,791,4.689,792,3.608,793,2.901,794,2.384,795,3.608,796,2.691,797,3.608,798,3.608,799,3.181,800,2.691,801,3.608,802,3.608,803,3.608,804,3.608,805,3.608,806,3.608,807,3.608,808,3.608,809,3.608,810,3.608,811,3.608,812,3.608,813,3.608,814,3.608,815,3.608,816,3.608,817,3.608,818,2.691,819,3.608,820,3.608,821,3.608,822,3.608,823,3.608,824,3.181,825,3.608,826,3.608,827,3.608,828,3.608,829,3.608,830,3.608,831,5.231,832,3.608,833,3.608,834,3.608,835,2.901,836,3.181]],["title/classes/Auth.html",[0,0.171,837,2.742]],["body/classes/Auth.html",[0,0.27,2,1.721,3,0.172,4,0.156,5,0.156,7,0.172,8,0.009,9,0.008,10,0.008,837,5.023,838,6.093]],["title/controllers/AuthController.html",[49,1.229,839,3.258]],["body/controllers/AuthController.html",[0,0.132,3,0.124,4,0.076,5,0.076,7,0.084,8,0.009,9,0.005,10,0.005,15,0.336,23,1.219,28,0.693,29,1.205,30,0.802,49,0.95,51,1.023,53,1.503,55,1.303,56,2.267,58,1.553,61,1.71,62,1.795,64,0.487,65,0.599,70,1.473,71,1.669,88,2.339,89,1.41,99,1.261,104,1.752,114,2.026,116,1.402,118,2.376,126,1.604,142,2.313,146,1.261,172,1.856,176,2.231,197,1.968,236,2.518,237,1.72,238,1.552,352,1.785,399,2.021,406,3.835,459,1.785,540,2.021,543,2.361,557,1.785,563,3.256,565,2.119,593,1.552,594,1.72,658,1.934,696,3.915,719,2.715,729,4.573,731,3.717,837,2.119,839,3.717,840,2.977,841,6.436,842,6.151,843,4.006,844,5.223,845,2.977,846,4.573,847,6.977,848,6.977,849,4.983,850,3.377,851,2.977,852,4.573,853,4.983,854,3.377,855,2.715,856,4.983,857,3.377,858,2.977,859,5.257,860,4.983,861,3.377,862,3.915,863,3.913,864,2.977,865,2.977,866,2.361,867,3.293,868,2.977,869,3.377,870,3.377,871,4.983,872,3.377,873,2.977,874,4.983,875,3.377,876,3.377,877,3.377,878,3.377,879,3.377,880,3.377,881,3.377,882,2.977,883,2.518,884,3.377,885,3.377,886,3.377,887,3.377,888,3.377,889,3.377,890,3.377,891,3.377,892,3.377,893,3.377,894,3.377,895,3.377,896,2.977,897,3.377,898,2.361,899,4.006,900,3.377,901,3.377,902,3.377,903,3.377]],["title/guards/AuthGuard.html",[238,2.008,904,3.512]],["body/guards/AuthGuard.html",[0,0.173,3,0.11,4,0.1,5,0.1,7,0.11,8,0.01,9,0.006,10,0.006,15,0.44,23,1.125,28,0.639,30,0.74,55,1.578,61,1.156,64,0.443,65,0.784,69,1.908,70,1.307,71,1.128,89,1.301,95,1.468,99,1.651,104,1.617,116,2.077,125,3.092,132,2.533,142,1.564,143,2.533,146,1.651,148,3.613,152,2.337,179,2.967,238,2.774,289,2.877,290,3.053,373,2.647,387,3.458,538,3.297,540,2.647,564,2.921,587,3.554,593,2.774,611,3.092,733,2.647,796,3.297,835,4.852,836,3.899,862,4.114,898,4.221,905,3.554,906,3.899,907,6.816,908,4.421,909,7.035,910,4.421,911,3.899,912,6.511,913,4.421,914,5.322,915,6.872,916,3.554,917,3.899,918,3.899,919,3.297,920,4.421,921,4.421,922,4.421,923,3.899,924,4.421,925,3.554,926,2.775,927,4.421,928,4.421,929,4.421,930,4.421,931,4.852,932,4.421,933,4.421,934,4.421,935,4.421,936,4.421,937,2.921,938,3.899,939,4.421,940,3.899,941,3.899,942,3.899,943,4.421,944,4.421]],["title/modules/AuthModule.html",[183,1.291,783,3.055]],["body/modules/AuthModule.html",[0,0.187,3,0.119,4,0.108,5,0.108,7,0.119,8,0.009,9,0.007,10,0.007,51,1.928,64,0.563,65,0.848,108,1.604,170,2.135,183,2.113,185,2.002,186,2.063,187,2.197,188,2.197,189,2.063,190,3.287,191,2.197,196,2.924,197,2.513,198,2.128,202,2.527,213,3.128,406,2.628,680,4.158,783,6.211,786,4.887,791,5.123,799,4.215,800,3.565,837,3,839,5.333,863,5.393,864,4.215,867,5.393,868,4.215,945,4.215,946,4.78,947,4.215,948,4.78,949,4.78,950,4.78,951,4.215,952,4.203,953,4.215,954,3.843,955,2.739,956,4.78]],["title/injectables/AuthService.html",[95,1.062,863,2.886]],["body/injectables/AuthService.html",[0,0.111,3,0.07,4,0.064,5,0.064,7,0.07,8,0.01,9,0.004,10,0.004,15,0.282,21,0.705,23,1.272,28,0.723,29,1.083,30,0.837,34,1.222,55,1.141,56,2.149,61,1.689,62,1.642,64,0.474,65,0.502,71,1.114,88,2.552,89,1.583,90,2.712,95,1.061,96,1.151,99,1.63,104,1.829,114,2.775,116,2.066,118,2.738,125,1.98,126,1.345,146,2.234,166,1.392,170,2.29,178,2.5,270,1.392,289,3.155,290,3.039,292,1.557,399,1.695,406,1.557,407,2.612,424,1.98,425,2.497,540,3.581,541,2.073,543,1.98,579,3.243,588,2.883,594,2.712,601,3.255,612,1.777,658,1.622,696,2.612,706,1.622,720,1.98,796,2.112,841,6.019,842,3.848,843,3.508,844,3.848,845,3.848,846,4.184,851,3.848,852,4.184,855,3.508,858,2.497,859,3.508,862,1.695,863,2.883,865,2.497,873,2.497,882,2.497,898,1.98,899,2.277,909,6.272,926,1.777,938,2.497,941,2.497,957,2.497,958,4.364,959,2.277,960,4.258,961,4.075,962,2.832,963,2.832,964,2.832,965,2.832,966,2.277,967,2.832,968,2.832,969,2.832,970,2.832,971,2.497,972,2.832,973,2.112,974,2.497,975,4.364,976,4.364,977,4.364,978,5.324,979,4.364,980,3.848,981,2.832,982,3.848,983,3.848,984,4.364,985,5.324,986,5.324,987,5.195,988,4.364,989,4.364,990,2.832,991,1.98,992,2.277,993,2.832,994,2.112,995,2.832,996,2.832,997,2.832,998,2.832,999,5.324,1000,3.848,1001,2.832,1002,4.364,1003,2.832,1004,4.364,1005,2.832,1006,2.832,1007,2.832,1008,2.832,1009,2.497,1010,2.832,1011,2.832,1012,2.832,1013,2.497,1014,2.832,1015,2.112,1016,2.832,1017,4.364,1018,2.832,1019,2.832]],["title/classes/BaseUserDto.html",[0,0.171,1020,3.258]],["body/classes/BaseUserDto.html",[0,0.244,2,1.155,3,0.115,4,0.105,5,0.105,7,0.155,8,0.009,9,0.006,10,0.006,15,0.461,16,1.591,23,1.603,28,0.875,29,1.311,30,1.014,42,1.842,58,1.963,64,0.299,74,2.91,88,2.781,89,1.518,90,3.587,91,3.064,92,2.69,93,4.359,178,4.034,378,4.088,406,3.871,410,4.653,966,5.661,1020,4.649,1021,6.268,1022,4.653,1023,5.616,1024,4.636,1025,4.636,1026,4.088,1027,4.636,1028,5.252,1029,5.496,1030,4.636,1031,4.636,1032,4.636,1033,3.063,1034,4.118,1035,4.844,1036,4.501,1037,2.131,1038,2.91]],["title/controllers/BuyerOrdersController.html",[49,1.229,1039,3.258]],["body/controllers/BuyerOrdersController.html",[0,0.127,3,0.081,4,0.073,5,0.073,7,0.081,8,0.009,9,0.005,10,0.005,15,0.323,21,1.599,23,1.341,28,0.762,29,1.248,30,0.883,49,0.914,51,0.985,53,1.447,55,1.267,56,2.313,58,1.709,61,1.882,62,2.273,64,0.414,65,0.577,69,1.403,70,0.961,71,1.837,89,1.552,91,1.598,104,1.928,111,1.447,116,2.025,118,1.181,126,2.302,146,1.809,148,1.946,153,3.827,172,3.184,218,3.388,230,2.866,235,1.946,237,1.656,238,1.494,247,3.806,255,2.613,256,2.866,352,2.561,545,2.866,557,4.455,563,1.787,565,2.04,571,3.933,593,2.227,636,2.866,639,2.613,643,2.613,653,2.273,658,1.862,673,2.613,696,2.9,743,3.895,756,2.613,757,2.613,758,2.613,1039,3.613,1040,5.562,1041,2.613,1042,3.25,1043,4.272,1044,3.895,1045,4.845,1046,4.845,1047,4.272,1048,3.25,1049,3.25,1050,2.866,1051,4.028,1052,3.25,1053,3.25,1054,4.845,1055,3.25,1056,3.843,1057,3.25,1058,3.25,1059,2.866,1060,3.25,1061,2.866,1062,3.25,1063,3.895,1064,3.25,1065,2.273,1066,3.041,1067,2.424,1068,3.25,1069,3.25,1070,3.25,1071,6.907,1072,3.25,1073,3.895,1074,2.424,1075,4.656,1076,3.25,1077,2.866,1078,2.866,1079,3.25,1080,3.201,1081,3.25,1082,3.25,1083,3.25,1084,3.25,1085,3.25,1086,2.866,1087,3.25,1088,3.25,1089,3.25,1090,3.25,1091,2.866,1092,3.25,1093,3.25,1094,2.613,1095,2.148,1096,3.25]],["title/injectables/BuyerOrdersService.html",[95,1.062,1066,2.742]],["body/injectables/BuyerOrdersService.html",[0,0.057,3,0.036,4,0.033,5,0.033,7,0.036,8,0.01,9,0.003,10,0.003,13,1.996,15,0.146,16,0.649,19,0.597,20,0.721,21,1.735,22,0.747,23,1.101,25,0.721,26,1.097,28,0.672,29,1.204,30,0.753,42,0.994,44,1.25,46,1.972,47,3.247,48,0.976,55,0.665,56,2.07,61,1.475,62,0.698,64,0.449,65,0.26,70,1.815,71,1.508,75,0.841,76,0.747,77,0.747,86,0.653,88,0.58,89,1.274,91,2.443,92,0.633,95,0.618,96,0.597,99,0.949,101,3.074,104,1.583,107,0.697,108,0.492,109,0.492,111,3.201,113,1.026,114,2.719,115,1.094,116,2.209,118,2.573,124,0.841,126,1.208,132,0.841,134,0.969,135,1.18,142,0.519,143,0.841,146,0.949,150,2.298,153,2.223,165,0.653,170,0.492,172,1.849,173,0.878,176,0.969,209,1.026,218,2.353,270,0.721,281,2.398,282,1.778,283,3.249,285,1.026,289,2.657,290,2.507,297,1.596,299,0.878,325,1.18,387,3.519,390,1.398,401,1.026,421,1.094,422,1.094,442,3.225,459,0.776,513,1.654,533,1.18,539,0.921,541,0.697,547,1.294,548,0.969,553,1.18,593,1.546,594,0.747,598,1.094,604,1.18,605,0.776,618,2.044,621,0.969,624,1.294,626,1.294,658,0.841,696,2.014,706,2.298,708,0.969,709,1.094,713,1.896,720,2.353,721,1.18,729,1.026,733,0.878,776,2.014,777,1.596,778,1.778,779,2.223,794,0.969,862,0.878,919,1.094,926,0.921,931,1.18,955,0.841,961,3.055,1040,4.733,1043,2.966,1044,2.704,1047,2.242,1050,1.294,1051,2.518,1056,4.24,1061,2.242,1065,1.026,1066,1.596,1071,6.026,1073,1.18,1074,1.094,1075,1.18,1080,0.969,1094,2.704,1095,0.969,1097,1.18,1098,3.364,1099,2.242,1100,2.542,1101,2.542,1102,3.364,1103,1.467,1104,3.364,1105,2.966,1106,2.966,1107,3.347,1108,4.703,1109,2.542,1110,2.242,1111,1.467,1112,1.467,1113,1.467,1114,2.542,1115,1.467,1116,1.467,1117,1.467,1118,2.542,1119,1.467,1120,2.542,1121,1.467,1122,1.467,1123,4.382,1124,2.992,1125,1.467,1126,1.467,1127,1.18,1128,1.094,1129,1.467,1130,1.467,1131,0.969,1132,1.294,1133,1.18,1134,1.467,1135,1.896,1136,1.18,1137,1.294,1138,2.542,1139,1.467,1140,1.467,1141,1.467,1142,2.542,1143,1.467,1144,2.542,1145,1.467,1146,1.467,1147,1.467,1148,1.467,1149,1.467,1150,2.542,1151,1.467,1152,1.467,1153,1.294,1154,1.467,1155,1.467,1156,2.542,1157,1.467,1158,1.467,1159,1.294,1160,1.467,1161,1.467,1162,1.294,1163,1.294,1164,1.294,1165,1.294,1166,1.467,1167,2.542,1168,2.542,1169,1.467,1170,1.294,1171,1.467,1172,1.467,1173,1.467,1174,2.242,1175,1.467,1176,1.294,1177,1.467,1178,4,1179,3.538,1180,2.992,1181,2.542,1182,2.044,1183,2.044,1184,2.242,1185,2.044,1186,1.467,1187,4,1188,0.969,1189,1.467,1190,1.467,1191,1.467,1192,1.467,1193,1.467,1194,1.467,1195,1.467,1196,1.467,1197,1.467,1198,3.364,1199,1.467,1200,1.294,1201,1.457,1202,1.294,1203,1.467,1204,1.467,1205,1.467,1206,1.467,1207,1.467,1208,1.294,1209,1.467,1210,1.294,1211,1.294,1212,2.542,1213,1.467,1214,1.467,1215,1.294,1216,1.294,1217,1.467,1218,2.542,1219,1.467,1220,1.467,1221,1.294,1222,2.542,1223,4.536,1224,1.467,1225,1.467,1226,2.044,1227,1.467,1228,1.467,1229,1.467,1230,2.542,1231,2.242,1232,1.294,1233,2.542,1234,1.294,1235,1.467,1236,1.294,1237,1.467,1238,1.467,1239,1.467,1240,1.467,1241,1.467,1242,1.467,1243,1.467,1244,1.294,1245,1.294,1246,1.18,1247,1.467,1248,2.353,1249,1.294,1250,1.467,1251,0.921,1252,2.542,1253,1.68,1254,1.18,1255,1.294,1256,1.094,1257,1.18,1258,1.294,1259,1.294,1260,1.294,1261,1.294,1262,1.294,1263,1.294,1264,1.294,1265,1.18,1266,1.467,1267,1.467,1268,1.294,1269,3.364,1270,1.467,1271,1.467,1272,1.467,1273,1.467,1274,1.294,1275,1.467,1276,1.294,1277,1.294,1278,1.467,1279,1.294,1280,1.094,1281,1.294,1282,1.467,1283,2.966,1284,1.467,1285,2.704,1286,1.467,1287,1.294,1288,1.18,1289,1.467,1290,1.094,1291,1.294,1292,1.467,1293,1.467,1294,1.467,1295,1.467,1296,1.467,1297,1.294,1298,1.467,1299,1.467,1300,1.467,1301,1.467,1302,1.467,1303,1.467,1304,1.467,1305,1.467,1306,1.467,1307,1.467,1308,1.467,1309,1.467,1310,1.467,1311,1.467,1312,1.467,1313,1.467,1314,1.467,1315,1.467,1316,1.467,1317,1.467]],["title/modules/CommonModule.html",[183,1.291,1318,3.512]],["body/modules/CommonModule.html",[0,0.265,3,0.168,4,0.153,5,0.153,7,0.168,8,0.009,9,0.008,10,0.008,64,0.437,65,1.201,183,2.337,185,2.834,1318,6.358,1319,6.77]],["title/classes/CreateAdminDto.html",[0,0.171,1320,3.258]],["body/classes/CreateAdminDto.html",[0,0.269,2,1.716,3,0.171,4,0.155,5,0.155,7,0.171,8,0.009,9,0.008,10,0.008,1320,5.957,1321,6.072,1322,5.536]],["title/classes/CreateAlbumDto.html",[0,0.171,635,2.742]],["body/classes/CreateAlbumDto.html",[0,0.27,2,0.947,3,0.094,4,0.086,5,0.086,7,0.135,8,0.009,9,0.006,10,0.006,15,0.378,16,1.386,17,4.186,18,4.186,19,2.576,20,3.115,23,1.288,25,3.115,26,2.734,28,0.92,29,1.308,30,1.026,42,2.366,44,1.868,45,2.009,58,1.986,64,0.35,76,3.227,77,3.227,141,4.431,142,1.344,179,2.669,484,4.186,570,4.725,635,3.408,1022,3.588,1023,2.834,1033,2.511,1034,4.567,1035,3.793,1036,4.357,1037,1.747,1038,2.385,1323,6.302,1324,2.657,1325,3.8,1326,3.8,1327,6.912,1328,3.8,1329,3.8,1330,3.8,1331,3.8,1332,3.8,1333,3.8,1334,3.8,1335,3.351,1336,3.8,1337,5.155,1338,3.351,1339,3.351,1340,3.8,1341,3.8,1342,3.8,1343,3.8,1344,3.8,1345,2.511,1346,4.049,1347,4.788,1348,4.788,1349,6.726,1350,4.049,1351,4.365,1352,3.055,1353,3.055,1354,3.055,1355,3.055,1356,3.055,1357,3.055,1358,3.351,1359,2.834]],["title/classes/CreateLeadDto.html",[0,0.171,1360,2.886]],["body/classes/CreateLeadDto.html",[0,0.298,2,1.585,3,0.158,4,0.144,5,0.144,7,0.158,8,0.009,9,0.008,10,0.008,15,0.633,16,1.945,28,0.674,29,1.161,30,0.78,58,1.51,64,0.41,88,3.224,1022,5.393,1037,2.924,1360,5.036,1361,6.721,1362,5.114,1363,6.361]],["title/classes/CreateMercadopagoDto.html",[0,0.171,1364,3.258]],["body/classes/CreateMercadopagoDto.html",[0,0.269,2,1.716,3,0.171,4,0.155,5,0.155,7,0.171,8,0.009,9,0.008,10,0.008,1364,5.957,1365,6.072,1366,5.536]],["title/classes/CreateOrderDto.html",[0,0.171,1051,2.742]],["body/classes/CreateOrderDto.html",[0,0.314,2,1.364,3,0.136,4,0.124,5,0.124,7,0.136,8,0.009,9,0.007,10,0.007,15,0.545,16,1.773,28,0.85,29,1.223,30,0.852,42,2.053,44,2.691,58,1.649,64,0.448,142,1.936,283,4.196,390,4.196,776,3.277,777,3.435,1034,4.59,1036,3.98,1037,2.516,1051,4.36,1338,4.826,1339,4.826,1345,3.616,1346,5.181,1350,5.181,1359,4.082,1367,6.136,1368,3.616,1369,5.615,1370,5.473,1371,5.988,1372,5.473,1373,6.126,1374,4.082,1375,4.4,1376,4.826]],["title/classes/CreatePaymentAccountDto.html",[0,0.171,1377,3.258]],["body/classes/CreatePaymentAccountDto.html",[0,0.265,2,1.313,3,0.131,4,0.119,5,0.119,7,0.131,8,0.009,9,0.007,10,0.007,15,0.525,16,1.731,23,1.563,28,0.867,29,1.206,30,1.005,34,2.927,42,2.005,58,1.945,62,1.447,64,0.34,407,4.489,1033,3.483,1035,5.106,1036,3.02,1037,2.423,1201,3.02,1349,6.029,1377,5.058,1378,7.394,1379,4.238,1380,6.613,1381,6.613,1382,6.029,1383,6.613,1384,5.271,1385,6.783,1386,5.271,1387,5.271,1388,5.271,1389,5.271]],["title/classes/CreatePhotoDto.html",[0,0.171,1390,3.258]],["body/classes/CreatePhotoDto.html",[0,0.289,2,1.503,3,0.15,4,0.136,5,0.136,7,0.15,8,0.009,9,0.008,10,0.008,15,0.601,16,1.884,28,0.782,29,1.266,30,0.906,58,1.753,64,0.389,86,3.551,390,4.386,1034,3.987,1035,3.613,1036,4.57,1037,2.774,1369,5.579,1390,5.506,1391,7.035,1392,4.852,1393,6.035,1394,6.035]],["title/classes/CreateSeedDto.html",[0,0.171,1395,3.258]],["body/classes/CreateSeedDto.html",[0,0.269,2,1.716,3,0.171,4,0.155,5,0.155,7,0.171,8,0.009,9,0.008,10,0.008,1395,5.957,1396,6.072,1397,5.536]],["title/classes/CreateSubscriptionDto.html",[0,0.171,1398,3.258]],["body/classes/CreateSubscriptionDto.html",[0,0.269,2,1.716,3,0.171,4,0.155,5,0.155,7,0.171,8,0.009,9,0.008,10,0.008,1398,5.957,1399,5.536,1400,5.536]],["title/classes/CreateSubscriptionOrderDto.html",[0,0.171,1401,3.258]],["body/classes/CreateSubscriptionOrderDto.html",[0,0.297,2,1.575,3,0.157,4,0.143,5,0.143,7,0.157,8,0.009,9,0.008,10,0.008,15,0.629,16,1.938,28,0.669,29,1.157,30,0.775,58,1.501,64,0.408,1037,2.905,1368,4.176,1369,5.693,1399,6.105,1401,5.663,1402,4.546,1403,6.544,1404,5.573]],["title/classes/CreateUserDto.html",[0,0.171,852,3.055]],["body/classes/CreateUserDto.html",[0,0.26,2,1.273,3,0.127,4,0.115,5,0.115,7,0.127,8,0.009,9,0.007,10,0.007,15,0.509,16,1.697,23,1.55,28,0.859,29,1.308,30,0.995,58,1.926,64,0.429,74,3.207,88,2.918,89,1.593,90,3.764,178,4.233,374,4.506,399,3.059,406,4.062,852,4.649,1021,3.811,1022,4.882,1023,3.811,1026,4.506,1028,5.51,1029,5.862,1033,3.376,1035,4.684,1036,4.233,1037,2.349,1405,7.332,1406,5.11,1407,4.506,1408,5.11,1409,5.11,1410,4.506,1411,4.506,1412,5.862,1413,4.506]],["title/controllers/FilesController.html",[49,1.229,1414,3.258]],["body/controllers/FilesController.html",[0,0.194,3,0.123,4,0.112,5,0.175,7,0.123,8,0.009,9,0.007,10,0.007,15,0.493,23,0.924,28,0.525,30,0.608,49,1.395,51,1.502,53,2.207,55,1.704,56,1.999,58,1.177,61,1.296,62,1.999,64,0.499,65,0.879,69,2.14,70,1.465,71,1.265,89,1.069,104,1.328,116,1.395,148,2.968,237,2.526,238,2.279,239,3.467,247,2.621,289,2.729,290,2.574,352,2.621,397,2.901,557,4.247,571,2.84,605,2.621,706,3.734,718,3.986,866,3.467,926,4.09,937,3.276,1091,4.372,1188,3.276,1414,4.861,1415,4.372,1416,3.986,1417,6.517,1418,4.958,1419,5.43,1420,4.958,1421,4.958,1422,4.372,1423,4.372,1424,4.372,1425,3.986,1426,4.57,1427,4.372,1428,4.958,1429,4.372,1430,4.958,1431,4.958,1432,4.958,1433,4.958,1434,4.372,1435,5.747,1436,5.24,1437,4.372,1438,4.372,1439,4.372,1440,4.372,1441,4.372]],["title/modules/FilesModule.html",[183,1.291,784,2.886]],["body/modules/FilesModule.html",[0,0.212,3,0.135,4,0.123,5,0.123,7,0.135,8,0.009,9,0.007,10,0.007,51,2.094,64,0.533,65,0.963,183,2.247,185,2.273,186,2.343,187,2.495,188,2.495,189,2.343,190,3.495,191,3.495,196,3.177,197,2.144,198,2.417,213,3.398,680,4.305,784,5.798,793,5.556,794,3.587,800,4.049,1414,5.671,1426,5.616,1427,4.787,1442,4.787,1443,4.787,1444,4.787,1445,5.429,1446,5.429,1447,5.429]],["title/injectables/FilesService.html",[95,1.062,1426,2.742]],["body/injectables/FilesService.html",[0,0.134,3,0.085,4,0.077,5,0.135,7,0.085,8,0.01,9,0.005,10,0.005,15,0.341,23,1.113,28,0.632,29,1.117,30,0.732,55,1.316,56,2.013,61,1.316,62,0.94,64,0.453,65,0.607,69,1.477,70,1.012,71,1.79,86,1.524,89,1.287,95,1.224,96,1.391,99,1.278,104,1.599,116,2.063,118,2.169,134,2.261,146,1.278,165,1.524,170,2.003,172,1.882,174,2.261,178,1.961,270,1.683,289,2.5,290,2.77,292,1.882,387,2.884,397,2.658,410,3.326,424,2.394,541,2.836,548,2.261,579,3.485,593,2.314,605,1.81,608,2.148,625,2.553,706,3.42,708,2.261,709,2.553,733,3.941,764,3.754,937,2.261,959,2.752,973,2.553,1215,3.018,1419,4.453,1426,3.159,1434,5.264,1436,2.752,1448,3.018,1449,5.034,1450,5.97,1451,3.423,1452,5.034,1453,3.423,1454,2.752,1455,3.423,1456,3.423,1457,3.423,1458,3.423,1459,3.018,1460,3.423,1461,3.423,1462,3.423,1463,3.423,1464,3.423,1465,3.423,1466,3.423,1467,7.014,1468,3.423,1469,4.047,1470,5.97,1471,4.047,1472,5.264,1473,3.423,1474,3.018,1475,3.018,1476,3.423,1477,3.423,1478,4.439,1479,3.423,1480,3.423,1481,3.018,1482,3.423,1483,2.752,1484,3.423,1485,5.034,1486,3.423,1487,3.018,1488,3.423,1489,3.018,1490,6.582,1491,5.034,1492,5.034,1493,3.423,1494,3.423,1495,4.439,1496,3.423,1497,3.423,1498,3.423,1499,3.423,1500,3.423,1501,3.423,1502,3.423,1503,5.034,1504,5.034,1505,3.423,1506,2.553,1507,3.423,1508,2.752,1509,3.423,1510,5.97,1511,3.423,1512,2.752,1513,3.423,1514,3.423,1515,3.018,1516,3.423,1517,3.423]],["title/entities/Lead.html",[477,1.587,1518,3.055]],["body/entities/Lead.html",[0,0.226,3,0.144,4,0.131,5,0.131,7,0.144,8,0.009,9,0.007,10,0.007,15,0.576,16,1.837,21,1.951,28,0.829,29,1.248,30,0.961,34,3.106,48,3.007,58,1.859,64,0.374,88,3.093,109,1.943,142,2.546,477,2.615,478,2.95,488,3.805,491,4.689,500,3.805,523,4.655,532,3.061,535,4.655,1518,5.034,1519,5.106,1520,5.79,1521,5.79,1522,5.79]],["title/controllers/LeadController.html",[49,1.229,1523,3.258]],["body/controllers/LeadController.html",[0,0.212,3,0.134,4,0.122,5,0.122,7,0.134,8,0.009,9,0.007,10,0.007,15,0.539,23,1.009,28,0.573,30,0.846,49,1.523,51,1.641,53,2.41,55,1.804,56,2.318,58,1.638,61,1.804,62,1.894,64,0.49,65,0.96,69,2.337,70,1.6,71,1.761,89,1.167,104,1.45,261,5.019,352,4.015,563,2.976,630,3.278,658,3.102,661,4.774,694,4.353,696,4.13,1360,5.283,1523,5.146,1524,6.084,1525,5.414,1526,5.414,1527,5.414,1528,5.018,1529,4.774,1530,4.353,1531,5.414,1532,5.414,1533,5.414]],["title/modules/LeadModule.html",[183,1.291,785,3.055]],["body/modules/LeadModule.html",[0,0.225,3,0.143,4,0.13,5,0.13,7,0.143,8,0.009,9,0.007,10,0.007,51,2.173,64,0.543,65,1.021,108,1.932,183,2.309,185,2.41,186,2.484,187,2.646,188,2.646,189,2.484,190,3.59,191,2.646,196,3.296,197,2.274,198,2.563,202,3.044,213,2.83,785,5.998,1518,4.026,1523,5.826,1528,5.667,1529,5.076,1534,5.076,1535,5.076,1536,5.757,1537,5.076,1538,5.757,1539,5.757]],["title/injectables/LeadService.html",[95,1.062,1528,2.886]],["body/injectables/LeadService.html",[0,0.19,3,0.12,4,0.109,5,0.109,7,0.12,8,0.009,9,0.007,10,0.007,15,0.483,23,1.197,28,0.68,30,0.884,48,1.862,55,1.68,56,2.25,61,1.68,62,1.763,64,0.515,65,0.86,70,1.433,71,1.639,88,1.915,89,1.385,95,1.562,96,1.972,99,2.399,101,3.524,104,1.721,107,2.304,108,1.627,109,1.627,111,2.159,114,1.972,116,1.807,118,1.762,261,4.812,285,3.392,289,2.031,290,1.915,611,3.392,612,3.044,630,3.052,658,2.778,694,5.164,696,2.903,983,4.277,1000,4.277,1360,5.066,1518,4.492,1528,4.244,1530,3.899,1537,4.277,1540,4.277,1541,4.85,1542,4.85,1543,6.423,1544,4.85,1545,4.85,1546,4.85,1547,4.85,1548,5.664,1549,4.85,1550,4.85,1551,4.277,1552,4.85,1553,4.85,1554,4.85]],["title/classes/LoginDto.html",[0,0.171,846,3.055]],["body/classes/LoginDto.html",[0,0.272,2,1.364,3,0.136,4,0.124,5,0.124,7,0.136,8,0.009,9,0.007,10,0.007,15,0.545,16,1.773,23,1.578,28,0.85,29,1.326,30,0.985,58,1.906,64,0.353,88,3.015,89,1.646,178,4.373,406,4.196,846,4.859,1022,5.043,1023,4.082,1035,4.806,1036,4.373,1037,2.516,1407,4.826,1410,4.826,1411,4.826,1412,6.126,1413,4.826,1555,4.826,1556,5.473,1557,5.473,1558,5.473,1559,5.473]],["title/modules/MailModule.html",[183,1.291,786,2.615]],["body/modules/MailModule.html",[0,0.232,3,0.147,4,0.134,5,0.134,7,0.147,8,0.009,9,0.007,10,0.007,64,0.471,65,1.051,183,2.339,185,2.482,186,2.558,187,2.724,188,2.724,189,2.558,190,3.638,191,3.638,196,3.357,197,2.341,198,2.639,786,5.24,961,5.186,1560,5.227,1561,5.227,1562,5.227,1563,5.927,1564,5.927]],["title/injectables/MailService.html",[95,1.062,961,2.503]],["body/injectables/MailService.html",[0,0.109,3,0.069,4,0.063,5,0.063,7,0.069,8,0.009,9,0.004,10,0.004,15,0.278,16,1.103,23,1.266,28,0.775,29,1.379,30,0.921,42,2.007,47,3.867,55,1.13,56,2.303,61,1.776,62,0.768,64,0.457,65,0.496,70,2.007,71,1.103,88,1.104,89,1.653,90,3.46,91,1.375,92,1.207,95,1.051,96,1.137,99,1.972,104,1.819,114,3.051,116,1.807,118,2.468,132,1.602,134,2.855,143,1.602,146,1.044,150,2.476,227,1.478,228,1.956,229,2.085,290,2.086,543,1.956,605,2.793,668,2.085,733,3.846,883,2.085,961,2.476,994,3.223,1056,4.378,1253,1.847,1265,3.474,1285,5.88,1287,2.466,1288,2.248,1290,2.085,1291,2.466,1551,3.811,1565,2.466,1566,5.942,1567,6.243,1568,4.321,1569,5.282,1570,5.282,1571,4.321,1572,4.321,1573,4.321,1574,4.321,1575,4.321,1576,5.942,1577,5.942,1578,2.796,1579,2.796,1580,5.24,1581,2.796,1582,5.282,1583,2.796,1584,2.796,1585,4.321,1586,5.24,1587,2.796,1588,4.321,1589,2.796,1590,4.321,1591,2.796,1592,4.321,1593,2.796,1594,3.474,1595,2.796,1596,3.474,1597,2.796,1598,3.474,1599,2.796,1600,3.474,1601,2.796,1602,3.474,1603,3.474,1604,2.796,1605,2.796,1606,2.796,1607,2.796,1608,6.791,1609,4.321,1610,2.796,1611,2.796,1612,2.796,1613,7.923,1614,2.796,1615,2.796,1616,5.282,1617,4.321,1618,2.796,1619,2.085,1620,4.321]],["title/classes/Mercadopago.html",[0,0.171,1201,2.503]],["body/classes/Mercadopago.html",[0,0.27,2,1.721,3,0.172,4,0.156,5,0.156,7,0.172,8,0.009,9,0.008,10,0.008,1201,4.585,1621,6.093]],["title/controllers/MercadopagoController.html",[49,1.229,1622,3.258]],["body/controllers/MercadopagoController.html",[0,0.174,3,0.11,4,0.1,5,0.1,7,0.11,8,0.009,9,0.006,10,0.006,15,0.442,21,1.106,23,0.828,28,0.47,29,1.217,30,0.545,49,1.249,51,1.346,53,1.977,55,1.583,56,1.891,58,1.054,61,1.161,62,1.219,64,0.444,65,0.788,69,1.916,70,1.313,71,1.133,86,1.977,89,0.958,104,1.19,116,1.703,118,1.614,124,3.468,126,2.11,132,2.544,143,2.544,165,1.977,172,2.441,352,2.348,459,2.348,557,3.911,563,2.441,564,5.115,594,2.262,605,2.348,611,3.106,731,3.312,733,3.624,847,6.826,848,6.523,866,3.106,1009,3.916,1077,5.338,1080,2.934,1188,2.934,1201,4.238,1248,3.106,1256,3.312,1622,4.515,1623,3.916,1624,6.888,1625,4.441,1626,6.826,1627,6.523,1628,6.054,1629,4.441,1630,4.551,1631,3.916,1632,4.441,1633,6.054,1634,3.57,1635,4.441,1636,4.441,1637,4.441,1638,4.441,1639,4.441,1640,4.441,1641,5.338,1642,4.441,1643,4.441,1644,4.441,1645,4.441,1646,4.441,1647,4.441,1648,5.338,1649,4.441,1650,4.441,1651,5.338,1652,3.916,1653,6.054,1654,4.441,1655,3.916,1656,4.441,1657,4.441,1658,4.441]],["title/modules/MercadopagoModule.html",[183,1.291,787,3.055]],["body/modules/MercadopagoModule.html",[0,0.199,3,0.126,4,0.115,5,0.115,7,0.126,8,0.009,9,0.007,10,0.007,51,2.008,64,0.553,65,0.902,152,2.688,183,2.178,185,2.129,186,2.194,187,2.337,188,2.337,189,2.194,190,3.388,191,3.388,196,3.045,197,2.008,198,2.263,213,3.257,787,6.162,788,5.486,791,5.212,793,5.326,794,3.359,951,4.483,1622,5.497,1630,5.857,1631,4.483,1659,4.483,1660,5.084,1661,4.483,1662,4.483,1663,5.084,1664,5.084,1665,7.37,1666,4.087,1667,5.084,1668,5.084]],["title/injectables/MercadopagoService.html",[95,1.062,1630,2.886]],["body/injectables/MercadopagoService.html",[0,0.102,3,0.065,4,0.059,5,0.059,7,0.065,8,0.01,9,0.004,10,0.004,15,0.26,16,1.047,23,1.068,28,0.732,29,1.28,30,0.764,46,3.397,55,1.073,56,1.814,61,1.324,64,0.462,65,0.464,70,1.695,71,1.59,86,1.165,89,1.236,95,0.998,96,1.064,99,1.533,104,1.536,114,3.214,116,2.251,118,2.401,126,1.243,132,1.499,143,1.499,146,1.533,153,1.729,179,2.018,289,2.12,290,2,299,3.432,301,3.598,314,3.061,373,2.457,563,1.439,564,1.729,594,2.091,605,1.384,668,1.952,706,1.499,733,2.457,762,2.104,794,1.729,835,5.313,916,2.104,919,1.952,960,4.136,971,3.619,974,2.308,991,1.83,1040,1.952,1056,2.457,1063,5.007,1066,4.336,1067,1.952,1095,1.729,1108,6.092,1226,2.104,1246,5.007,1248,2.87,1253,2.712,1256,1.952,1257,2.104,1288,2.104,1459,2.308,1626,6.308,1627,6.308,1630,2.712,1641,2.308,1648,5.056,1651,5.492,1652,2.308,1666,2.104,1669,2.308,1670,4.104,1671,5.064,1672,5.064,1673,2.617,1674,6.608,1675,4.104,1676,4.104,1677,2.617,1678,2.617,1679,2.617,1680,2.617,1681,2.617,1682,2.308,1683,2.308,1684,2.617,1685,4.104,1686,2.617,1687,2.617,1688,2.617,1689,4.104,1690,2.617,1691,2.617,1692,2.617,1693,2.308,1694,2.617,1695,2.617,1696,4.104,1697,2.617,1698,2.617,1699,2.617,1700,4.104,1701,2.617,1702,2.617,1703,3.3,1704,2.617,1705,2.617,1706,2.617,1707,2.617,1708,2.308,1709,2.617,1710,2.617,1711,2.617,1712,2.617,1713,2.617,1714,5.064,1715,6.228,1716,2.617,1717,4.104,1718,2.617,1719,2.617,1720,2.617,1721,2.617,1722,2.617,1723,2.617,1724,2.617,1725,2.617,1726,5.734,1727,2.617,1728,2.617,1729,2.617,1730,2.617,1731,5.064,1732,2.617,1733,2.617,1734,2.617,1735,4.104,1736,2.617,1737,2.617,1738,2.617,1739,2.617,1740,4.104,1741,4.104,1742,2.617,1743,5.734,1744,2.617,1745,4.104,1746,2.617,1747,2.617]],["title/entities/Order.html",[111,1.945,477,1.587]],["body/entities/Order.html",[0,0.132,3,0.084,4,0.076,5,0.076,7,0.147,8,0.01,9,0.005,10,0.005,13,2.796,15,0.335,16,1.269,21,1.473,28,0.883,29,0.757,30,0.97,34,2.818,42,1.469,46,2.906,47,3.125,48,2.27,58,1.877,64,0.421,91,2.906,109,1.129,110,2.705,111,2.632,124,1.928,131,3.284,138,2.967,142,2.738,146,1.257,165,2.213,166,2.444,170,2.446,203,2.51,227,3.854,283,3.25,297,4.859,299,2.976,301,3.12,303,3.707,304,4.575,308,3.707,310,3.284,314,2.51,409,3.539,459,1.779,477,1.806,478,1.714,488,3.125,491,3.539,493,3.12,500,2.628,504,2.705,506,2.976,509,2.976,525,3.906,530,3.539,531,3.996,532,1.779,539,2.112,541,1.599,593,1.547,1038,4.859,1124,4.409,1131,4.314,1133,2.705,1251,3.12,1748,2.705,1749,4.971,1750,5.437,1751,3.365,1752,4.971,1753,3.365,1754,3.365,1755,3.365,1756,3.365,1757,4.971,1758,4.971,1759,3.365,1760,3.365,1761,3.996,1762,3.996,1763,3.996,1764,3.365,1765,3.365,1766,2.51,1767,3.996,1768,3.996,1769,3.996,1770,3.996,1771,3.996,1772,3.365,1773,4.971,1774,3.365,1775,3.365,1776,3.365,1777,3.365,1778,3.365,1779,3.365,1780,3.365,1781,2.51]],["title/entities/OrderItem.html",[477,1.587,1131,2.886]],["body/entities/OrderItem.html",[0,0.146,3,0.093,4,0.084,5,0.084,7,0.093,8,0.009,9,0.006,10,0.006,15,0.372,16,1.369,21,1.564,28,0.872,29,1.283,30,1.01,42,2.235,44,3.085,58,1.955,64,0.346,109,1.254,111,3.666,126,2.548,142,2.755,146,2.003,166,3.372,176,2.468,273,3.294,325,3.003,477,1.949,478,1.903,488,4.213,495,4.147,497,4.681,500,2.836,506,3.211,509,2.237,513,3.372,530,3.757,532,1.975,541,1.775,714,2.613,776,3.757,777,3.939,778,4.389,1131,3.544,1162,5.534,1163,5.534,1164,5.534,1165,5.534,1251,4.305,1274,3.294,1277,3.294,1703,3.003,1750,2.786,1761,5.514,1762,5.514,1763,5.514,1782,7.352,1783,4.73,1784,3.736,1785,5.364,1786,3.752,1787,3.736,1788,3.736,1789,3.736,1790,3.736,1791,3.736,1792,5.364,1793,3.736,1794,3.736,1795,3.736,1796,3.736,1797,3.003,1798,3.736,1799,3.736,1800,3.736,1801,3.736,1802,3.736,1803,3.736,1804,3.736,1805,3.736,1806,3.736]],["title/classes/OrderItemDto.html",[0,0.171,1371,3.258]],["body/classes/OrderItemDto.html",[0,0.307,2,1.289,3,0.129,4,0.117,5,0.117,7,0.129,8,0.009,9,0.007,10,0.007,15,0.515,16,1.711,28,0.884,29,1.241,30,0.965,42,2.324,44,3.655,58,1.867,64,0.433,142,1.831,283,2.846,390,2.846,776,4.45,777,4.666,1034,4.912,1036,4.259,1037,2.379,1051,3.248,1345,3.42,1346,4.999,1350,4.999,1359,3.86,1367,6.548,1368,3.42,1369,5.499,1371,5.864,1373,5.911,1374,3.86,1375,5.977,1376,4.564,1807,5.176,1808,5.176,1809,5.176,1810,5.176,1811,5.176]],["title/classes/OrderItemResponseDto.html",[0,0.171,775,3.055]],["body/classes/OrderItemResponseDto.html",[0,0.285,2,1.241,3,0.124,4,0.112,5,0.112,7,0.181,8,0.009,9,0.007,10,0.007,13,1.762,15,0.496,16,1.669,19,2.026,20,2.449,21,2.057,25,2.449,26,2.15,28,0.891,29,1.354,30,1.013,34,2.15,37,3.292,42,2.576,44,3.809,45,2.634,46,2.449,47,2.634,48,1.913,76,2.538,77,2.538,86,2.218,283,2.739,513,3.588,765,4.573,766,6.277,767,3.716,775,5.104,776,4.369,777,4.581,778,5.104,779,3.292,1812,4.983,1813,4.983,1814,4.983,1815,4.983,1816,4.983,1817,4.983]],["title/classes/OrderResponseDto.html",[0,0.171,779,2.886]],["body/classes/OrderResponseDto.html",[0,0.286,2,1.244,3,0.124,4,0.113,5,0.113,7,0.181,8,0.009,9,0.007,10,0.007,13,2.585,15,0.497,16,1.672,19,2.031,20,2.456,21,2.059,25,2.456,26,2.156,28,0.875,29,1.354,30,1.014,34,2.826,42,2.525,44,3.22,45,2.641,46,3.592,47,3.863,48,2.806,76,2.545,77,2.545,86,2.224,283,4.017,513,2.456,765,5.111,766,6.281,767,3.725,775,5.111,776,2.99,777,3.135,778,3.493,779,4.327,1818,4.995,1819,4.995,1820,4.995,1821,4.995,1822,4.995,1823,4.995]],["title/modules/OrdersModule.html",[183,1.291,788,2.886]],["body/modules/OrdersModule.html",[0,0.179,3,0.114,4,0.103,5,0.103,7,0.114,8,0.009,9,0.006,10,0.006,13,2.184,51,1.871,64,0.566,65,0.811,91,3.036,92,2.665,108,1.534,111,2.036,170,2.072,183,2.067,185,1.915,186,1.973,187,2.102,188,2.102,189,1.973,190,3.214,191,3.214,196,2.839,197,1.806,198,2.036,202,2.418,209,3.198,213,3.036,513,3.036,533,3.676,786,4.824,788,5.801,789,5.324,955,2.62,1039,5.215,1066,5.475,1067,4.606,1128,3.41,1131,4.08,1132,4.032,1133,3.676,1824,4.032,1825,4.573,1826,4.032,1827,4.032,1828,5.324,1829,4.573,1830,5.215,1831,6.175,1832,4.573,1833,4.032,1834,4.573]],["title/classes/PaginationDto.html",[0,0.171,642,3.055]],["body/classes/PaginationDto.html",[0,0.305,2,1.426,3,0.142,4,0.129,5,0.129,7,0.142,8,0.009,9,0.007,10,0.007,15,0.57,16,1.824,23,1.521,28,0.889,30,0.877,42,2.531,58,1.697,64,0.461,142,2.528,224,5.811,642,4.998,736,6.87,1035,4.664,1037,2.631,1345,3.782,1374,4.269,1835,5.047,1836,5.724,1837,5.724,1838,5.724,1839,5.724,1840,7.146,1841,7.146,1842,5.724]],["title/injectables/PasswordResetService.html",[95,1.062,867,2.886]],["body/injectables/PasswordResetService.html",[0,0.205,3,0.09,4,0.082,5,0.082,7,0.09,8,0.009,9,0.005,10,0.005,15,0.36,21,1.536,23,1.26,28,0.716,29,1.276,30,0.829,55,1.371,56,2.211,61,1.612,64,0.52,65,0.642,71,0.924,88,2.435,89,1.458,95,1.275,96,1.472,99,1.958,101,3.547,104,1.811,107,1.72,108,1.215,109,1.215,114,2.507,116,1.902,118,2.607,170,2.51,197,1.43,270,1.78,281,1.914,289,2.831,290,2.834,292,2.883,385,4.957,387,4.286,397,2.335,401,2.532,424,2.532,435,3.193,459,1.914,588,3.465,594,1.845,612,2.273,706,2.075,843,4.216,855,4.216,859,4.957,862,4.295,867,3.465,898,2.532,899,2.911,952,2.392,953,3.193,954,2.911,955,2.075,961,4.421,994,2.701,1015,3.911,1037,1.664,1136,2.911,1280,2.701,1369,2.532,1374,2.701,1843,6.327,1844,3.193,1845,5.245,1846,5.245,1847,3.621,1848,3.621,1849,5.245,1850,5.245,1851,3.621,1852,5.245,1853,5.245,1854,3.621,1855,3.621,1856,3.621,1857,6.166,1858,3.621,1859,3.621,1860,3.621,1861,3.621,1862,3.621,1863,3.621,1864,3.621,1865,3.621,1866,3.193,1867,3.193,1868,3.621,1869,3.621,1870,3.621,1871,5.245,1872,5.245,1873,3.621,1874,3.621,1875,3.621,1876,3.193,1877,3.621]],["title/entities/PasswordResetToken.html",[477,1.587,952,2.886]],["body/entities/PasswordResetToken.html",[0,0.189,3,0.12,4,0.109,5,0.109,7,0.12,8,0.009,9,0.007,10,0.007,15,0.48,16,1.634,21,1.79,28,0.843,29,0.975,30,0.977,34,3.302,48,2.759,58,1.891,64,0.413,109,1.62,170,2.88,179,3.148,197,3.298,227,2.552,373,3.833,477,2.326,478,2.459,488,4.046,491,4.301,500,3.385,502,3.88,506,3.833,509,2.889,530,3.833,532,2.552,593,2.218,862,2.889,952,4.23,955,2.765,1781,3.6,1786,4.478,1866,6.336,1878,6.714,1879,5.646,1880,7.185,1881,4.826,1882,4.826,1883,4.826,1884,4.826,1885,6.403,1886,4.826,1887,4.826]],["title/entities/PaymentAccount.html",[477,1.587,1888,2.886]],["body/entities/PaymentAccount.html",[0,0.158,3,0.1,4,0.091,5,0.091,7,0.1,8,0.009,9,0.006,10,0.006,15,0.403,16,1.449,21,1.634,28,0.918,29,1.182,30,1.014,34,3.35,42,1.678,48,2.517,58,1.963,64,0.366,109,1.358,131,2.673,142,2.878,170,2.774,227,3.001,407,3.925,409,3.925,477,2.062,478,2.061,488,4.104,491,3.925,493,4.699,494,4.233,495,5.375,500,3.001,506,3.398,509,2.422,525,4.332,530,3.398,532,2.139,955,2.318,1038,4.461,1201,4.289,1380,5.782,1381,5.782,1382,5.272,1383,5.782,1781,3.017,1786,3.97,1888,3.75,1889,3.567,1890,6.268,1891,4.046,1892,4.046,1893,4.046,1894,6.557,1895,4.046,1896,5.676,1897,4.046,1898,4.046,1899,4.046,1900,4.046,1901,5.676,1902,4.046,1903,4.046]],["title/controllers/PaymentController.html",[49,1.229,1904,3.258]],["body/controllers/PaymentController.html",[0,0.216,3,0.137,4,0.125,5,0.125,7,0.137,8,0.009,9,0.007,10,0.007,15,0.551,23,1.031,28,0.586,29,1.169,30,0.679,49,1.557,51,1.677,53,2.464,55,1.829,56,2.106,58,1.314,61,1.447,62,1.519,64,0.495,65,0.982,69,2.388,70,1.636,71,1.412,89,1.193,104,1.483,116,1.557,236,4.127,237,2.819,238,2.544,247,2.926,397,2.464,557,4.396,565,3.473,571,3.17,1063,4.449,1107,4.815,1904,5.218,1905,6.169,1906,6.996,1907,5.534,1908,5.534,1909,5.534,1910,6.765,1911,4.88,1912,5.534,1913,5.534,1914,5.534,1915,5.534]],["title/modules/PaymentModule.html",[183,1.291,789,2.886]],["body/modules/PaymentModule.html",[0,0.208,3,0.132,4,0.12,5,0.12,7,0.132,8,0.009,9,0.007,10,0.007,51,2.069,64,0.543,65,0.945,108,1.788,183,2.228,185,2.231,186,2.299,187,2.449,188,2.449,189,2.299,190,3.464,191,3.464,196,3.139,197,2.104,198,2.372,202,2.817,213,3.357,680,4.283,683,3.973,789,5.778,1107,5.601,1888,3.52,1904,5.621,1911,4.698,1916,4.698,1917,4.698,1918,5.328,1919,4.698,1920,6.829,1921,5.328,1922,4.698,1923,5.328]],["title/injectables/PaymentService.html",[95,1.062,1107,2.742]],["body/injectables/PaymentService.html",[0,0.114,3,0.073,4,0.066,5,0.066,7,0.073,8,0.01,9,0.005,10,0.005,15,0.291,21,1.353,23,1.221,28,0.694,29,1.202,30,0.804,55,1.169,56,2.166,61,1.59,62,1.227,64,0.446,65,0.518,70,0.864,71,1.386,89,1.413,95,1.087,96,1.188,99,1.67,101,2.796,104,1.756,107,1.389,108,0.981,109,0.981,114,1.818,116,1.844,118,2.512,124,3.111,146,2.77,170,2.489,270,1.437,281,2.364,289,2.274,290,2.589,292,1.607,387,3.111,397,3.077,407,3.641,459,1.545,538,3.335,540,2.677,541,2.124,579,3.417,587,2.35,589,2.18,593,3.306,605,1.545,608,1.834,611,3.798,714,3.127,862,3.924,898,3.127,940,2.577,1095,2.954,1107,2.806,1135,3.335,1180,2.18,1200,2.577,1201,4.25,1202,2.577,1253,3.588,1254,3.595,1382,3.595,1506,2.18,1867,3.943,1888,4.019,1910,6.095,1922,2.577,1924,3.943,1925,4.471,1926,4.471,1927,4.471,1928,2.923,1929,2.923,1930,4.471,1931,4.471,1932,2.923,1933,4.471,1934,4.471,1935,2.923,1936,2.923,1937,4.471,1938,2.923,1939,4.471,1940,4.471,1941,4.471,1942,4.471,1943,2.923,1944,4.471,1945,5.43,1946,7.604,1947,2.923,1948,4.471,1949,4.471,1950,4.471,1951,4.471,1952,4.471,1953,4.471,1954,2.923,1955,2.923,1956,2.923,1957,2.923,1958,2.923,1959,2.577,1960,5.43,1961,2.923,1962,4.471,1963,4.471,1964,6.082,1965,4.471,1966,2.923,1967,2.923,1968,6.912,1969,4.471,1970,4.471,1971,4.471,1972,2.923,1973,2.923,1974,2.923]],["title/entities/Photo.html",[477,1.587,513,2.148]],["body/entities/Photo.html",[0,0.183,3,0.116,4,0.106,5,0.106,7,0.116,8,0.009,9,0.006,10,0.006,13,3.019,15,0.467,16,1.603,21,1.765,28,0.878,29,1.313,30,1.017,42,1.857,58,1.969,64,0.405,86,3.153,109,1.574,148,2.808,150,2.687,173,2.808,174,4.68,209,3.28,477,2.283,478,2.389,488,4.512,500,3.321,506,3.761,509,2.808,513,3.088,518,5.54,530,3.761,532,2.48,541,2.228,595,4.136,605,2.48,620,5.051,625,5.283,713,3.498,714,3.28,926,2.944,1454,5.695,1512,5.695,1786,4.394,1975,4.136,1976,4.691,1977,4.691,1978,4.691,1979,4.691,1980,4.691,1981,4.691,1982,4.691,1983,4.691,1984,4.691,1985,4.691,1986,4.691]],["title/controllers/PhotoController.html",[49,1.229,1987,3.258]],["body/controllers/PhotoController.html",[0,0.131,3,0.083,4,0.076,5,0.133,7,0.083,8,0.009,9,0.005,10,0.005,15,0.333,21,1.468,23,1.295,28,0.736,29,1.256,30,0.853,49,0.942,51,1.015,53,1.491,55,1.295,56,2.325,58,1.65,61,1.817,62,2.067,64,0.42,65,0.594,69,1.445,70,0.99,71,1.774,89,1.499,104,1.862,116,2.047,134,2.212,146,1.25,156,2.692,235,2.004,237,1.706,238,1.539,247,3.675,313,2.953,352,1.77,390,4.415,397,3.514,513,1.646,557,4.536,565,2.101,571,3.731,593,1.539,639,2.692,643,2.692,653,2.342,671,2.497,673,2.692,692,3.699,837,2.101,866,2.342,883,2.497,1015,2.497,1416,4.738,1419,5.427,1422,4.367,1423,5.197,1424,2.953,1425,2.692,1429,2.953,1469,5.236,1471,2.692,1483,2.692,1987,3.694,1988,2.953,1989,4.953,1990,4.953,1991,4.953,1992,5.197,1993,5.894,1994,3.348,1995,3.348,1996,3.348,1997,3.348,1998,3.348,1999,3.348,2000,3.348,2001,2.953,2002,3.348,2003,3.348,2004,3.348,2005,3.348,2006,3.348,2007,3.348,2008,4.953,2009,3.348,2010,2.953,2011,3.348,2012,3.348,2013,3.348,2014,4.953,2015,4.953,2016,3.348,2017,4.953,2018,3.348,2019,3.348,2020,3.348,2021,2.692,2022,3.348,2023,5.197,2024,2.953,2025,3.348,2026,3.348,2027,3.348,2028,3.348,2029,3.348,2030,3.348,2031,3.348,2032,3.348,2033,3.348,2034,3.348]],["title/modules/PhotoModule.html",[183,1.291,684,2.886]],["body/modules/PhotoModule.html",[0,0.197,3,0.125,4,0.114,5,0.114,7,0.125,8,0.009,9,0.007,10,0.007,51,1.994,64,0.552,65,0.893,108,1.689,183,2.168,185,2.107,186,2.172,187,2.313,188,2.313,189,2.172,190,3.371,191,3.371,196,3.025,197,1.988,198,2.24,202,2.661,211,4.131,212,4.438,213,3.236,513,2.474,585,4.603,680,4.218,683,3.753,684,5.812,692,5.556,784,5.471,1987,5.47,2010,4.438,2035,4.438,2036,4.438,2037,4.438,2038,5.033,2039,5.033,2040,5.033,2041,4.438,2042,5.033,2043,5.033]],["title/injectables/PhotoService.html",[95,1.062,692,2.742]],["body/injectables/PhotoService.html",[0,0.064,3,0.041,4,0.037,5,0.063,7,0.041,8,0.01,9,0.003,10,0.003,13,2.458,15,0.163,21,1.317,23,0.985,28,0.56,29,1.23,30,0.649,42,1.082,47,1.481,55,0.732,56,1.978,61,1.27,62,1.333,64,0.4,65,0.291,70,1.279,71,1.349,75,0.941,86,2.162,89,1.14,92,3.11,95,0.681,96,0.667,99,1.046,101,1.989,104,1.416,107,0.78,108,0.551,109,0.551,114,1.759,116,2.23,118,2.88,126,2.307,132,0.941,143,0.941,145,1.448,146,2.537,152,1.936,156,1.32,165,3.025,172,1.539,173,3.379,174,3.208,176,3.208,229,1.225,261,1.757,270,0.807,281,1.481,282,1.958,289,3.017,290,2.846,292,3.103,390,3.269,397,3.415,410,2.859,455,3.478,468,3.229,513,2.127,538,2.088,539,1.757,541,0.78,548,1.85,564,1.085,579,2.682,585,1.148,586,1.32,589,1.225,591,1.32,593,1.287,605,3.281,606,2.251,608,2.298,612,1.03,625,3.621,656,3.732,668,1.225,692,1.757,706,3.029,708,1.085,709,1.225,712,3.815,713,5.375,714,1.148,716,3.229,718,2.251,720,1.148,721,2.251,729,2.561,731,2.088,756,3.478,757,3.478,758,3.478,762,1.32,764,1.225,883,2.088,923,1.448,926,2.715,937,2.859,1080,1.85,1105,2.469,1137,1.448,1153,1.448,1159,2.469,1170,2.469,1180,1.225,1183,1.32,1188,1.85,1248,1.148,1265,2.251,1375,2.251,1416,2.944,1419,3.943,1426,3.894,1435,2.469,1436,2.251,1437,2.469,1438,2.469,1439,2.469,1440,3.229,1441,2.469,1454,3.478,1469,2.251,1472,1.448,1474,2.469,1475,1.448,1478,4.282,1481,4.662,1483,2.251,1495,2.469,1506,2.088,1508,3.478,1512,4.25,1515,1.448,1634,1.32,1655,1.448,1682,1.448,1683,1.448,1876,1.448,1959,2.469,1992,3.229,2001,1.448,2023,4.282,2024,1.448,2041,1.448,2044,1.448,2045,2.8,2046,2.8,2047,2.8,2048,1.642,2049,1.642,2050,2.8,2051,1.642,2052,2.8,2053,1.642,2054,2.8,2055,1.642,2056,2.8,2057,1.642,2058,1.642,2059,1.642,2060,1.642,2061,3.661,2062,5.287,2063,2.8,2064,3.661,2065,2.8,2066,1.642,2067,2.8,2068,1.642,2069,1.642,2070,3.661,2071,5.287,2072,2.8,2073,2.8,2074,1.642,2075,1.642,2076,2.8,2077,1.642,2078,1.642,2079,1.642,2080,1.642,2081,1.642,2082,1.642,2083,1.642,2084,2.8,2085,1.642,2086,1.642,2087,1.642,2088,4.326,2089,1.642,2090,1.642,2091,1.642,2092,3.661,2093,1.642,2094,1.642,2095,1.642,2096,1.642,2097,1.642,2098,2.8,2099,1.642,2100,1.642,2101,1.642,2102,1.642,2103,1.642,2104,2.8,2105,1.642,2106,3.661,2107,2.8,2108,2.8,2109,1.642,2110,1.642,2111,1.642,2112,1.642,2113,1.642,2114,1.642,2115,1.642,2116,1.642,2117,1.642,2118,1.642,2119,1.642,2120,1.642,2121,1.642,2122,1.448,2123,2.8,2124,1.642,2125,1.642,2126,1.642,2127,1.642,2128,1.642,2129,1.642,2130,1.642,2131,1.642,2132,1.642,2133,1.642,2134,1.642,2135,1.642,2136,1.642,2137,2.8,2138,1.642,2139,1.642,2140,1.642,2141,1.642,2142,1.642,2143,1.642,2144,1.642,2145,1.642,2146,1.642]],["title/controllers/PhotographerOrdersController.html",[49,1.229,1830,3.258]],["body/controllers/PhotographerOrdersController.html",[0,0.167,3,0.106,4,0.097,5,0.097,7,0.106,8,0.009,9,0.006,10,0.006,15,0.426,21,2.055,22,3.007,23,1.259,28,0.715,29,1.203,30,0.829,46,2.902,49,1.204,51,1.297,53,1.905,55,1.543,56,2.298,58,1.604,61,1.767,62,2.298,64,0.47,65,0.759,69,1.847,70,1.265,71,1.724,89,1.457,92,1.847,104,1.81,116,1.901,218,4.128,221,4.812,235,2.562,237,2.18,238,1.967,247,3.572,255,3.44,310,2.827,557,4.361,563,4.201,565,2.686,571,3.871,654,3.191,671,4.402,1041,3.44,1059,3.773,1065,2.993,1067,3.191,1828,3.9,1830,4.402,2147,5.855,2148,4.279,2149,5.205,2150,5.958,2151,4.279,2152,4.279,2153,3.773,2154,4.279,2155,4.279,2156,4.279,2157,5.432,2158,4.279,2159,4.279,2160,4.279,2161,4.279,2162,4.279,2163,4.279,2164,3.773,2165,4.279,2166,4.279,2167,4.279,2168,4.279,2169,4.279,2170,4.279]],["title/injectables/PhotographerOrdersService.html",[95,1.062,1828,2.886]],["body/injectables/PhotographerOrdersService.html",[0,0.126,3,0.08,4,0.073,5,0.073,7,0.08,8,0.01,9,0.005,10,0.005,13,2.263,15,0.321,21,1.594,22,2.456,23,1.192,28,0.678,29,1.307,30,0.785,48,1.24,55,1.261,56,2.146,61,1.509,62,1.584,64,0.442,65,0.573,70,1.425,71,1.472,89,1.38,90,1.645,91,2.37,92,2.761,95,1.173,96,1.313,99,1.8,101,3.42,104,1.714,107,1.534,108,1.084,109,1.084,111,3.405,114,1.96,115,2.408,116,1.8,118,2.488,124,1.85,125,4.035,126,1.534,135,2.596,148,1.933,150,1.85,153,4.745,170,1.084,218,3.372,221,5.054,270,1.588,281,3.05,282,3.372,283,2.651,284,2.848,285,2.259,289,3.116,290,2.939,301,2.027,304,4.67,401,2.259,539,3.621,541,1.534,593,1.484,594,1.645,719,2.596,743,2.596,926,2.027,937,2.134,955,1.85,1056,4.579,1074,2.408,1080,2.134,1095,3.186,1097,2.596,1106,4.251,1110,5.087,1127,3.876,1128,2.408,1174,2.848,1176,2.848,1178,4.251,1182,3.876,1183,3.876,1184,4.251,1185,3.876,1188,2.134,1280,2.408,1290,2.408,1506,4.303,1828,3.186,2147,5.504,2150,5.087,2171,4.821,2172,3.229,2173,3.229,2174,4.821,2175,3.229,2176,4.821,2177,3.229,2178,3.229,2179,3.229,2180,3.229,2181,3.229,2182,3.229,2183,3.229,2184,4.821,2185,3.229,2186,4.821,2187,2.848,2188,4.821,2189,3.229,2190,3.229]],["title/classes/PriceOptionDto.html",[0,0.171,1337,3.258]],["body/classes/PriceOptionDto.html",[0,0.297,2,1.18,3,0.118,4,0.107,5,0.107,7,0.157,8,0.009,9,0.006,10,0.006,15,0.471,16,1.613,17,3.128,18,3.128,19,1.925,20,2.328,25,2.328,26,2.043,28,0.88,29,1.266,30,0.776,42,2.457,44,3.499,45,3.763,58,1.501,64,0.408,76,2.412,77,2.412,141,3.312,142,1.675,179,2.328,484,3.128,570,3.531,635,2.972,1022,4.177,1033,3.128,1034,5.018,1035,4.26,1036,4.664,1037,2.176,1038,2.972,1323,5.308,1324,3.312,1335,4.175,1337,5.664,1345,3.128,1346,4.715,1347,5.575,1348,5.575,1349,7.002,1350,4.715,1351,5.722,1352,3.807,1353,3.807,1354,3.807,1355,3.807,1356,3.807,1357,3.807,1358,4.175,1359,3.531,2191,4.735,2192,4.735,2193,4.735]],["title/guards/RolesGuard.html",[244,3.055,904,3.512]],["body/guards/RolesGuard.html",[0,0.203,3,0.129,4,0.117,5,0.117,7,0.129,8,0.009,9,0.007,10,0.007,15,0.516,23,1.251,28,0.711,30,0.824,55,1.756,61,1.357,64,0.48,65,0.92,69,2.24,71,1.714,89,1.448,95,1.633,99,1.938,104,1.799,116,2.094,142,2.375,170,2.253,179,3.301,244,4.696,289,2.173,290,2.05,541,2.465,564,3.429,905,4.172,907,6.94,911,5.921,912,6.94,914,4.576,917,4.576,918,4.576,942,4.576,1127,4.172,1182,4.172,1185,4.172,2194,4.576,2195,5.189,2196,8.35,2197,5.189,2198,5.189,2199,4.576,2200,5.398,2201,5.189,2202,6.714,2203,5.189,2204,5.189,2205,5.189,2206,5.189,2207,5.189,2208,5.189,2209,5.189]],["title/classes/Seed.html",[0,0.171,2210,3.055]],["body/classes/Seed.html",[0,0.27,2,1.721,3,0.172,4,0.156,5,0.156,7,0.172,8,0.009,9,0.008,10,0.008,2210,5.597,2211,6.093]],["title/controllers/SeedController.html",[49,1.229,2212,3.258]],["body/controllers/SeedController.html",[0,0.222,3,0.141,4,0.128,5,0.128,7,0.141,8,0.009,9,0.007,10,0.007,15,0.565,30,0.872,49,1.597,51,1.72,53,2.526,55,1.859,56,2.346,58,1.687,61,1.859,62,1.951,64,0.459,65,1.007,69,2.449,70,1.677,71,1.814,352,3,2210,3.969,2212,5.301,2213,5.004,2214,8.135,2215,7.173,2216,7.108,2217,5.675,2218,7.108,2219,5.675,2220,5.128,2221,5.004,2222,5.675,2223,5.675,2224,5.675]],["title/modules/SeedModule.html",[183,1.291,790,3.055]],["body/modules/SeedModule.html",[0,0.216,3,0.137,4,0.125,5,0.125,7,0.137,8,0.009,9,0.007,10,0.007,51,2.116,64,0.548,65,0.979,108,1.852,183,2.265,185,2.311,186,2.382,187,2.537,188,2.537,189,2.382,190,3.522,191,2.537,196,3.21,197,2.18,198,2.457,202,2.918,213,3.433,680,4.323,790,6.099,800,4.116,2212,5.714,2220,5.607,2221,4.866,2225,4.866,2226,5.519,2227,4.866,2228,5.519,2229,5.519,2230,3.162,2231,4.866,2232,5.519]],["title/injectables/SeedService.html",[95,1.062,2220,2.886]],["body/injectables/SeedService.html",[0,0.119,3,0.075,4,0.068,5,0.068,7,0.075,8,0.01,9,0.005,10,0.005,15,0.302,19,2.52,23,0.565,28,0.321,30,0.682,45,3.278,55,1.203,56,1.925,61,1.203,62,1.263,64,0.47,65,0.538,70,1.359,71,1.174,88,3.145,89,1.821,90,4.057,95,1.119,96,1.233,99,1.718,101,2.85,104,0.813,107,1.441,108,1.018,109,1.018,114,1.87,116,2.112,118,2.421,146,2.619,152,3.278,165,2.76,166,3.048,399,1.816,406,4.378,407,1.816,539,4.182,546,2.675,579,3.332,588,3.039,594,2.83,601,2.262,729,3.217,730,4.056,818,4.624,959,2.439,973,2.262,980,4.056,982,2.675,991,3.885,992,2.439,1028,2.262,1075,5.357,1251,2.887,1471,3.698,1548,5.467,1619,4.143,2021,3.698,2210,3.217,2215,5.467,2220,3.039,2230,1.738,2231,2.675,2233,2.675,2234,6.2,2235,4.899,2236,3.034,2237,3.034,2238,3.034,2239,3.034,2240,2.675,2241,4.6,2242,3.034,2243,3.034,2244,6.664,2245,7.836,2246,3.034,2247,3.034,2248,3.034,2249,4.6,2250,3.034,2251,3.034,2252,3.034,2253,6.664,2254,3.034,2255,3.034,2256,3.034,2257,3.034,2258,3.034,2259,3.034,2260,3.034,2261,3.034,2262,4.6,2263,4.6,2264,3.034,2265,3.034,2266,4.6,2267,4.6,2268,2.262,2269,3.43,2270,3.034,2271,5.876,2272,5.467,2273,3.034,2274,2.675,2275,5.556,2276,4.6,2277,2.675,2278,4.056,2279,2.675,2280,3.034,2281,2.675,2282,3.034,2283,3.034,2284,3.034,2285,3.034,2286,3.034,2287,2.675,2288,2.675,2289,2.675]],["title/entities/Subscription.html",[477,1.587,1402,2.615]],["body/entities/Subscription.html",[0,0.169,3,0.107,4,0.098,5,0.098,7,0.107,8,0.009,9,0.006,10,0.006,15,0.43,16,1.518,21,1.693,23,1.108,28,0.899,29,0.906,30,1.014,34,3.569,48,2.609,58,1.963,64,0.438,109,1.451,128,4.264,142,2.803,170,2.816,179,2.923,227,2.287,409,4.068,477,2.161,478,2.203,488,3.868,491,4.068,493,3.732,494,5.457,495,3.929,500,3.144,502,3.478,506,3.56,509,3.56,525,4.489,530,4.068,532,2.287,621,3.929,955,2.478,1402,3.56,1750,4.435,1786,4.159,2230,4.192,2269,5.067,2290,3.814,2291,5.462,2292,5.991,2293,4.326,2294,4.326,2295,4.326,2296,4.326,2297,4.326,2298,4.326,2299,4.326,2300,5.946,2301,4.326,2302,3.814]],["title/controllers/SubscriptionController.html",[49,1.229,2303,3.258]],["body/controllers/SubscriptionController.html",[0,0.138,3,0.088,4,0.08,5,0.08,7,0.088,8,0.009,9,0.005,10,0.005,15,0.351,23,1.382,28,0.785,29,1.13,30,0.939,49,0.993,51,1.07,53,1.572,55,1.347,56,2.415,58,1.818,61,2.002,62,2.397,64,0.431,65,0.626,69,1.524,70,1.044,71,1.954,89,1.599,104,1.987,116,0.993,235,2.114,237,1.799,238,1.623,247,3.921,352,1.867,397,1.572,404,2.839,557,4.448,563,3.905,565,2.216,571,3.483,654,2.634,658,2.023,671,2.634,960,3.639,1044,4.14,1056,4,1065,2.47,1099,4.541,1401,4.983,1402,2.114,1403,5.371,2149,4.541,2153,3.114,2164,3.114,2303,3.841,2304,3.114,2305,4.541,2306,5.15,2307,4.541,2308,5.892,2309,3.531,2310,3.531,2311,3.531,2312,3.531,2313,3.531,2314,5.15,2315,3.531,2316,3.531,2317,3.531,2318,3.531,2319,3.531,2320,3.531,2321,3.531,2322,3.531,2323,3.114,2324,3.531,2325,3.531,2326,3.531,2327,5.15,2328,3.531,2329,3.114,2330,3.531,2331,3.531,2332,3.531,2333,3.531,2334,3.114,2335,3.531,2336,3.531,2337,3.531,2338,3.531,2339,3.531,2340,3.531,2341,3.531,2342,3.114,2343,3.531,2344,3.531,2345,3.531,2346,3.531,2347,3.531,2348,3.531,2349,3.531,2350,3.531,2351,3.531]],["title/modules/SubscriptionModule.html",[183,1.291,791,2.742]],["body/modules/SubscriptionModule.html",[0,0.194,3,0.123,4,0.112,5,0.112,7,0.123,8,0.009,9,0.007,10,0.007,51,1.975,64,0.557,65,0.879,108,1.664,183,2.152,185,2.076,186,2.14,187,2.279,188,2.279,189,2.14,190,3.347,191,3.347,196,2.996,197,1.958,198,2.207,202,2.621,213,3.204,680,4.201,683,3.698,786,4.937,791,5.508,960,5.288,1402,3.902,1797,3.986,1833,4.372,2230,3.734,2303,5.43,2329,4.372,2352,4.372,2353,4.372,2354,4.958,2355,4.372,2356,4.958,2357,4.958,2358,4.372,2359,4.372,2360,4.558,2361,4.372,2362,4.958]],["title/entities/SubscriptionOrder.html",[477,1.587,2360,3.055]],["body/entities/SubscriptionOrder.html",[0,0.162,3,0.103,4,0.093,5,0.093,7,0.143,8,0.009,9,0.006,10,0.006,15,0.412,16,1.472,21,1.653,28,0.88,29,0.878,30,0.984,34,3.098,42,1.704,46,3.263,48,2.548,58,1.904,64,0.428,109,1.388,131,2.734,142,2.539,166,2.835,170,2.691,227,3.049,297,4.505,299,3.452,301,3.619,303,4.3,409,3.973,477,2.095,478,2.108,488,3.049,491,3.973,493,2.597,500,3.049,509,3.452,525,4.385,530,3.973,532,2.188,955,2.371,1038,4.505,1251,3.619,1750,5.354,1761,4.636,1762,4.636,1763,4.636,1766,3.086,1767,4.636,1768,4.636,1769,4.636,1770,4.636,1771,4.636,2230,4.113,2269,4.95,2302,3.649,2360,4.033,2363,6.577,2364,5.852,2365,4.138,2366,4.138,2367,4.138,2368,4.138,2369,4.95,2370,4.138,2371,4.138,2372,4.138]],["title/entities/SubscriptionPlan.html",[477,1.587,2230,2.503]],["body/entities/SubscriptionPlan.html",[0,0.186,3,0.118,4,0.108,5,0.108,7,0.118,8,0.009,9,0.007,10,0.007,15,0.475,16,1.621,19,2.903,21,1.779,23,1.184,28,0.896,29,1.243,30,1.001,42,2.411,45,3.776,58,1.937,64,0.308,89,1.54,109,1.6,142,2.247,152,2.521,165,3.531,166,2.344,227,3.358,459,2.521,477,2.308,478,2.429,488,4.472,493,3.987,495,3.151,497,3.557,500,3.358,532,2.521,541,2.266,818,3.557,1619,3.557,2021,3.834,2230,3.639,2268,5.327,2271,6.298,2272,6.298,2274,4.205,2277,4.205,2278,4.205,2279,4.205,2373,4.205,2374,4.769,2375,7.616,2376,4.769,2377,4.769,2378,4.769,2379,4.769,2380,4.769]],["title/injectables/SubscriptionService.html",[95,1.062,960,2.615]],["body/injectables/SubscriptionService.html",[0,0.068,3,0.043,4,0.039,5,0.039,7,0.043,8,0.01,9,0.003,10,0.003,15,0.173,21,1.637,23,1.184,26,0.75,28,0.696,29,1.261,30,0.806,34,1.648,46,1.445,48,0.668,55,0.769,56,2.24,61,1.661,62,1.675,64,0.41,65,0.308,71,1.622,88,0.687,89,1.458,95,0.715,96,0.707,99,1.098,101,3.021,102,3.071,104,1.702,107,0.826,108,0.584,109,0.584,111,2.829,114,2.48,116,2.091,118,2.736,124,1.684,126,1.397,128,2.397,132,0.996,134,1.149,142,1.351,143,0.996,146,1.677,150,1.684,152,1.555,153,2.524,170,2.458,172,0.956,270,1.445,281,1.555,283,0.956,285,2.056,288,2.593,289,2.752,290,2.847,292,2.761,297,1.845,299,1.041,314,1.297,373,1.041,387,1.684,397,3.084,424,2.671,434,1.533,442,2.364,459,0.919,465,1.533,540,1.76,541,0.826,548,1.149,553,1.398,579,2.757,593,1.351,594,1.498,598,1.297,605,1.555,608,2.397,612,1.091,618,1.398,621,1.149,706,0.996,720,4.059,724,1.533,733,2.287,776,1.041,818,1.297,862,1.041,919,1.297,925,1.398,931,1.398,937,1.149,960,1.76,961,3.325,973,1.297,991,4.267,992,1.398,994,1.297,1013,1.533,1056,3.475,1073,2.364,1074,1.297,1080,1.149,1086,2.593,1094,3.611,1095,3.318,1123,4.806,1135,2.193,1136,1.398,1179,1.533,1180,1.297,1187,1.533,1188,1.149,1201,0.996,1208,1.533,1210,1.533,1211,1.533,1226,1.398,1231,2.593,1232,1.533,1234,1.533,1236,1.533,1244,1.533,1245,1.533,1246,1.398,1248,2.056,1249,1.533,1251,1.091,1253,1.943,1254,1.398,1255,1.533,1256,1.297,1257,1.398,1258,1.533,1259,1.533,1260,1.533,1261,1.533,1262,1.533,1263,1.533,1264,1.533,1268,1.533,1279,1.533,1280,2.193,1281,1.533,1283,1.533,1290,1.297,1297,2.593,1402,3.934,1403,4.905,1634,1.398,1693,1.533,1703,1.398,1708,1.533,1797,1.398,2122,2.593,2187,2.593,2230,2.573,2235,3.368,2240,1.533,2268,4.329,2269,5.464,2281,3.368,2287,1.533,2288,2.593,2289,1.533,2291,2.364,2292,2.593,2305,2.593,2307,2.593,2308,3.961,2342,2.593,2358,1.533,2359,1.533,2360,1.216,2361,1.533,2364,1.533,2369,3.35,2381,1.533,2382,2.94,2383,2.94,2384,2.94,2385,2.94,2386,2.94,2387,3.82,2388,1.739,2389,1.739,2390,2.94,2391,2.94,2392,1.739,2393,2.94,2394,1.739,2395,2.94,2396,1.739,2397,3.82,2398,2.94,2399,1.739,2400,2.94,2401,1.739,2402,2.94,2403,1.739,2404,1.739,2405,2.94,2406,1.739,2407,1.739,2408,1.739,2409,1.739,2410,1.739,2411,3.82,2412,3.82,2413,1.739,2414,2.94,2415,1.739,2416,3.368,2417,2.94,2418,1.739,2419,1.739,2420,1.739,2421,1.739,2422,1.739,2423,2.94,2424,1.739,2425,2.94,2426,1.739,2427,1.739,2428,1.739,2429,1.739,2430,1.739,2431,1.739,2432,1.739,2433,1.739,2434,1.739,2435,1.739,2436,1.739,2437,1.739,2438,1.739,2439,1.739,2440,1.739,2441,1.739,2442,2.94,2443,1.739,2444,2.94,2445,1.739,2446,2.94,2447,1.739,2448,1.739,2449,1.739,2450,1.533,2451,1.739,2452,1.739,2453,1.739,2454,1.739,2455,1.739]],["title/classes/UpdateAdminDto.html",[0,0.171,2456,3.512]],["body/classes/UpdateAdminDto.html",[0,0.255,2,1.626,3,0.162,4,0.147,5,0.147,7,0.162,8,0.009,9,0.008,10,0.008,64,0.499,630,3.101,1320,4.868,1322,5.247,2456,6.223,2457,5.755,2458,4.255,2459,7.74,2460,3.588,2461,3.451,2462,3.451,2463,6.527]],["title/classes/UpdateAlbumDto.html",[0,0.171,650,3.055]],["body/classes/UpdateAlbumDto.html",[0,0.255,2,1.626,3,0.162,4,0.147,5,0.147,7,0.162,8,0.009,9,0.008,10,0.008,64,0.499,630,3.101,635,4.096,650,5.413,659,5.247,1324,4.565,2458,4.255,2460,3.588,2461,3.451,2462,3.451,2464,5.755,2465,7.74]],["title/classes/UpdateDeliveryStatusDto.html",[0,0.171,2157,3.258]],["body/classes/UpdateDeliveryStatusDto.html",[0,0.292,2,1.531,3,0.153,4,0.139,5,0.139,7,0.153,8,0.009,9,0.008,10,0.008,15,0.612,16,1.905,28,0.651,30,0.754,58,1.459,64,0.482,304,5.469,308,5.568,310,5.526,1033,4.061,1037,2.825,1128,4.584,1368,4.061,1404,5.419,2157,5.568,2466,6.583,2467,7.466]],["title/classes/UpdateLeadDto.html",[0,0.171,2468,3.512]],["body/classes/UpdateLeadDto.html",[0,0.255,2,1.626,3,0.162,4,0.147,5,0.147,7,0.162,8,0.009,9,0.008,10,0.008,64,0.499,630,3.101,1360,4.312,1362,5.247,1530,5.247,2458,4.255,2460,3.588,2461,3.451,2462,3.451,2468,6.223,2469,5.755,2470,7.74]],["title/classes/UpdateMercadopagoDto.html",[0,0.171,2471,3.512]],["body/classes/UpdateMercadopagoDto.html",[0,0.255,2,1.626,3,0.162,4,0.147,5,0.147,7,0.162,8,0.009,9,0.008,10,0.008,64,0.499,630,3.101,1364,4.868,1366,5.247,2458,4.255,2460,3.588,2461,3.451,2462,3.451,2471,6.223,2472,5.755,2473,7.74,2474,6.527]],["title/classes/UpdateOrderDto.html",[0,0.171,2475,3.512]],["body/classes/UpdateOrderDto.html",[0,0.255,2,1.626,3,0.162,4,0.147,5,0.147,7,0.162,8,0.009,9,0.008,10,0.008,64,0.499,630,3.101,1051,4.096,1065,4.565,1368,4.312,2458,4.255,2460,3.588,2461,3.451,2462,3.451,2475,6.223,2476,5.755,2477,7.74]],["title/classes/UpdatePaymentDto.html",[0,0.171,2478,3.512]],["body/classes/UpdatePaymentDto.html",[0,0.255,2,1.626,3,0.162,4,0.147,5,0.147,7,0.162,8,0.009,9,0.008,10,0.008,64,0.499,630,3.101,1377,4.868,1379,5.247,2458,4.255,2460,3.588,2461,3.451,2462,3.451,2478,6.223,2479,5.755,2480,7.74,2481,6.527]],["title/classes/UpdatePhotoDto.html",[0,0.171,2482,3.512]],["body/classes/UpdatePhotoDto.html",[0,0.255,2,1.626,3,0.162,4,0.147,5,0.147,7,0.162,8,0.009,9,0.008,10,0.008,64,0.499,630,3.101,1390,4.868,1392,5.247,2458,4.255,2460,3.588,2461,3.451,2462,3.451,2482,6.223,2483,5.755,2484,7.74,2485,6.527]],["title/classes/UpdateSeedDto.html",[0,0.171,2486,3.512]],["body/classes/UpdateSeedDto.html",[0,0.255,2,1.626,3,0.162,4,0.147,5,0.147,7,0.162,8,0.009,9,0.008,10,0.008,64,0.499,630,3.101,1395,4.868,1397,5.247,2458,4.255,2460,3.588,2461,3.451,2462,3.451,2486,6.223,2487,5.755,2488,7.74,2489,6.527]],["title/classes/UpdateSubscriptionDto.html",[0,0.171,2490,3.512]],["body/classes/UpdateSubscriptionDto.html",[0,0.255,2,1.626,3,0.162,4,0.147,5,0.147,7,0.162,8,0.009,9,0.008,10,0.008,64,0.499,630,3.101,1398,4.868,1400,5.247,2458,4.255,2460,3.588,2461,3.451,2462,3.451,2490,6.223,2491,5.755,2492,7.74,2493,6.527]],["title/classes/UpdateUserDto.html",[0,0.171,2494,3.055]],["body/classes/UpdateUserDto.html",[0,0.255,2,1.626,3,0.162,4,0.147,5,0.147,7,0.162,8,0.009,9,0.008,10,0.008,64,0.499,74,4.096,399,3.907,1020,4.868,1276,5.755,2458,4.255,2460,3.588,2461,3.451,2462,3.451,2494,5.413,2495,5.755,2496,7.74]],["title/entities/User.html",[170,1.466,477,1.587]],["body/entities/User.html",[0,0.107,3,0.068,4,0.062,5,0.062,7,0.068,8,0.01,9,0.004,10,0.004,13,2.747,15,0.273,16,1.086,21,1.3,22,2.658,23,0.793,28,0.923,29,1.201,30,1.032,34,2.908,42,1.258,48,2.003,58,1.998,64,0.435,88,2.061,89,1.125,90,2.658,91,2.565,92,2.252,93,3.649,94,3.649,109,0.92,110,2.205,111,3,112,2.045,122,3.275,128,3.275,131,2.813,142,2.914,165,1.895,170,1.428,178,2.989,179,2.891,197,1.083,227,3.562,282,2.977,403,4.195,404,4.195,406,2.868,407,3.124,408,4.195,409,3.124,410,3.447,477,1.547,478,1.397,485,2.418,488,4.106,491,3.124,493,4.561,494,3.175,495,4.931,497,2.045,500,2.251,504,5.119,506,2.548,523,2.205,525,3.447,529,3.754,531,5.417,532,1.45,535,2.205,601,4.748,952,3.886,954,2.205,966,4.195,987,4.195,1038,4.561,1402,4.034,1781,2.045,1878,2.205,1888,3.886,1890,5.941,2497,2.418,2498,5.218,2499,4.257,2500,2.742,2501,2.742,2502,2.742,2503,2.742,2504,2.742,2505,2.742,2506,2.742,2507,2.742,2508,4.257,2509,2.742,2510,2.742,2511,2.742,2512,4.257,2513,4.257,2514,2.742,2515,2.742,2516,2.742,2517,4.257,2518,4.257,2519,2.742,2520,2.742,2521,4.257,2522,2.742,2523,4.257,2524,2.742,2525,2.742,2526,2.742,2527,2.742]],["title/controllers/UserController.html",[49,1.229,2528,3.258]],["body/controllers/UserController.html",[0,0.194,3,0.123,4,0.112,5,0.112,7,0.123,8,0.009,9,0.007,10,0.007,15,0.495,23,1.217,28,0.691,30,0.801,49,1.398,51,1.506,53,2.213,55,1.707,56,2.265,58,1.55,61,1.707,62,2.265,64,0.5,65,0.882,69,2.145,70,1.469,71,1.666,89,1.408,104,1.749,116,1.836,237,2.532,238,2.285,239,3.476,247,3.451,358,3.996,397,2.906,399,2.975,557,4.251,563,3.589,571,3.74,579,3.463,608,3.119,654,3.707,660,3.707,696,4.634,1508,3.996,2323,4.383,2334,4.383,2494,5.414,2528,4.869,2529,4.383,2530,6.528,2531,6.528,2532,4.97,2533,4.97,2534,4.97,2535,4.97,2536,4.97,2537,4.383,2538,4.97,2539,4.97,2540,4.97,2541,4.97]],["title/modules/UserModule.html",[183,1.291,680,2.225]],["body/modules/UserModule.html",[0,0.218,3,0.139,4,0.126,5,0.126,7,0.139,8,0.009,9,0.007,10,0.007,51,2.131,64,0.538,65,0.99,108,1.872,170,1.872,183,2.276,185,2.336,186,2.408,187,2.565,188,2.565,189,2.408,190,3.54,191,3.54,196,3.233,197,2.204,198,2.484,202,2.95,213,2.743,214,4.921,579,4.267,680,4.401,2528,5.744,2537,4.921,2542,4.921,2543,4.921,2544,4.921,2545,5.58,2546,4.921,2547,5.58]],["title/injectables/UserService.html",[95,1.062,579,2.075]],["body/injectables/UserService.html",[0,0.126,3,0.08,4,0.073,5,0.073,7,0.08,8,0.01,9,0.005,10,0.005,13,1.142,15,0.321,19,1.313,20,1.588,21,1.906,22,2.456,23,1.338,25,1.588,26,1.394,28,0.76,29,1.246,30,0.881,34,3.211,48,1.24,55,1.261,56,2.311,61,1.79,62,1.584,64,0.442,65,0.573,71,1.747,75,1.85,76,1.645,77,1.645,86,1.438,88,1.904,89,1.605,94,3.372,95,1.173,96,1.313,99,1.8,101,2.941,104,1.924,107,1.534,108,1.084,109,1.084,114,1.313,116,2.093,118,2.488,146,1.206,155,2.259,170,2.671,262,4.251,267,4.251,270,1.588,281,2.549,289,2.019,290,1.904,292,1.775,383,2.848,385,3.876,387,2.762,397,3.048,399,1.933,401,2.259,403,3.876,406,1.775,407,1.933,408,3.876,409,1.933,410,2.134,411,4.251,414,2.408,415,2.596,416,2.596,417,2.596,418,2.848,419,2.596,421,2.408,422,2.408,423,4.251,426,4.251,543,2.259,579,2.29,594,1.645,598,2.408,621,2.134,623,2.848,630,2.29,633,4.638,653,4.788,660,2.408,1253,2.134,2494,4.475,2546,2.848,2548,2.848,2549,4.821,2550,4.821,2551,3.229,2552,4.821,2553,5.769,2554,3.229,2555,4.821,2556,3.229,2557,3.229,2558,3.229,2559,6.398,2560,3.229,2561,4.821,2562,3.229,2563,3.229,2564,3.229,2565,4.821,2566,3.229,2567,3.229,2568,3.229,2569,3.229,2570,3.229,2571,3.229,2572,3.229,2573,3.229,2574,3.229,2575,3.229,2576,3.229,2577,3.229,2578,4.821,2579,2.848,2580,3.229,2581,3.229]],["title/coverage.html",[2582,4.813]],["body/coverage.html",[0,0.341,1,1.486,5,0.048,6,1.874,8,0.009,9,0.004,10,0.004,11,1.585,12,3.707,13,1.558,14,3.286,28,0.539,49,2.198,50,1.585,52,1.874,66,1.334,73,1.486,74,3.521,87,1.486,95,1.938,97,1.874,111,0.946,165,4.088,167,2.429,168,1.585,170,1.478,177,1.486,189,0.917,194,1.334,195,1.404,197,0.839,200,1.585,201,1.585,215,1.874,238,0.977,240,1.585,244,1.486,260,1.874,290,0.839,304,1.334,310,1.404,326,1.874,379,1.874,477,2.626,479,3.063,513,1.045,550,1.585,551,2.793,552,1.874,566,1.404,578,1.874,579,1.01,628,1.585,629,1.874,635,1.334,642,1.486,650,1.486,656,1.334,688,1.874,692,1.334,708,1.404,765,1.486,766,3.286,767,3.286,775,1.486,779,1.404,837,1.334,838,1.874,839,1.585,840,1.874,846,1.486,852,1.486,863,1.404,867,1.404,904,2.793,906,1.874,952,1.404,957,1.874,960,1.272,961,1.217,1020,1.585,1021,1.585,1039,1.585,1040,2.591,1041,2.793,1051,1.334,1066,1.334,1097,2.793,1107,1.334,1124,1.585,1131,1.404,1201,1.217,1320,1.585,1321,1.874,1322,2.793,1323,2.591,1324,3.081,1337,1.585,1360,1.404,1361,1.874,1362,2.793,1364,1.585,1365,1.874,1366,2.793,1367,2.793,1368,3.707,1371,1.585,1377,1.585,1378,1.874,1379,2.793,1390,1.585,1391,1.874,1392,2.793,1395,1.585,1396,1.874,1397,2.793,1398,1.585,1399,2.793,1400,2.793,1401,1.585,1402,2.079,1405,1.874,1414,1.585,1415,1.874,1426,1.334,1448,1.874,1518,1.486,1519,1.874,1523,1.585,1524,1.874,1528,1.404,1540,1.874,1555,1.874,1565,1.874,1594,1.708,1596,1.708,1598,1.708,1600,1.708,1602,1.708,1603,1.708,1621,1.874,1622,1.585,1623,1.874,1630,1.404,1669,1.874,1748,3.542,1766,2.591,1782,1.874,1783,1.874,1828,1.404,1830,1.585,1835,1.874,1843,1.874,1844,1.874,1878,1.708,1879,1.874,1888,1.404,1889,1.874,1904,1.585,1905,1.874,1924,1.874,1975,1.874,1987,1.585,1988,1.874,2044,1.874,2147,2.793,2157,1.585,2194,1.874,2200,1.708,2210,1.486,2211,1.874,2212,1.585,2213,1.874,2220,1.404,2230,1.217,2233,1.874,2290,1.874,2303,1.585,2304,1.874,2360,1.486,2363,2.793,2369,1.585,2373,1.874,2381,1.874,2456,1.708,2457,1.874,2464,1.874,2466,1.874,2468,1.708,2469,1.874,2471,1.708,2472,1.874,2475,1.708,2476,1.874,2478,1.708,2479,1.874,2482,1.708,2483,1.874,2486,1.708,2487,1.874,2490,1.708,2491,1.874,2494,1.486,2495,1.874,2497,1.874,2528,1.585,2529,1.874,2548,1.874,2582,1.708,2583,1.874,2584,2.125,2585,2.125,2586,1.874,2587,6.354,2588,8.782,2589,1.874,2590,1.874,2591,1.874,2592,3.063,2593,5.61,2594,6.354,2595,7.226,2596,6.021,2597,6.021,2598,3.474,2599,6.354,2600,3.474,2601,3.474,2602,2.125,2603,6.021,2604,3.063,2605,4.406,2606,2.125,2607,1.874,2608,4.406,2609,2.125,2610,2.125,2611,2.125,2612,2.125,2613,1.874,2614,2.125,2615,2.125]],["title/dependencies.html",[186,2.27,2616,3.207]],["body/dependencies.html",[0,0.271,8,0.01,9,0.007,10,0.007,65,0.968,108,1.832,109,1.832,186,2.356,588,3.606,764,4.071,794,3.606,796,4.071,837,3.426,866,4.85,896,4.813,916,4.388,987,4.388,1037,2.509,1078,4.813,1135,4.071,1345,3.606,1425,4.388,1567,4.813,1666,4.388,2199,4.813,2461,2.886,2462,2.886,2617,6.935,2618,7.623,2619,5.458,2620,6.935,2621,5.458,2622,5.458,2623,5.458,2624,5.458,2625,5.458,2626,5.458,2627,5.458,2628,5.458,2629,5.458,2630,5.458,2631,5.458,2632,5.458,2633,5.458,2634,5.458,2635,6.935,2636,5.458,2637,5.458,2638,5.458,2639,5.458,2640,5.458,2641,5.458,2642,5.458,2643,5.458,2644,5.458,2645,5.458]],["title/miscellaneous/enumerations.html",[2646,2.177,2647,4.639]],["body/miscellaneous/enumerations.html",[1,5.098,8,0.009,9,0.007,10,0.007,15,0.588,74,4.575,91,4.057,92,3.561,93,5.771,228,6.268,242,5.436,1021,4.408,1028,5.436,1323,4.408,1324,5.098,1351,5.86,1352,4.751,1353,4.751,1354,4.751,1355,4.751,1356,4.751,1357,4.751,2646,3.538,2647,5.211,2648,5.91,2649,5.91,2650,5.91,2651,5.91]],["title/miscellaneous/functions.html",[2646,2.177,2652,4.639]],["body/miscellaneous/functions.html",[8,0.009,9,0.007,10,0.007,15,0.536,23,1.487,28,0.845,29,1.373,42,2.359,47,4.219,89,1.818,104,2.138,189,3.269,229,4.016,1056,4.116,1285,6.416,1580,6.063,1586,6.063,1594,5.528,1596,5.528,1598,5.528,1600,5.528,1602,6.09,1603,6.09,2586,4.748,2589,4.748,2590,4.748,2591,4.748,2592,4.748,2607,4.748,2646,3.224,2652,4.748,2653,5.385,2654,6.876,2655,5.385,2656,5.385,2657,5.385,2658,5.385,2659,5.385,2660,5.385,2661,5.385,2662,5.385]],["title/index.html",[15,0.435,2663,4.369]],["body/index.html",[4,0.087,8,0.009,9,0.006,10,0.006,19,1.566,101,1.77,198,3.4,287,3.096,604,3.096,824,4.834,1487,3.396,2579,5.628,2582,3.096,2583,4.834,2664,3.851,2665,3.851,2666,6.383,2667,5.482,2668,3.851,2669,3.851,2670,3.851,2671,3.851,2672,5.482,2673,6.383,2674,3.851,2675,3.851,2676,6.954,2677,3.851,2678,6.954,2679,8.033,2680,3.851,2681,7.859,2682,3.851,2683,3.851,2684,3.851,2685,5.482,2686,3.851,2687,3.851,2688,6.383,2689,3.851,2690,5.482,2691,3.851,2692,3.851,2693,3.851,2694,3.851,2695,3.851,2696,6.954,2697,8.033,2698,7.638,2699,3.851,2700,5.482,2701,3.851,2702,3.851,2703,3.851,2704,3.851,2705,7.638,2706,5.482,2707,6.954,2708,3.851,2709,5.482,2710,3.851,2711,3.851,2712,5.482,2713,7.349,2714,6.954,2715,3.851,2716,5.482,2717,3.851,2718,3.851,2719,3.851,2720,3.851,2721,6.954,2722,3.851,2723,3.851,2724,3.851,2725,3.851,2726,5.482,2727,3.851,2728,3.851,2729,3.851,2730,3.851,2731,3.851,2732,5.482,2733,3.851,2734,3.851,2735,3.851,2736,5.482,2737,3.851,2738,3.851,2739,6.132,2740,5.482,2741,3.851,2742,3.851,2743,3.851,2744,3.851,2745,3.851,2746,3.851,2747,3.851,2748,3.851,2749,5.482,2750,3.851,2751,3.396,2752,3.851,2753,3.851,2754,3.851,2755,3.851,2756,3.851,2757,3.851,2758,3.851,2759,5.482,2760,3.851,2761,3.851,2762,3.851,2763,3.851,2764,3.851,2765,5.482,2766,3.851,2767,3.851,2768,3.851,2769,5.482,2770,5.482,2771,3.851,2772,3.851,2773,3.851,2774,3.851,2775,3.851,2776,3.851,2777,3.851,2778,3.851,2779,3.851,2780,3.851,2781,3.851,2782,3.396,2783,3.851,2784,3.851,2785,3.851,2786,3.851,2787,3.851,2788,3.851,2789,3.396]],["title/modules.html",[185,2.507]],["body/modules.html",[8,0.007,9,0.007,10,0.007,184,3.947,185,2.363,211,3.542,680,2.875,684,3.729,780,4.209,783,3.947,784,3.729,785,3.947,786,3.378,787,3.947,788,3.729,789,3.729,790,3.947,791,3.542,1318,4.537,2739,7.993,2751,4.976,2790,9.065,2791,9.065,2792,9.093,2793,5.643]],["title/overview.html",[2794,5.279]],["body/overview.html",[2,0.764,8,0.009,9,0.005,10,0.005,51,0.929,66,3.51,96,1.246,165,1.365,169,2.465,183,0.906,184,5.391,185,1.284,186,1.323,187,1.409,188,1.409,189,1.323,190,1.409,191,1.409,192,2.704,193,2.704,194,3.51,195,3.695,196,2.131,197,1.211,198,1.365,211,5.01,478,1.562,566,4.832,579,3.474,656,4.59,676,2.704,677,2.704,678,2.704,679,2.704,680,4.17,684,5.192,692,4.59,780,6.596,781,2.704,782,2.704,783,5.725,784,5.093,785,4.682,786,4.615,787,5.495,788,5.408,789,5.093,790,5.115,791,5.078,863,3.695,867,3.695,905,2.465,945,2.704,947,2.704,960,4.378,961,4.19,1015,2.287,1066,4.59,1107,4.59,1251,2.91,1426,4.59,1442,2.704,1443,2.704,1444,2.704,1489,2.704,1528,3.695,1534,2.704,1535,2.704,1560,2.704,1561,2.704,1562,2.704,1630,4.832,1659,2.704,1661,2.704,1662,2.704,1824,2.704,1826,2.704,1827,2.704,1828,3.695,1916,2.704,1917,2.704,1919,2.704,2035,2.704,2036,2.704,2037,2.704,2220,3.695,2225,2.704,2227,2.704,2352,2.704,2353,2.704,2355,2.704,2542,2.704,2543,2.704,2544,2.704,2794,2.704,2795,3.066,2796,3.066,2797,3.066]],["title/properties.html",[16,1.343,2616,3.207]],["body/properties.html",[8,0.009,9,0.008,10,0.008,16,1.757,19,2.799,2782,6.072,2789,6.072,2798,6.886,2799,6.886,2800,6.886]],["title/routes.html",[2801,5.279]],["body/routes.html",[8,0.008,9,0.008,10,0.008,2801,6.289]],["title/miscellaneous/typealiases.html",[2646,2.177,2802,5.261]],["body/miscellaneous/typealiases.html",[8,0.009,9,0.008,10,0.008,15,0.593,28,0.631,297,4.98,299,4.388,301,4.6,303,5.466,304,4.6,308,4.447,310,3.94,1124,5.466,1748,4.794,1766,5.466,1767,5.892,1768,5.892,1769,5.892,1770,5.892,1771,5.892,2363,4.794,2369,5.466,2646,3.57,2803,5.963,2804,7.329,2805,5.963]],["title/miscellaneous/variables.html",[2646,2.177,2806,4.639]],["body/miscellaneous/variables.html",[8,0.01,9,0.006,10,0.006,15,0.459,28,0.744,29,0.703,42,1.837,62,1.267,71,2.194,92,3.032,116,2.114,124,3.56,126,2.192,146,1.723,152,2.44,165,3.127,166,2.269,170,2.522,179,2.269,227,3.974,228,4.913,240,5.851,242,3.442,373,2.763,466,6.195,593,2.121,621,4.966,708,4.106,925,4.996,991,3.227,1216,4.069,1221,4.069,1619,5.239,2200,4.996,2268,5.605,2291,3.71,2416,4.069,2450,4.069,2604,4.069,2613,4.069,2646,2.763,2806,4.069,2807,6.214,2808,4.615,2809,4.615,2810,4.615,2811,4.615,2812,4.615,2813,4.615,2814,4.615,2815,4.615,2816,4.615,2817,4.615,2818,6.214,2819,6.214,2820,7.516,2821,6.214,2822,6.214,2823,6.214,2824,4.615,2825,4.615,2826,6.214,2827,4.615,2828,4.615]]],"invertedIndex":[["",{"_index":8,"title":{},"body":{"classes/Admin.html":{},"classes/AdminAlbumByIdDto.html":{},"controllers/AdminAlbumController.html":{},"classes/AdminAlbumDto.html":{},"injectables/AdminAlbumService.html":{},"interfaces/AdminAlbumSummaryDto.html":{},"modules/AdminModule.html":{},"controllers/AdminOrderController.html":{},"injectables/AdminOrderService.html":{},"interfaces/AdminPhotographerByIdDto.html":{},"controllers/AdminUserController.html":{},"classes/AdminUserDto.html":{},"injectables/AdminUserService.html":{},"entities/Album.html":{},"controllers/AlbumAccessController.html":{},"injectables/AlbumAccessService.html":{},"controllers/AlbumController.html":{},"modules/AlbumModule.html":{},"injectables/AlbumService.html":{},"classes/AlbumSummaryDto.html":{},"modules/AppModule.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseUserDto.html":{},"controllers/BuyerOrdersController.html":{},"injectables/BuyerOrdersService.html":{},"modules/CommonModule.html":{},"classes/CreateAdminDto.html":{},"classes/CreateAlbumDto.html":{},"classes/CreateLeadDto.html":{},"classes/CreateMercadopagoDto.html":{},"classes/CreateOrderDto.html":{},"classes/CreatePaymentAccountDto.html":{},"classes/CreatePhotoDto.html":{},"classes/CreateSeedDto.html":{},"classes/CreateSubscriptionDto.html":{},"classes/CreateSubscriptionOrderDto.html":{},"classes/CreateUserDto.html":{},"controllers/FilesController.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"entities/Lead.html":{},"controllers/LeadController.html":{},"modules/LeadModule.html":{},"injectables/LeadService.html":{},"classes/LoginDto.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"classes/Mercadopago.html":{},"controllers/MercadopagoController.html":{},"modules/MercadopagoModule.html":{},"injectables/MercadopagoService.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"classes/OrderItemDto.html":{},"classes/OrderItemResponseDto.html":{},"classes/OrderResponseDto.html":{},"modules/OrdersModule.html":{},"classes/PaginationDto.html":{},"injectables/PasswordResetService.html":{},"entities/PasswordResetToken.html":{},"entities/PaymentAccount.html":{},"controllers/PaymentController.html":{},"modules/PaymentModule.html":{},"injectables/PaymentService.html":{},"entities/Photo.html":{},"controllers/PhotoController.html":{},"modules/PhotoModule.html":{},"injectables/PhotoService.html":{},"controllers/PhotographerOrdersController.html":{},"injectables/PhotographerOrdersService.html":{},"classes/PriceOptionDto.html":{},"guards/RolesGuard.html":{},"classes/Seed.html":{},"controllers/SeedController.html":{},"modules/SeedModule.html":{},"injectables/SeedService.html":{},"entities/Subscription.html":{},"controllers/SubscriptionController.html":{},"modules/SubscriptionModule.html":{},"entities/SubscriptionOrder.html":{},"entities/SubscriptionPlan.html":{},"injectables/SubscriptionService.html":{},"classes/UpdateAdminDto.html":{},"classes/UpdateAlbumDto.html":{},"classes/UpdateDeliveryStatusDto.html":{},"classes/UpdateLeadDto.html":{},"classes/UpdateMercadopagoDto.html":{},"classes/UpdateOrderDto.html":{},"classes/UpdatePaymentDto.html":{},"classes/UpdatePhotoDto.html":{},"classes/UpdateSeedDto.html":{},"classes/UpdateSubscriptionDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"routes.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":165,"title":{},"body":{"injectables/AdminAlbumService.html":{},"injectables/AdminOrderService.html":{},"injectables/AdminUserService.html":{},"entities/Album.html":{},"injectables/AlbumService.html":{},"injectables/BuyerOrdersService.html":{},"injectables/FilesService.html":{},"controllers/MercadopagoController.html":{},"entities/Order.html":{},"injectables/PhotoService.html":{},"injectables/SeedService.html":{},"entities/SubscriptionPlan.html":{},"entities/User.html":{},"coverage.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["0.0.1",{"_index":2799,"title":{},"body":{"properties.html":{}}}],["0.12.7",{"_index":2637,"title":{},"body":{"dependencies.html":{}}}],["0.14.2",{"_index":2626,"title":{},"body":{"dependencies.html":{}}}],["0.2.2",{"_index":2642,"title":{},"body":{"dependencies.html":{}}}],["0.3.25",{"_index":2645,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":2625,"title":{},"body":{"dependencies.html":{}}}],["0.7.0",{"_index":2636,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":2588,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":2606,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":2598,"title":{},"body":{"coverage.html":{}}}],["0/12",{"_index":2600,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":2594,"title":{},"body":{"coverage.html":{}}}],["0/22",{"_index":2602,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":2595,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":2596,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":2597,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":2599,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":2603,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":2593,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":2601,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":152,"title":{},"body":{"injectables/AdminAlbumService.html":{},"controllers/AdminOrderController.html":{},"injectables/AdminOrderService.html":{},"injectables/AdminUserService.html":{},"guards/AuthGuard.html":{},"modules/MercadopagoModule.html":{},"injectables/PhotoService.html":{},"injectables/SeedService.html":{},"entities/SubscriptionPlan.html":{},"injectables/SubscriptionService.html":{},"miscellaneous/variables.html":{}}}],["1.12.2",{"_index":2623,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":166,"title":{},"body":{"injectables/AdminAlbumService.html":{},"controllers/AdminOrderController.html":{},"injectables/AdminOrderService.html":{},"injectables/AdminUserService.html":{},"injectables/AlbumService.html":{},"modules/AppModule.html":{},"injectables/AuthService.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"injectables/SeedService.html":{},"entities/SubscriptionOrder.html":{},"entities/SubscriptionPlan.html":{},"miscellaneous/variables.html":{}}}],["10.1.0",{"_index":2632,"title":{},"body":{"dependencies.html":{}}}],["100).tofixed(2",{"_index":1225,"title":{},"body":{"injectables/BuyerOrdersService.html":{}}}],["1000",{"_index":898,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/PasswordResetService.html":{},"injectables/PaymentService.html":{}}}],["1024",{"_index":1469,"title":{},"body":{"injectables/FilesService.html":{},"controllers/PhotoController.html":{},"injectables/PhotoService.html":{}}}],["108000",{"_index":2277,"title":{},"body":{"injectables/SeedService.html":{},"entities/SubscriptionPlan.html":{}}}],["11",{"_index":2795,"title":{},"body":{"overview.html":{}}}],["11.0.0",{"_index":2620,"title":{},"body":{"dependencies.html":{}}}],["11.0.1",{"_index":2618,"title":{},"body":{"dependencies.html":{}}}],["11.0.5",{"_index":2622,"title":{},"body":{"dependencies.html":{}}}],["123456",{"_index":2245,"title":{},"body":{"injectables/SeedService.html":{}}}],["15",{"_index":1015,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PasswordResetService.html":{},"controllers/PhotoController.html":{},"overview.html":{}}}],["15mb",{"_index":2016,"title":{},"body":{"controllers/PhotoController.html":{}}}],["16",{"_index":1489,"title":{},"body":{"injectables/FilesService.html":{},"overview.html":{}}}],["17.2.1",{"_index":2629,"title":{},"body":{"dependencies.html":{}}}],["18",{"_index":2796,"title":{},"body":{"overview.html":{}}}],["19.99",{"_index":2822,"title":{},"body":{"miscellaneous/variables.html":{}}}],["192000",{"_index":2279,"title":{},"body":{"injectables/SeedService.html":{},"entities/SubscriptionPlan.html":{}}}],["1d",{"_index":832,"title":{},"body":{"modules/AppModule.html":{}}}],["1m",{"_index":834,"title":{},"body":{"modules/AppModule.html":{}}}],["2",{"_index":1251,"title":{},"body":{"injectables/BuyerOrdersService.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"injectables/SeedService.html":{},"entities/SubscriptionOrder.html":{},"injectables/SubscriptionService.html":{},"overview.html":{}}}],["2.7.0",{"_index":2627,"title":{},"body":{"dependencies.html":{}}}],["20",{"_index":2021,"title":{},"body":{"controllers/PhotoController.html":{},"injectables/SeedService.html":{},"entities/SubscriptionPlan.html":{}}}],["23505",{"_index":735,"title":{},"body":{"injectables/AlbumService.html":{}}}],["24",{"_index":900,"title":{},"body":{"controllers/AuthController.html":{}}}],["27",{"_index":2611,"title":{},"body":{"coverage.html":{}}}],["3",{"_index":818,"title":{},"body":{"modules/AppModule.html":{},"injectables/SeedService.html":{},"entities/SubscriptionPlan.html":{},"injectables/SubscriptionService.html":{}}}],["3/11",{"_index":2612,"title":{},"body":{"coverage.html":{}}}],["3/6",{"_index":2610,"title":{},"body":{"coverage.html":{}}}],["3000",{"_index":817,"title":{},"body":{"modules/AppModule.html":{}}}],["38",{"_index":2797,"title":{},"body":{"overview.html":{}}}],["4",{"_index":2249,"title":{},"body":{"injectables/SeedService.html":{}}}],["4.0.1",{"_index":2617,"title":{},"body":{"dependencies.html":{}}}],["4.0.2",{"_index":2619,"title":{},"body":{"dependencies.html":{}}}],["4.7.0",{"_index":2643,"title":{},"body":{"dependencies.html":{}}}],["4.99",{"_index":2823,"title":{},"body":{"miscellaneous/variables.html":{}}}],["40000",{"_index":2274,"title":{},"body":{"injectables/SeedService.html":{},"entities/SubscriptionPlan.html":{}}}],["5",{"_index":1471,"title":{},"body":{"injectables/FilesService.html":{},"controllers/PhotoController.html":{},"injectables/SeedService.html":{}}}],["5.1.0",{"_index":2630,"title":{},"body":{"dependencies.html":{}}}],["50",{"_index":2609,"title":{},"body":{"coverage.html":{}}}],["6",{"_index":2278,"title":{},"body":{"injectables/SeedService.html":{},"entities/SubscriptionPlan.html":{}}}],["6.0.0",{"_index":2624,"title":{},"body":{"dependencies.html":{}}}],["60",{"_index":899,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/PasswordResetService.html":{}}}],["60s",{"_index":833,"title":{},"body":{"modules/AppModule.html":{}}}],["7.0.9",{"_index":2634,"title":{},"body":{"dependencies.html":{}}}],["7.8.1",{"_index":2644,"title":{},"body":{"dependencies.html":{}}}],["7pkbjtfut2qbek",{"_index":921,"title":{},"body":{"guards/AuthGuard.html":{}}}],["8",{"_index":1650,"title":{},"body":{"controllers/MercadopagoController.html":{}}}],["8.16.3",{"_index":2639,"title":{},"body":{"dependencies.html":{}}}],["ac",{"_index":1213,"title":{},"body":{"injectables/BuyerOrdersService.html":{}}}],["acceder",{"_index":542,"title":{},"body":{"entities/Album.html":{}}}],["acceso",{"_index":1184,"title":{},"body":{"injectables/BuyerOrdersService.html":{},"injectables/PhotographerOrdersService.html":{}}}],["accesos",{"_index":596,"title":{},"body":{"injectables/AlbumAccessService.html":{}}}],["access",{"_index":553,"title":{},"body":{"controllers/AlbumAccessController.html":{},"injectables/BuyerOrdersService.html":{},"injectables/SubscriptionService.html":{}}}],["access.controller",{"_index":686,"title":{},"body":{"modules/AlbumModule.html":{}}}],["access.controller.ts",{"_index":552,"title":{},"body":{"controllers/AlbumAccessController.html":{},"coverage.html":{}}}],["access.controller.ts:19",{"_index":562,"title":{},"body":{"controllers/AlbumAccessController.html":{}}}],["access.controller.ts:33",{"_index":559,"title":{},"body":{"controllers/AlbumAccessController.html":{}}}],["access.service",{"_index":567,"title":{},"body":{"controllers/AlbumAccessController.html":{},"modules/AlbumModule.html":{}}}],["access.service.ts",{"_index":578,"title":{},"body":{"injectables/AlbumAccessService.html":{},"coverage.html":{}}}],["access.service.ts:15",{"_index":580,"title":{},"body":{"injectables/AlbumAccessService.html":{}}}],["access.service.ts:24",{"_index":584,"title":{},"body":{"injectables/AlbumAccessService.html":{}}}],["access.service.ts:59",{"_index":582,"title":{},"body":{"injectables/AlbumAccessService.html":{}}}],["access_token",{"_index":965,"title":{},"body":{"injectables/AuthService.html":{}}}],["accessiblealbums",{"_index":94,"title":{},"body":{"classes/AdminAlbumDto.html":{},"classes/AdminUserDto.html":{},"injectables/AdminUserService.html":{},"entities/User.html":{},"injectables/UserService.html":{}}}],["accessiblealbums.photos",{"_index":2563,"title":{},"body":{"injectables/UserService.html":{}}}],["accessiblealbums?.map",{"_index":413,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["accessibleusers",{"_index":480,"title":{},"body":{"entities/Album.html":{},"injectables/AlbumAccessService.html":{}}}],["accesstoken",{"_index":1380,"title":{},"body":{"classes/CreatePaymentAccountDto.html":{},"entities/PaymentAccount.html":{}}}],["account",{"_index":1946,"title":{},"body":{"injectables/PaymentService.html":{}}}],["account.accesstoken",{"_index":1962,"title":{},"body":{"injectables/PaymentService.html":{}}}],["account.provideruserid",{"_index":1966,"title":{},"body":{"injectables/PaymentService.html":{}}}],["account.refreshtoken",{"_index":1964,"title":{},"body":{"injectables/PaymentService.html":{}}}],["account.tokenexpiresat",{"_index":1968,"title":{},"body":{"injectables/PaymentService.html":{}}}],["activa",{"_index":2416,"title":{},"body":{"injectables/SubscriptionService.html":{},"miscellaneous/variables.html":{}}}],["activar",{"_index":2437,"title":{},"body":{"injectables/SubscriptionService.html":{}}}],["activatesubscription",{"_index":2382,"title":{},"body":{"injectables/SubscriptionService.html":{}}}],["activatesubscription(user",{"_index":2391,"title":{},"body":{"injectables/SubscriptionService.html":{}}}],["activateuser",{"_index":327,"title":{},"body":{"controllers/AdminUserController.html":{}}}],["activateuser(@param('id",{"_index":369,"title":{},"body":{"controllers/AdminUserController.html":{}}}],["activateuser(id",{"_index":334,"title":{},"body":{"controllers/AdminUserController.html":{}}}],["active",{"_index":395,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["activealbums",{"_index":130,"title":{},"body":{"injectables/AdminAlbumService.html":{}}}],["activesub",{"_index":2818,"title":{},"body":{"miscellaneous/variables.html":{}}}],["activesub?.plan?.name",{"_index":2821,"title":{},"body":{"miscellaneous/variables.html":{}}}],["activesubs",{"_index":2446,"title":{},"body":{"injectables/SubscriptionService.html":{}}}],["activo",{"_index":938,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{}}}],["activos",{"_index":123,"title":{},"body":{"injectables/AdminAlbumService.html":{}}}],["actual",{"_index":2115,"title":{},"body":{"injectables/PhotoService.html":{}}}],["actualizada",{"_index":887,"title":{},"body":{"controllers/AuthController.html":{}}}],["actualizado",{"_index":748,"title":{},"body":{"injectables/AlbumService.html":{}}}],["actualizando",{"_index":1740,"title":{},"body":{"injectables/MercadopagoService.html":{}}}],["actualizar",{"_index":1506,"title":{},"body":{"injectables/FilesService.html":{},"injectables/PaymentService.html":{},"injectables/PhotoService.html":{},"injectables/PhotographerOrdersService.html":{}}}],["addselect",{"_index":440,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["addselect('count(order.id",{"_index":439,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["admin",{"_index":1,"title":{"classes/Admin.html":{}},"body":{"classes/Admin.html":{},"controllers/AdminUserController.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["admin.controller",{"_index":205,"title":{},"body":{"modules/AdminModule.html":{}}}],["admin.dto",{"_index":2463,"title":{},"body":{"classes/UpdateAdminDto.html":{}}}],["admin.dto.ts",{"_index":1322,"title":{},"body":{"classes/CreateAdminDto.html":{},"classes/UpdateAdminDto.html":{},"coverage.html":{}}}],["admin.service",{"_index":204,"title":{},"body":{"modules/AdminModule.html":{},"controllers/AdminUserController.html":{}}}],["admin/admin.module",{"_index":808,"title":{},"body":{"modules/AppModule.html":{}}}],["admin/albums",{"_index":54,"title":{},"body":{"controllers/AdminAlbumController.html":{}}}],["admin/orders",{"_index":216,"title":{},"body":{"controllers/AdminOrderController.html":{}}}],["adminalbum.controller",{"_index":210,"title":{},"body":{"modules/AdminModule.html":{}}}],["adminalbum.controller.ts",{"_index":63,"title":{},"body":{"controllers/AdminAlbumController.html":{}}}],["adminalbum.service",{"_index":67,"title":{},"body":{"controllers/AdminAlbumController.html":{},"modules/AdminModule.html":{},"controllers/AdminUserController.html":{}}}],["adminalbumbyiddto",{"_index":11,"title":{"classes/AdminAlbumByIdDto.html":{}},"body":{"classes/AdminAlbumByIdDto.html":{},"injectables/AdminUserService.html":{},"coverage.html":{}}}],["adminalbumcontroller",{"_index":50,"title":{"controllers/AdminAlbumController.html":{}},"body":{"controllers/AdminAlbumController.html":{},"modules/AdminModule.html":{},"coverage.html":{}}}],["adminalbumdto",{"_index":73,"title":{"classes/AdminAlbumDto.html":{}},"body":{"classes/AdminAlbumDto.html":{},"classes/AdminUserDto.html":{},"injectables/AdminUserService.html":{},"coverage.html":{}}}],["adminalbumservice",{"_index":66,"title":{"injectables/AdminAlbumService.html":{}},"body":{"controllers/AdminAlbumController.html":{},"injectables/AdminAlbumService.html":{},"modules/AdminModule.html":{},"controllers/AdminUserController.html":{},"coverage.html":{},"overview.html":{}}}],["adminalbumsummarydto",{"_index":168,"title":{"interfaces/AdminAlbumSummaryDto.html":{}},"body":{"interfaces/AdminAlbumSummaryDto.html":{},"interfaces/AdminPhotographerByIdDto.html":{},"coverage.html":{}}}],["adminmodule",{"_index":184,"title":{"modules/AdminModule.html":{}},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["adminorder.controller",{"_index":207,"title":{},"body":{"modules/AdminModule.html":{}}}],["adminorder.service",{"_index":208,"title":{},"body":{"modules/AdminModule.html":{},"controllers/AdminOrderController.html":{},"controllers/AdminUserController.html":{}}}],["adminordercontroller",{"_index":201,"title":{"controllers/AdminOrderController.html":{}},"body":{"modules/AdminModule.html":{},"controllers/AdminOrderController.html":{},"coverage.html":{}}}],["adminorderservice",{"_index":194,"title":{"injectables/AdminOrderService.html":{}},"body":{"modules/AdminModule.html":{},"controllers/AdminOrderController.html":{},"injectables/AdminOrderService.html":{},"controllers/AdminUserController.html":{},"coverage.html":{},"overview.html":{}}}],["adminphotographerbyiddto",{"_index":177,"title":{"interfaces/AdminPhotographerByIdDto.html":{}},"body":{"interfaces/AdminAlbumSummaryDto.html":{},"interfaces/AdminPhotographerByIdDto.html":{},"injectables/AdminUserService.html":{},"coverage.html":{}}}],["adminusercontroller",{"_index":200,"title":{"controllers/AdminUserController.html":{}},"body":{"modules/AdminModule.html":{},"controllers/AdminUserController.html":{},"coverage.html":{}}}],["adminuserdto",{"_index":87,"title":{"classes/AdminUserDto.html":{}},"body":{"classes/AdminAlbumDto.html":{},"classes/AdminUserDto.html":{},"injectables/AdminUserService.html":{},"coverage.html":{}}}],["adminuserservice",{"_index":195,"title":{"injectables/AdminUserService.html":{}},"body":{"modules/AdminModule.html":{},"controllers/AdminUserController.html":{},"injectables/AdminUserService.html":{},"coverage.html":{},"overview.html":{}}}],["ajust",{"_index":133,"title":{},"body":{"injectables/AdminAlbumService.html":{}}}],["al",{"_index":150,"title":{},"body":{"injectables/AdminAlbumService.html":{},"entities/Album.html":{},"injectables/AlbumAccessService.html":{},"injectables/AlbumService.html":{},"injectables/BuyerOrdersService.html":{},"injectables/MailService.html":{},"entities/Photo.html":{},"injectables/PhotographerOrdersService.html":{},"injectables/SubscriptionService.html":{}}}],["album",{"_index":13,"title":{"entities/Album.html":{}},"body":{"classes/AdminAlbumByIdDto.html":{},"injectables/AdminAlbumService.html":{},"modules/AdminModule.html":{},"injectables/AdminOrderService.html":{},"injectables/AdminUserService.html":{},"entities/Album.html":{},"controllers/AlbumAccessController.html":{},"injectables/AlbumAccessService.html":{},"controllers/AlbumController.html":{},"modules/AlbumModule.html":{},"injectables/AlbumService.html":{},"classes/AlbumSummaryDto.html":{},"injectables/BuyerOrdersService.html":{},"entities/Order.html":{},"classes/OrderItemResponseDto.html":{},"classes/OrderResponseDto.html":{},"modules/OrdersModule.html":{},"entities/Photo.html":{},"injectables/PhotoService.html":{},"injectables/PhotographerOrdersService.html":{},"entities/User.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["album.accessibleusers",{"_index":2499,"title":{},"body":{"entities/User.html":{}}}],["album.accessibleusers.find((u",{"_index":613,"title":{},"body":{"injectables/AlbumAccessService.html":{}}}],["album.accessibleusers.push(dbuser",{"_index":616,"title":{},"body":{"injectables/AlbumAccessService.html":{}}}],["album.clientemail",{"_index":470,"title":{},"body":{"injectables/AdminUserService.html":{},"injectables/AlbumService.html":{}}}],["album.clientphonenumber",{"_index":471,"title":{},"body":{"injectables/AdminUserService.html":{},"injectables/AlbumService.html":{}}}],["album.controller",{"_index":682,"title":{},"body":{"modules/AlbumModule.html":{}}}],["album.createdat",{"_index":619,"title":{},"body":{"injectables/AlbumAccessService.html":{},"injectables/AlbumService.html":{}}}],["album.deletedat",{"_index":761,"title":{},"body":{"injectables/AlbumService.html":{}}}],["album.description",{"_index":415,"title":{},"body":{"injectables/AdminUserService.html":{},"injectables/AlbumService.html":{},"injectables/UserService.html":{}}}],["album.dto",{"_index":659,"title":{},"body":{"controllers/AlbumController.html":{},"injectables/AlbumService.html":{},"classes/UpdateAlbumDto.html":{}}}],["album.dto.ts",{"_index":1324,"title":{},"body":{"classes/CreateAlbumDto.html":{},"classes/PriceOptionDto.html":{},"classes/UpdateAlbumDto.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["album.dto.ts:24",{"_index":2193,"title":{},"body":{"classes/PriceOptionDto.html":{}}}],["album.dto.ts:29",{"_index":2191,"title":{},"body":{"classes/PriceOptionDto.html":{}}}],["album.dto.ts:35",{"_index":1343,"title":{},"body":{"classes/CreateAlbumDto.html":{}}}],["album.dto.ts:39",{"_index":1344,"title":{},"body":{"classes/CreateAlbumDto.html":{}}}],["album.dto.ts:43",{"_index":1334,"title":{},"body":{"classes/CreateAlbumDto.html":{}}}],["album.dto.ts:48",{"_index":1340,"title":{},"body":{"classes/CreateAlbumDto.html":{}}}],["album.dto.ts:53",{"_index":1336,"title":{},"body":{"classes/CreateAlbumDto.html":{}}}],["album.dto.ts:58",{"_index":1342,"title":{},"body":{"classes/CreateAlbumDto.html":{}}}],["album.dto.ts:62",{"_index":1331,"title":{},"body":{"classes/CreateAlbumDto.html":{}}}],["album.dto.ts:66",{"_index":1326,"title":{},"body":{"classes/CreateAlbumDto.html":{}}}],["album.dto.ts:70",{"_index":1328,"title":{},"body":{"classes/CreateAlbumDto.html":{}}}],["album.dto.ts:74",{"_index":1329,"title":{},"body":{"classes/CreateAlbumDto.html":{}}}],["album.dto.ts:78",{"_index":1333,"title":{},"body":{"classes/CreateAlbumDto.html":{}}}],["album.eventdate",{"_index":419,"title":{},"body":{"injectables/AdminUserService.html":{},"injectables/AlbumAccessService.html":{},"injectables/UserService.html":{}}}],["album.id",{"_index":155,"title":{},"body":{"injectables/AdminAlbumService.html":{},"injectables/AdminUserService.html":{},"injectables/AlbumAccessService.html":{},"injectables/AlbumService.html":{},"injectables/UserService.html":{}}}],["album.isactivefolder",{"_index":739,"title":{},"body":{"injectables/AlbumService.html":{}}}],["album.orders",{"_index":1749,"title":{},"body":{"entities/Order.html":{}}}],["album.orders.filter",{"_index":458,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["album.orders.length",{"_index":457,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["album.orders.map((o",{"_index":472,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["album.passwordeventhash",{"_index":603,"title":{},"body":{"injectables/AlbumAccessService.html":{},"injectables/AlbumService.html":{}}}],["album.photographer",{"_index":282,"title":{},"body":{"injectables/AdminOrderService.html":{},"injectables/BuyerOrdersService.html":{},"injectables/PhotoService.html":{},"injectables/PhotographerOrdersService.html":{},"entities/User.html":{}}}],["album.photographer.name",{"_index":627,"title":{},"body":{"injectables/AlbumAccessService.html":{}}}],["album.photos",{"_index":620,"title":{},"body":{"injectables/AlbumAccessService.html":{},"injectables/AlbumService.html":{},"entities/Photo.html":{}}}],["album.photos.length",{"_index":463,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["album.photos.map((photo",{"_index":623,"title":{},"body":{"injectables/AlbumAccessService.html":{},"injectables/UserService.html":{}}}],["album.photos?.map((photo",{"_index":420,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["album.photos[0].urlweb",{"_index":464,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["album.photoscount",{"_index":2064,"title":{},"body":{"injectables/PhotoService.html":{}}}],["album.pricedigital",{"_index":417,"title":{},"body":{"injectables/AdminUserService.html":{},"injectables/AlbumAccessService.html":{},"injectables/UserService.html":{}}}],["album.prices",{"_index":416,"title":{},"body":{"injectables/AdminUserService.html":{},"injectables/AlbumAccessService.html":{},"injectables/UserService.html":{}}}],["album.priceschoolsports",{"_index":418,"title":{},"body":{"injectables/AdminUserService.html":{},"injectables/UserService.html":{}}}],["album.service",{"_index":657,"title":{},"body":{"controllers/AlbumController.html":{},"modules/AlbumModule.html":{}}}],["album.storageusedmb",{"_index":2573,"title":{},"body":{"injectables/UserService.html":{}}}],["album.title",{"_index":414,"title":{},"body":{"injectables/AdminUserService.html":{},"injectables/AlbumAccessService.html":{},"injectables/AlbumService.html":{},"injectables/UserService.html":{}}}],["album.userevent",{"_index":599,"title":{},"body":{"injectables/AlbumAccessService.html":{}}}],["album/album.module",{"_index":797,"title":{},"body":{"modules/AppModule.html":{}}}],["album/entities/album.entity",{"_index":110,"title":{},"body":{"injectables/AdminAlbumService.html":{},"entities/Order.html":{},"entities/User.html":{}}}],["album?.priceschoolsports",{"_index":622,"title":{},"body":{"injectables/AlbumAccessService.html":{}}}],["albumaccesscontroller",{"_index":550,"title":{"controllers/AlbumAccessController.html":{}},"body":{"controllers/AlbumAccessController.html":{},"modules/AlbumModule.html":{},"coverage.html":{}}}],["albumaccessservice",{"_index":566,"title":{"injectables/AlbumAccessService.html":{}},"body":{"controllers/AlbumAccessController.html":{},"injectables/AlbumAccessService.html":{},"modules/AlbumModule.html":{},"coverage.html":{},"overview.html":{}}}],["albumcontroller",{"_index":628,"title":{"controllers/AlbumController.html":{}},"body":{"controllers/AlbumController.html":{},"modules/AlbumModule.html":{},"coverage.html":{}}}],["albumid",{"_index":390,"title":{},"body":{"injectables/AdminUserService.html":{},"controllers/AlbumAccessController.html":{},"injectables/AlbumAccessService.html":{},"injectables/AlbumService.html":{},"injectables/BuyerOrdersService.html":{},"classes/CreateOrderDto.html":{},"classes/CreatePhotoDto.html":{},"classes/OrderItemDto.html":{},"controllers/PhotoController.html":{},"injectables/PhotoService.html":{}}}],["albummodule",{"_index":211,"title":{"modules/AlbumModule.html":{}},"body":{"modules/AdminModule.html":{},"modules/AlbumModule.html":{},"modules/AppModule.html":{},"modules/PhotoModule.html":{},"modules.html":{},"overview.html":{}}}],["albumrepo",{"_index":105,"title":{},"body":{"injectables/AdminAlbumService.html":{},"injectables/AdminUserService.html":{},"injectables/AlbumAccessService.html":{},"injectables/AlbumService.html":{}}}],["albumrepository",{"_index":1104,"title":{},"body":{"injectables/BuyerOrdersService.html":{}}}],["albums",{"_index":122,"title":{},"body":{"injectables/AdminAlbumService.html":{},"interfaces/AdminAlbumSummaryDto.html":{},"interfaces/AdminPhotographerByIdDto.html":{},"controllers/AdminUserController.html":{},"injectables/AdminUserService.html":{},"injectables/AlbumService.html":{},"entities/User.html":{}}}],["albums.map((album",{"_index":738,"title":{},"body":{"injectables/AlbumService.html":{}}}],["albumservice",{"_index":656,"title":{"injectables/AlbumService.html":{}},"body":{"controllers/AlbumController.html":{},"modules/AlbumModule.html":{},"injectables/AlbumService.html":{},"injectables/PhotoService.html":{},"coverage.html":{},"overview.html":{}}}],["albumsummarydto",{"_index":765,"title":{"classes/AlbumSummaryDto.html":{}},"body":{"classes/AlbumSummaryDto.html":{},"classes/OrderItemResponseDto.html":{},"classes/OrderResponseDto.html":{},"coverage.html":{}}}],["albumswithorders",{"_index":162,"title":{},"body":{"injectables/AdminAlbumService.html":{}}}],["algo",{"_index":877,"title":{},"body":{"controllers/AuthController.html":{}}}],["alias",{"_index":2608,"title":{},"body":{"coverage.html":{}}}],["aliases",{"_index":2803,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["allowing",{"_index":2727,"title":{},"body":{"index.html":{}}}],["almacenamiento",{"_index":1478,"title":{},"body":{"injectables/FilesService.html":{},"injectables/PhotoService.html":{}}}],["amazing",{"_index":2775,"title":{},"body":{"index.html":{}}}],["amount",{"_index":2364,"title":{},"body":{"entities/SubscriptionOrder.html":{},"injectables/SubscriptionService.html":{}}}],["ampliadas",{"_index":294,"title":{},"body":{"injectables/AdminOrderService.html":{}}}],["andwhere('photo.albumid",{"_index":1151,"title":{},"body":{"injectables/BuyerOrdersService.html":{}}}],["any).passwordevent",{"_index":745,"title":{},"body":{"injectables/AlbumService.html":{}}}],["api_key",{"_index":1463,"title":{},"body":{"injectables/FilesService.html":{}}}],["api_secret",{"_index":1465,"title":{},"body":{"injectables/FilesService.html":{}}}],["application",{"_index":2698,"title":{},"body":{"index.html":{}}}],["application/json",{"_index":1259,"title":{},"body":{"injectables/BuyerOrdersService.html":{},"injectables/SubscriptionService.html":{}}}],["applications",{"_index":2672,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":780,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["approved",{"_index":299,"title":{},"body":{"injectables/AdminOrderService.html":{},"injectables/AdminUserService.html":{},"injectables/BuyerOrdersService.html":{},"injectables/MercadopagoService.html":{},"entities/Order.html":{},"entities/SubscriptionOrder.html":{},"injectables/SubscriptionService.html":{},"miscellaneous/typealiases.html":{}}}],["approvedcount",{"_index":298,"title":{},"body":{"injectables/AdminOrderService.html":{}}}],["approvedorders",{"_index":181,"title":{},"body":{"interfaces/AdminAlbumSummaryDto.html":{},"interfaces/AdminPhotographerByIdDto.html":{},"injectables/AdminUserService.html":{}}}],["approvedraw",{"_index":315,"title":{},"body":{"injectables/AdminOrderService.html":{}}}],["aprobado",{"_index":1281,"title":{},"body":{"injectables/BuyerOrdersService.html":{},"injectables/SubscriptionService.html":{}}}],["aqu",{"_index":2434,"title":{},"body":{"injectables/SubscriptionService.html":{}}}],["archivo",{"_index":1434,"title":{},"body":{"controllers/FilesController.html":{},"injectables/FilesService.html":{}}}],["archivos",{"_index":1440,"title":{},"body":{"controllers/FilesController.html":{},"injectables/PhotoService.html":{}}}],["arriba",{"_index":924,"title":{},"body":{"guards/AuthGuard.html":{}}}],["ars",{"_index":1211,"title":{},"body":{"injectables/BuyerOrdersService.html":{},"injectables/SubscriptionService.html":{}}}],["asignamos",{"_index":2435,"title":{},"body":{"injectables/SubscriptionService.html":{}}}],["asociar",{"_index":610,"title":{},"body":{"injectables/AlbumAccessService.html":{}}}],["async",{"_index":56,"title":{},"body":{"controllers/AdminAlbumController.html":{},"injectables/AdminAlbumService.html":{},"controllers/AdminOrderController.html":{},"injectables/AdminOrderService.html":{},"controllers/AdminUserController.html":{},"injectables/AdminUserService.html":{},"controllers/AlbumAccessController.html":{},"injectables/AlbumAccessService.html":{},"controllers/AlbumController.html":{},"injectables/AlbumService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/BuyerOrdersController.html":{},"injectables/BuyerOrdersService.html":{},"controllers/FilesController.html":{},"injectables/FilesService.html":{},"controllers/LeadController.html":{},"injectables/LeadService.html":{},"injectables/MailService.html":{},"controllers/MercadopagoController.html":{},"injectables/MercadopagoService.html":{},"injectables/PasswordResetService.html":{},"controllers/PaymentController.html":{},"injectables/PaymentService.html":{},"controllers/PhotoController.html":{},"injectables/PhotoService.html":{},"controllers/PhotographerOrdersController.html":{},"injectables/PhotographerOrdersService.html":{},"controllers/SeedController.html":{},"injectables/SeedService.html":{},"controllers/SubscriptionController.html":{},"injectables/SubscriptionService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["atm",{"_index":1242,"title":{},"body":{"injectables/BuyerOrdersService.html":{}}}],["autenticado",{"_index":743,"title":{},"body":{"injectables/AlbumService.html":{},"controllers/BuyerOrdersController.html":{},"injectables/PhotographerOrdersService.html":{}}}],["auth",{"_index":837,"title":{"classes/Auth.html":{}},"body":{"classes/Auth.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/PhotoController.html":{},"coverage.html":{},"dependencies.html":{}}}],["auth.controller",{"_index":949,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.service",{"_index":864,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":798,"title":{},"body":{"modules/AppModule.html":{}}}],["authcontroller",{"_index":839,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authguard",{"_index":238,"title":{"guards/AuthGuard.html":{}},"body":{"controllers/AdminOrderController.html":{},"controllers/AdminUserController.html":{},"controllers/AlbumAccessController.html":{},"controllers/AlbumController.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"controllers/BuyerOrdersController.html":{},"controllers/FilesController.html":{},"controllers/PaymentController.html":{},"controllers/PhotoController.html":{},"controllers/PhotographerOrdersController.html":{},"controllers/SubscriptionController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["authmodule",{"_index":783,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":2782,"title":{},"body":{"index.html":{},"properties.html":{}}}],["authorization",{"_index":1257,"title":{},"body":{"injectables/BuyerOrdersService.html":{},"injectables/MercadopagoService.html":{},"injectables/SubscriptionService.html":{}}}],["authorization_code",{"_index":1954,"title":{},"body":{"injectables/PaymentService.html":{}}}],["authorized",{"_index":1767,"title":{},"body":{"entities/Order.html":{},"entities/SubscriptionOrder.html":{},"miscellaneous/typealiases.html":{}}}],["authservice",{"_index":863,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"coverage.html":{},"overview.html":{}}}],["auto",{"_index":1502,"title":{},"body":{"injectables/FilesService.html":{}}}],["autoloadentities",{"_index":826,"title":{},"body":{"modules/AppModule.html":{}}}],["autorizado",{"_index":741,"title":{},"body":{"injectables/AlbumService.html":{}}}],["available",{"_index":2793,"title":{},"body":{"modules.html":{}}}],["await",{"_index":118,"title":{},"body":{"injectables/AdminAlbumService.html":{},"injectables/AdminOrderService.html":{},"controllers/AdminUserController.html":{},"injectables/AdminUserService.html":{},"controllers/AlbumAccessController.html":{},"injectables/AlbumAccessService.html":{},"injectables/AlbumService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/BuyerOrdersController.html":{},"injectables/BuyerOrdersService.html":{},"injectables/FilesService.html":{},"injectables/LeadService.html":{},"injectables/MailService.html":{},"controllers/MercadopagoController.html":{},"injectables/MercadopagoService.html":{},"injectables/PasswordResetService.html":{},"injectables/PaymentService.html":{},"injectables/PhotoService.html":{},"injectables/PhotographerOrdersService.html":{},"injectables/SeedService.html":{},"injectables/SubscriptionService.html":{},"injectables/UserService.html":{}}}],["aws",{"_index":2716,"title":{},"body":{"index.html":{}}}],["axios",{"_index":1135,"title":{},"body":{"injectables/BuyerOrdersService.html":{},"injectables/PaymentService.html":{},"injectables/SubscriptionService.html":{},"dependencies.html":{}}}],["axios.post",{"_index":1254,"title":{},"body":{"injectables/BuyerOrdersService.html":{},"injectables/PaymentService.html":{},"injectables/SubscriptionService.html":{}}}],["aún",{"_index":1772,"title":{},"body":{"entities/Order.html":{}}}],["back_urls",{"_index":1234,"title":{},"body":{"injectables/BuyerOrdersService.html":{},"injectables/SubscriptionService.html":{}}}],["backers",{"_index":2776,"title":{},"body":{"index.html":{}}}],["badrequestexception",{"_index":706,"title":{},"body":{"injectables/AlbumService.html":{},"injectables/AuthService.html":{},"injectables/BuyerOrdersService.html":{},"controllers/FilesController.html":{},"injectables/FilesService.html":{},"injectables/MercadopagoService.html":{},"injectables/PasswordResetService.html":{},"injectables/PhotoService.html":{},"injectables/SubscriptionService.html":{}}}],["badrequestexception('comisión",{"_index":1228,"title":{},"body":{"injectables/BuyerOrdersService.html":{}}}],["badrequestexception('credenciales",{"_index":1007,"title":{},"body":{"injectables/AuthService.html":{}}}],["badrequestexception('datos",{"_index":988,"title":{},"body":{"injectables/AuthService.html":{}}}],["badrequestexception('el",{"_index":977,"title":{},"body":{"injectables/AuthService.html":{}}}],["badrequestexception('error",{"_index":1268,"title":{},"body":{"injectables/BuyerOrdersService.html":{},"injectables/SubscriptionService.html":{}}}],["badrequestexception('este",{"_index":1875,"title":{},"body":{"injectables/PasswordResetService.html":{}}}],["badrequestexception('no",{"_index":718,"title":{},"body":{"injectables/AlbumService.html":{},"controllers/FilesController.html":{},"injectables/PhotoService.html":{}}}],["badrequestexception('orden",{"_index":2424,"title":{},"body":{"injectables/SubscriptionService.html":{}}}],["badrequestexception('pago",{"_index":1704,"title":{},"body":{"injectables/MercadopagoService.html":{}}}],["badrequestexception('token",{"_index":1871,"title":{},"body":{"injectables/PasswordResetService.html":{}}}],["badrequestexception('usuario",{"_index":999,"title":{},"body":{"injectables/AuthService.html":{}}}],["badrequestexception('ya",{"_index":755,"title":{},"body":{"injectables/AlbumService.html":{}}}],["base",{"_index":1276,"title":{},"body":{"injectables/BuyerOrdersService.html":{},"classes/UpdateUserDto.html":{}}}],["based",{"_index":2711,"title":{},"body":{"index.html":{}}}],["baseuserdto",{"_index":1020,"title":{"classes/BaseUserDto.html":{}},"body":{"classes/BaseUserDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["bcrypt",{"_index":588,"title":{},"body":{"injectables/AlbumAccessService.html":{},"injectables/AlbumService.html":{},"injectables/AuthService.html":{},"injectables/PasswordResetService.html":{},"injectables/SeedService.html":{},"dependencies.html":{}}}],["bcrypt.compare(dto.password",{"_index":1005,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.compare(passwordevent",{"_index":602,"title":{},"body":{"injectables/AlbumAccessService.html":{}}}],["bcrypt.hash(dto.password",{"_index":981,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.hash(dto.passwordevent",{"_index":726,"title":{},"body":{"injectables/AlbumService.html":{}}}],["bcrypt.hash(u.password",{"_index":2261,"title":{},"body":{"injectables/SeedService.html":{}}}],["bd",{"_index":1507,"title":{},"body":{"injectables/FilesService.html":{}}}],["bearer",{"_index":919,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/BuyerOrdersService.html":{},"injectables/MercadopagoService.html":{},"injectables/SubscriptionService.html":{}}}],["bienvenida",{"_index":995,"title":{},"body":{"injectables/AuthService.html":{}}}],["bienvenido",{"_index":1617,"title":{},"body":{"injectables/MailService.html":{}}}],["bigint",{"_index":1896,"title":{},"body":{"entities/PaymentAccount.html":{}}}],["board",{"_index":2768,"title":{},"body":{"index.html":{}}}],["body",{"_index":563,"title":{},"body":{"controllers/AlbumAccessController.html":{},"controllers/AlbumController.html":{},"controllers/AuthController.html":{},"controllers/BuyerOrdersController.html":{},"controllers/LeadController.html":{},"controllers/MercadopagoController.html":{},"injectables/MercadopagoService.html":{},"controllers/PhotographerOrdersController.html":{},"controllers/SubscriptionController.html":{},"controllers/UserController.html":{}}}],["body('newpassword",{"_index":885,"title":{},"body":{"controllers/AuthController.html":{}}}],["body('planid",{"_index":2339,"title":{},"body":{"controllers/SubscriptionController.html":{}}}],["body('token",{"_index":884,"title":{},"body":{"controllers/AuthController.html":{}}}],["body.deliverystatus",{"_index":2170,"title":{},"body":{"controllers/PhotographerOrdersController.html":{}}}],["body.passwordevent",{"_index":574,"title":{},"body":{"controllers/AlbumAccessController.html":{}}}],["body.planid",{"_index":2346,"title":{},"body":{"controllers/SubscriptionController.html":{}}}],["body.userevent",{"_index":573,"title":{},"body":{"controllers/AlbumAccessController.html":{}}}],["body?.data?.id",{"_index":1727,"title":{},"body":{"injectables/MercadopagoService.html":{}}}],["boolean",{"_index":179,"title":{},"body":{"interfaces/AdminAlbumSummaryDto.html":{},"interfaces/AdminPhotographerByIdDto.html":{},"injectables/AdminUserService.html":{},"entities/Album.html":{},"guards/AuthGuard.html":{},"classes/CreateAlbumDto.html":{},"injectables/MercadopagoService.html":{},"entities/PasswordResetToken.html":{},"classes/PriceOptionDto.html":{},"guards/RolesGuard.html":{},"entities/Subscription.html":{},"entities/User.html":{},"miscellaneous/variables.html":{}}}],["bootstrap",{"_index":189,"title":{},"body":{"modules/AdminModule.html":{},"modules/AlbumModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/FilesModule.html":{},"modules/LeadModule.html":{},"modules/MailModule.html":{},"modules/MercadopagoModule.html":{},"modules/OrdersModule.html":{},"modules/PaymentModule.html":{},"modules/PhotoModule.html":{},"modules/SeedModule.html":{},"modules/SubscriptionModule.html":{},"modules/UserModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["borrar",{"_index":1984,"title":{},"body":{"entities/Photo.html":{}}}],["borren",{"_index":1985,"title":{},"body":{"entities/Photo.html":{}}}],["browse",{"_index":2792,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":2790,"title":{},"body":{"modules.html":{}}}],["buffer.isbuffer(req.body",{"_index":1638,"title":{},"body":{"controllers/MercadopagoController.html":{}}}],["building",{"_index":2667,"title":{},"body":{"index.html":{}}}],["buscar",{"_index":592,"title":{},"body":{"injectables/AlbumAccessService.html":{}}}],["buyer",{"_index":91,"title":{},"body":{"classes/AdminAlbumDto.html":{},"injectables/AdminOrderService.html":{},"classes/AdminUserDto.html":{},"injectables/AdminUserService.html":{},"classes/BaseUserDto.html":{},"controllers/BuyerOrdersController.html":{},"injectables/BuyerOrdersService.html":{},"injectables/MailService.html":{},"entities/Order.html":{},"modules/OrdersModule.html":{},"injectables/PhotographerOrdersService.html":{},"entities/User.html":{},"miscellaneous/enumerations.html":{}}}],["buyer.dto",{"_index":1130,"title":{},"body":{"injectables/BuyerOrdersService.html":{}}}],["buyer.dto.ts",{"_index":767,"title":{},"body":{"classes/AlbumSummaryDto.html":{},"classes/OrderItemResponseDto.html":{},"classes/OrderResponseDto.html":{},"coverage.html":{}}}],["buyer.dto.ts:14",{"_index":770,"title":{},"body":{"classes/AlbumSummaryDto.html":{}}}],["buyer.dto.ts:15",{"_index":774,"title":{},"body":{"classes/AlbumSummaryDto.html":{}}}],["buyer.dto.ts:16",{"_index":772,"title":{},"body":{"classes/AlbumSummaryDto.html":{}}}],["buyer.dto.ts:17",{"_index":771,"title":{},"body":{"classes/AlbumSummaryDto.html":{}}}],["buyer.dto.ts:18",{"_index":773,"title":{},"body":{"classes/AlbumSummaryDto.html":{}}}],["buyer.dto.ts:19",{"_index":769,"title":{},"body":{"classes/AlbumSummaryDto.html":{}}}],["buyer.dto.ts:2",{"_index":1812,"title":{},"body":{"classes/OrderItemResponseDto.html":{}}}],["buyer.dto.ts:20",{"_index":768,"title":{},"body":{"classes/AlbumSummaryDto.html":{}}}],["buyer.dto.ts:24",{"_index":1820,"title":{},"body":{"classes/OrderResponseDto.html":{}}}],["buyer.dto.ts:25",{"_index":1818,"title":{},"body":{"classes/OrderResponseDto.html":{}}}],["buyer.dto.ts:26",{"_index":1821,"title":{},"body":{"classes/OrderResponseDto.html":{}}}],["buyer.dto.ts:27",{"_index":1823,"title":{},"body":{"classes/OrderResponseDto.html":{}}}],["buyer.dto.ts:28",{"_index":1822,"title":{},"body":{"classes/OrderResponseDto.html":{}}}],["buyer.dto.ts:29",{"_index":1819,"title":{},"body":{"classes/OrderResponseDto.html":{}}}],["buyer.dto.ts:3",{"_index":1815,"title":{},"body":{"classes/OrderItemResponseDto.html":{}}}],["buyer.dto.ts:4",{"_index":1814,"title":{},"body":{"classes/OrderItemResponseDto.html":{}}}],["buyer.dto.ts:5",{"_index":1817,"title":{},"body":{"classes/OrderItemResponseDto.html":{}}}],["buyer.dto.ts:6",{"_index":1816,"title":{},"body":{"classes/OrderItemResponseDto.html":{}}}],["buyer.dto.ts:7",{"_index":1813,"title":{},"body":{"classes/OrderItemResponseDto.html":{}}}],["buyer/orders",{"_index":1042,"title":{},"body":{"controllers/BuyerOrdersController.html":{}}}],["buyer1@test.com",{"_index":2252,"title":{},"body":{"injectables/SeedService.html":{}}}],["buyer2@test.com",{"_index":2254,"title":{},"body":{"injectables/SeedService.html":{}}}],["buyer3@test.com",{"_index":2255,"title":{},"body":{"injectables/SeedService.html":{}}}],["buyer4@test.com",{"_index":2256,"title":{},"body":{"injectables/SeedService.html":{}}}],["buyer5@test.com",{"_index":2257,"title":{},"body":{"injectables/SeedService.html":{}}}],["buyerid",{"_index":1071,"title":{},"body":{"controllers/BuyerOrdersController.html":{},"injectables/BuyerOrdersService.html":{}}}],["buyername",{"_index":1580,"title":{},"body":{"injectables/MailService.html":{},"miscellaneous/functions.html":{}}}],["buyerorder",{"_index":1247,"title":{},"body":{"injectables/BuyerOrdersService.html":{}}}],["buyerorderscontroller",{"_index":1039,"title":{"controllers/BuyerOrdersController.html":{}},"body":{"controllers/BuyerOrdersController.html":{},"modules/OrdersModule.html":{},"coverage.html":{}}}],["buyerordersservice",{"_index":1066,"title":{"injectables/BuyerOrdersService.html":{}},"body":{"controllers/BuyerOrdersController.html":{},"injectables/BuyerOrdersService.html":{},"injectables/MercadopagoService.html":{},"modules/OrdersModule.html":{},"coverage.html":{},"overview.html":{}}}],["buyers",{"_index":430,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["calcula",{"_index":2815,"title":{},"body":{"miscellaneous/variables.html":{}}}],["calculamos",{"_index":1220,"title":{},"body":{"injectables/BuyerOrdersService.html":{}}}],["callback",{"_index":1958,"title":{},"body":{"injectables/PaymentService.html":{}}}],["cambiar",{"_index":2415,"title":{},"body":{"injectables/SubscriptionService.html":{}}}],["cambios",{"_index":1275,"title":{},"body":{"injectables/BuyerOrdersService.html":{}}}],["canactivate",{"_index":907,"title":{},"body":{"guards/AuthGuard.html":{},"guards/RolesGuard.html":{}}}],["canactivate(context",{"_index":911,"title":{},"body":{"guards/AuthGuard.html":{},"guards/RolesGuard.html":{}}}],["cancelada",{"_index":1192,"title":{},"body":{"injectables/BuyerOrdersService.html":{}}}],["cancelar",{"_index":1189,"title":{},"body":{"injectables/BuyerOrdersService.html":{}}}],["cancelled",{"_index":303,"title":{},"body":{"injectables/AdminOrderService.html":{},"entities/Order.html":{},"entities/SubscriptionOrder.html":{},"miscellaneous/typealiases.html":{}}}],["cancelledcount",{"_index":302,"title":{},"body":{"injectables/AdminOrderService.html":{}}}],["cancelorder",{"_index":1043,"title":{},"body":{"controllers/BuyerOrdersController.html":{},"injectables/BuyerOrdersService.html":{}}}],["cancelorder(@param('id",{"_index":1087,"title":{},"body":{"controllers/BuyerOrdersController.html":{}}}],["cancelorder(id",{"_index":1048,"title":{},"body":{"controllers/BuyerOrdersController.html":{}}}],["cancelorder(orderid",{"_index":1111,"title":{},"body":{"injectables/BuyerOrdersService.html":{}}}],["cancreatealbum(user",{"_index":2827,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cantidad",{"_index":145,"title":{},"body":{"injectables/AdminAlbumService.html":{},"injectables/PhotoService.html":{}}}],["cascada",{"_index":1986,"title":{},"body":{"entities/Photo.html":{}}}],["cascade",{"_index":506,"title":{},"body":{"entities/Album.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"entities/PasswordResetToken.html":{},"entities/PaymentAccount.html":{},"entities/Photo.html":{},"entities/Subscription.html":{},"entities/User.html":{}}}],["case",{"_index":2826,"title":{},"body":{"miscellaneous/variables.html":{}}}],["catch",{"_index":143,"title":{},"body":{"injectables/AdminAlbumService.html":{},"injectables/AlbumService.html":{},"guards/AuthGuard.html":{},"injectables/BuyerOrdersService.html":{},"injectables/MailService.html":{},"controllers/MercadopagoController.html":{},"injectables/MercadopagoService.html":{},"injectables/PhotoService.html":{},"injectables/SubscriptionService.html":{}}}],["changesubscription",{"_index":2305,"title":{},"body":{"controllers/SubscriptionController.html":{},"injectables/SubscriptionService.html":{}}}],["changesubscription(@req",{"_index":2338,"title":{},"body":{"controllers/SubscriptionController.html":{}}}],["changesubscription(req",{"_index":2309,"title":{},"body":{"controllers/SubscriptionController.html":{}}}],["changesubscription(userid",{"_index":2393,"title":{},"body":{"injectables/SubscriptionService.html":{}}}],["channel",{"_index":2742,"title":{},"body":{"index.html":{}}}],["charged_back",{"_index":1771,"title":{},"body":{"entities/Order.html":{},"entities/SubscriptionOrder.html":{},"miscellaneous/typealiases.html":{}}}],["check",{"_index":2705,"title":{},"body":{"index.html":{}}}],["class",{"_index":0,"title":{"classes/Admin.html":{},"classes/AdminAlbumByIdDto.html":{},"classes/AdminAlbumDto.html":{},"classes/AdminUserDto.html":{},"classes/AlbumSummaryDto.html":{},"classes/Auth.html":{},"classes/BaseUserDto.html":{},"classes/CreateAdminDto.html":{},"classes/CreateAlbumDto.html":{},"classes/CreateLeadDto.html":{},"classes/CreateMercadopagoDto.html":{},"classes/CreateOrderDto.html":{},"classes/CreatePaymentAccountDto.html":{},"classes/CreatePhotoDto.html":{},"classes/CreateSeedDto.html":{},"classes/CreateSubscriptionDto.html":{},"classes/CreateSubscriptionOrderDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"classes/Mercadopago.html":{},"classes/OrderItemDto.html":{},"classes/OrderItemResponseDto.html":{},"classes/OrderResponseDto.html":{},"classes/PaginationDto.html":{},"classes/PriceOptionDto.html":{},"classes/Seed.html":{},"classes/UpdateAdminDto.html":{},"classes/UpdateAlbumDto.html":{},"classes/UpdateDeliveryStatusDto.html":{},"classes/UpdateLeadDto.html":{},"classes/UpdateMercadopagoDto.html":{},"classes/UpdateOrderDto.html":{},"classes/UpdatePaymentDto.html":{},"classes/UpdatePhotoDto.html":{},"classes/UpdateSeedDto.html":{},"classes/UpdateSubscriptionDto.html":{},"classes/UpdateUserDto.html":{}},"body":{"classes/Admin.html":{},"classes/AdminAlbumByIdDto.html":{},"controllers/AdminAlbumController.html":{},"classes/AdminAlbumDto.html":{},"injectables/AdminAlbumService.html":{},"modules/AdminModule.html":{},"controllers/AdminOrderController.html":{},"injectables/AdminOrderService.html":{},"controllers/AdminUserController.html":{},"classes/AdminUserDto.html":{},"injectables/AdminUserService.html":{},"entities/Album.html":{},"controllers/AlbumAccessController.html":{},"injectables/AlbumAccessService.html":{},"controllers/AlbumController.html":{},"modules/AlbumModule.html":{},"injectables/AlbumService.html":{},"classes/AlbumSummaryDto.html":{},"modules/AppModule.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseUserDto.html":{},"controllers/BuyerOrdersController.html":{},"injectables/BuyerOrdersService.html":{},"modules/CommonModule.html":{},"classes/CreateAdminDto.html":{},"classes/CreateAlbumDto.html":{},"classes/CreateLeadDto.html":{},"classes/CreateMercadopagoDto.html":{},"classes/CreateOrderDto.html":{},"classes/CreatePaymentAccountDto.html":{},"classes/CreatePhotoDto.html":{},"classes/CreateSeedDto.html":{},"classes/CreateSubscriptionDto.html":{},"classes/CreateSubscriptionOrderDto.html":{},"classes/CreateUserDto.html":{},"controllers/FilesController.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"entities/Lead.html":{},"controllers/LeadController.html":{},"modules/LeadModule.html":{},"injectables/LeadService.html":{},"classes/LoginDto.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"classes/Mercadopago.html":{},"controllers/MercadopagoController.html":{},"modules/MercadopagoModule.html":{},"injectables/MercadopagoService.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"classes/OrderItemDto.html":{},"classes/OrderItemResponseDto.html":{},"classes/OrderResponseDto.html":{},"modules/OrdersModule.html":{},"classes/PaginationDto.html":{},"injectables/PasswordResetService.html":{},"entities/PasswordResetToken.html":{},"entities/PaymentAccount.html":{},"controllers/PaymentController.html":{},"modules/PaymentModule.html":{},"injectables/PaymentService.html":{},"entities/Photo.html":{},"controllers/PhotoController.html":{},"modules/PhotoModule.html":{},"injectables/PhotoService.html":{},"controllers/PhotographerOrdersController.html":{},"injectables/PhotographerOrdersService.html":{},"classes/PriceOptionDto.html":{},"guards/RolesGuard.html":{},"classes/Seed.html":{},"controllers/SeedController.html":{},"modules/SeedModule.html":{},"injectables/SeedService.html":{},"entities/Subscription.html":{},"controllers/SubscriptionController.html":{},"modules/SubscriptionModule.html":{},"entities/SubscriptionOrder.html":{},"entities/SubscriptionPlan.html":{},"injectables/SubscriptionService.html":{},"classes/UpdateAdminDto.html":{},"classes/UpdateAlbumDto.html":{},"classes/UpdateDeliveryStatusDto.html":{},"classes/UpdateLeadDto.html":{},"classes/UpdateMercadopagoDto.html":{},"classes/UpdateOrderDto.html":{},"classes/UpdatePaymentDto.html":{},"classes/UpdatePhotoDto.html":{},"classes/UpdateSeedDto.html":{},"classes/UpdateSubscriptionDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/Admin.html":{},"classes/AdminAlbumByIdDto.html":{},"classes/AdminAlbumDto.html":{},"classes/AdminUserDto.html":{},"classes/AlbumSummaryDto.html":{},"classes/Auth.html":{},"classes/BaseUserDto.html":{},"classes/CreateAdminDto.html":{},"classes/CreateAlbumDto.html":{},"classes/CreateLeadDto.html":{},"classes/CreateMercadopagoDto.html":{},"classes/CreateOrderDto.html":{},"classes/CreatePaymentAccountDto.html":{},"classes/CreatePhotoDto.html":{},"classes/CreateSeedDto.html":{},"classes/CreateSubscriptionDto.html":{},"classes/CreateSubscriptionOrderDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"classes/Mercadopago.html":{},"classes/OrderItemDto.html":{},"classes/OrderItemResponseDto.html":{},"classes/OrderResponseDto.html":{},"classes/PaginationDto.html":{},"classes/PriceOptionDto.html":{},"classes/Seed.html":{},"classes/UpdateAdminDto.html":{},"classes/UpdateAlbumDto.html":{},"classes/UpdateDeliveryStatusDto.html":{},"classes/UpdateLeadDto.html":{},"classes/UpdateMercadopagoDto.html":{},"classes/UpdateOrderDto.html":{},"classes/UpdatePaymentDto.html":{},"classes/UpdatePhotoDto.html":{},"classes/UpdateSeedDto.html":{},"classes/UpdateSubscriptionDto.html":{},"classes/UpdateUserDto.html":{},"overview.html":{}}}],["cleanorderid",{"_index":1269,"title":{},"body":{"injectables/BuyerOrdersService.html":{}}}],["clicks",{"_index":2726,"title":{},"body":{"index.html":{}}}],["client_id",{"_index":1951,"title":{},"body":{"injectables/PaymentService.html":{}}}],["client_secret",{"_index":1949,"title":{},"body":{"injectables/PaymentService.html":{}}}],["clientemail",{"_index":17,"title":{},"body":{"classes/AdminAlbumByIdDto.html":{},"injectables/AdminUserService.html":{},"entities/Album.html":{},"injectables/AlbumService.html":{},"classes/CreateAlbumDto.html":{},"classes/PriceOptionDto.html":{}}}],["clientid",{"_index":222,"title":{},"body":{"controllers/AdminOrderController.html":{},"injectables/AdminOrderService.html":{}}}],["clientphonenumber",{"_index":18,"title":{},"body":{"classes/AdminAlbumByIdDto.html":{},"injectables/AdminUserService.html":{},"entities/Album.html":{},"injectables/AlbumService.html":{},"classes/CreateAlbumDto.html":{},"classes/PriceOptionDto.html":{}}}],["cloud",{"_index":2710,"title":{},"body":{"index.html":{}}}],["cloud_name",{"_index":1461,"title":{},"body":{"injectables/FilesService.html":{}}}],["cloudinary",{"_index":764,"title":{},"body":{"injectables/AlbumService.html":{},"injectables/FilesService.html":{},"injectables/PhotoService.html":{},"dependencies.html":{}}}],["cloudinary.config",{"_index":1460,"title":{},"body":{"injectables/FilesService.html":{}}}],["cloudinary.uploader.destroy(publicid",{"_index":1517,"title":{},"body":{"injectables/FilesService.html":{}}}],["cloudinary.uploader.upload_stream",{"_index":1494,"title":{},"body":{"injectables/FilesService.html":{}}}],["cluster_adminmodule",{"_index":192,"title":{},"body":{"modules/AdminModule.html":{},"overview.html":{}}}],["cluster_adminmodule_providers",{"_index":193,"title":{},"body":{"modules/AdminModule.html":{},"overview.html":{}}}],["cluster_albummodule",{"_index":676,"title":{},"body":{"modules/AlbumModule.html":{},"overview.html":{}}}],["cluster_albummodule_exports",{"_index":677,"title":{},"body":{"modules/AlbumModule.html":{},"overview.html":{}}}],["cluster_albummodule_imports",{"_index":679,"title":{},"body":{"modules/AlbumModule.html":{},"overview.html":{}}}],["cluster_albummodule_providers",{"_index":678,"title":{},"body":{"modules/AlbumModule.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":781,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":782,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":945,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":946,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":947,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_filesmodule",{"_index":1442,"title":{},"body":{"modules/FilesModule.html":{},"overview.html":{}}}],["cluster_filesmodule_exports",{"_index":1444,"title":{},"body":{"modules/FilesModule.html":{},"overview.html":{}}}],["cluster_filesmodule_imports",{"_index":1445,"title":{},"body":{"modules/FilesModule.html":{}}}],["cluster_filesmodule_providers",{"_index":1443,"title":{},"body":{"modules/FilesModule.html":{},"overview.html":{}}}],["cluster_leadmodule",{"_index":1534,"title":{},"body":{"modules/LeadModule.html":{},"overview.html":{}}}],["cluster_leadmodule_providers",{"_index":1535,"title":{},"body":{"modules/LeadModule.html":{},"overview.html":{}}}],["cluster_mailmodule",{"_index":1560,"title":{},"body":{"modules/MailModule.html":{},"overview.html":{}}}],["cluster_mailmodule_exports",{"_index":1561,"title":{},"body":{"modules/MailModule.html":{},"overview.html":{}}}],["cluster_mailmodule_providers",{"_index":1562,"title":{},"body":{"modules/MailModule.html":{},"overview.html":{}}}],["cluster_mercadopagomodule",{"_index":1659,"title":{},"body":{"modules/MercadopagoModule.html":{},"overview.html":{}}}],["cluster_mercadopagomodule_exports",{"_index":1662,"title":{},"body":{"modules/MercadopagoModule.html":{},"overview.html":{}}}],["cluster_mercadopagomodule_imports",{"_index":1660,"title":{},"body":{"modules/MercadopagoModule.html":{}}}],["cluster_mercadopagomodule_providers",{"_index":1661,"title":{},"body":{"modules/MercadopagoModule.html":{},"overview.html":{}}}],["cluster_ordersmodule",{"_index":1824,"title":{},"body":{"modules/OrdersModule.html":{},"overview.html":{}}}],["cluster_ordersmodule_exports",{"_index":1826,"title":{},"body":{"modules/OrdersModule.html":{},"overview.html":{}}}],["cluster_ordersmodule_imports",{"_index":1825,"title":{},"body":{"modules/OrdersModule.html":{}}}],["cluster_ordersmodule_providers",{"_index":1827,"title":{},"body":{"modules/OrdersModule.html":{},"overview.html":{}}}],["cluster_paymentmodule",{"_index":1916,"title":{},"body":{"modules/PaymentModule.html":{},"overview.html":{}}}],["cluster_paymentmodule_exports",{"_index":1919,"title":{},"body":{"modules/PaymentModule.html":{},"overview.html":{}}}],["cluster_paymentmodule_imports",{"_index":1918,"title":{},"body":{"modules/PaymentModule.html":{}}}],["cluster_paymentmodule_providers",{"_index":1917,"title":{},"body":{"modules/PaymentModule.html":{},"overview.html":{}}}],["cluster_photomodule",{"_index":2035,"title":{},"body":{"modules/PhotoModule.html":{},"overview.html":{}}}],["cluster_photomodule_exports",{"_index":2036,"title":{},"body":{"modules/PhotoModule.html":{},"overview.html":{}}}],["cluster_photomodule_imports",{"_index":2038,"title":{},"body":{"modules/PhotoModule.html":{}}}],["cluster_photomodule_providers",{"_index":2037,"title":{},"body":{"modules/PhotoModule.html":{},"overview.html":{}}}],["cluster_seedmodule",{"_index":2225,"title":{},"body":{"modules/SeedModule.html":{},"overview.html":{}}}],["cluster_seedmodule_imports",{"_index":2226,"title":{},"body":{"modules/SeedModule.html":{}}}],["cluster_seedmodule_providers",{"_index":2227,"title":{},"body":{"modules/SeedModule.html":{},"overview.html":{}}}],["cluster_subscriptionmodule",{"_index":2352,"title":{},"body":{"modules/SubscriptionModule.html":{},"overview.html":{}}}],["cluster_subscriptionmodule_exports",{"_index":2355,"title":{},"body":{"modules/SubscriptionModule.html":{},"overview.html":{}}}],["cluster_subscriptionmodule_imports",{"_index":2354,"title":{},"body":{"modules/SubscriptionModule.html":{}}}],["cluster_subscriptionmodule_providers",{"_index":2353,"title":{},"body":{"modules/SubscriptionModule.html":{},"overview.html":{}}}],["cluster_usermodule",{"_index":2542,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_exports",{"_index":2543,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_providers",{"_index":2544,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["code",{"_index":1910,"title":{},"body":{"controllers/PaymentController.html":{},"injectables/PaymentService.html":{}}}],["column",{"_index":488,"title":{},"body":{"entities/Album.html":{},"entities/Lead.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"entities/PasswordResetToken.html":{},"entities/PaymentAccount.html":{},"entities/Photo.html":{},"entities/Subscription.html":{},"entities/SubscriptionOrder.html":{},"entities/SubscriptionPlan.html":{},"entities/User.html":{}}}],["column('decimal",{"_index":1761,"title":{},"body":{"entities/Order.html":{},"entities/OrderItem.html":{},"entities/SubscriptionOrder.html":{}}}],["column('float",{"_index":518,"title":{},"body":{"entities/Album.html":{},"entities/Photo.html":{}}}],["column('int",{"_index":1792,"title":{},"body":{"entities/OrderItem.html":{}}}],["column('jsonb",{"_index":520,"title":{},"body":{"entities/Album.html":{}}}],["column({default",{"_index":502,"title":{},"body":{"entities/Album.html":{},"entities/PasswordResetToken.html":{},"entities/Subscription.html":{}}}],["column({nullable",{"_index":497,"title":{},"body":{"entities/Album.html":{},"entities/OrderItem.html":{},"entities/SubscriptionPlan.html":{},"entities/User.html":{}}}],["column({type",{"_index":493,"title":{},"body":{"entities/Album.html":{},"entities/Order.html":{},"entities/PaymentAccount.html":{},"entities/Subscription.html":{},"entities/SubscriptionOrder.html":{},"entities/SubscriptionPlan.html":{},"entities/User.html":{}}}],["column({unique",{"_index":523,"title":{},"body":{"entities/Album.html":{},"entities/Lead.html":{},"entities/User.html":{}}}],["columna",{"_index":127,"title":{},"body":{"injectables/AdminAlbumService.html":{}}}],["come",{"_index":2733,"title":{},"body":{"index.html":{}}}],["comisión",{"_index":1221,"title":{},"body":{"injectables/BuyerOrdersService.html":{},"miscellaneous/variables.html":{}}}],["common/decorators/roles.decorator",{"_index":241,"title":{},"body":{"controllers/AdminOrderController.html":{},"controllers/AdminUserController.html":{}}}],["common/dtos/pagination.dto",{"_index":655,"title":{},"body":{"controllers/AlbumController.html":{},"injectables/AlbumService.html":{}}}],["common/enums/roles.enum",{"_index":243,"title":{},"body":{"controllers/AdminOrderController.html":{},"controllers/AdminUserController.html":{}}}],["common/guards/auth.guard",{"_index":239,"title":{},"body":{"controllers/AdminOrderController.html":{},"controllers/AdminUserController.html":{},"controllers/AlbumController.html":{},"controllers/FilesController.html":{},"controllers/UserController.html":{}}}],["common/guards/roles.guard",{"_index":245,"title":{},"body":{"controllers/AdminOrderController.html":{}}}],["commonmodule",{"_index":1318,"title":{"modules/CommonModule.html":{}},"body":{"modules/CommonModule.html":{},"modules.html":{}}}],["completado",{"_index":2266,"title":{},"body":{"injectables/SeedService.html":{}}}],["compra",{"_index":1288,"title":{},"body":{"injectables/BuyerOrdersService.html":{},"injectables/MailService.html":{},"injectables/MercadopagoService.html":{}}}],["comprador",{"_index":1075,"title":{},"body":{"controllers/BuyerOrdersController.html":{},"injectables/BuyerOrdersService.html":{},"injectables/SeedService.html":{}}}],["compradores",{"_index":2251,"title":{},"body":{"injectables/SeedService.html":{}}}],["con",{"_index":594,"title":{},"body":{"injectables/AlbumAccessService.html":{},"injectables/AlbumService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/BuyerOrdersService.html":{},"controllers/MercadopagoController.html":{},"injectables/MercadopagoService.html":{},"injectables/PasswordResetService.html":{},"injectables/PhotographerOrdersService.html":{},"injectables/SeedService.html":{},"injectables/SubscriptionService.html":{},"injectables/UserService.html":{}}}],["configmodule",{"_index":793,"title":{},"body":{"modules/AppModule.html":{},"modules/FilesModule.html":{},"modules/MercadopagoModule.html":{}}}],["configmodule.forroot",{"_index":810,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":1108,"title":{},"body":{"injectables/BuyerOrdersService.html":{},"injectables/MercadopagoService.html":{}}}],["configurada",{"_index":1688,"title":{},"body":{"injectables/MercadopagoService.html":{}}}],["configurado",{"_index":2413,"title":{},"body":{"injectables/SubscriptionService.html":{}}}],["confirmación",{"_index":1287,"title":{},"body":{"injectables/BuyerOrdersService.html":{},"injectables/MailService.html":{}}}],["confirmado",{"_index":1292,"title":{},"body":{"injectables/BuyerOrdersService.html":{}}}],["conflictexception",{"_index":1546,"title":{},"body":{"injectables/LeadService.html":{}}}],["conflictexception('este",{"_index":1550,"title":{},"body":{"injectables/LeadService.html":{}}}],["console",{"_index":1683,"title":{},"body":{"injectables/MercadopagoService.html":{},"injectables/PhotoService.html":{}}}],["console.error",{"_index":1226,"title":{},"body":{"injectables/BuyerOrdersService.html":{},"injectables/MercadopagoService.html":{},"injectables/SubscriptionService.html":{}}}],["console.error('error",{"_index":1655,"title":{},"body":{"controllers/MercadopagoController.html":{},"injectables/PhotoService.html":{}}}],["console.error('firma",{"_index":1691,"title":{},"body":{"injectables/MercadopagoService.html":{}}}],["console.error(`order",{"_index":1272,"title":{},"body":{"injectables/BuyerOrdersService.html":{}}}],["console.error(`subscription",{"_index":2433,"title":{},"body":{"injectables/SubscriptionService.html":{}}}],["console.log",{"_index":1248,"title":{},"body":{"injectables/BuyerOrdersService.html":{},"controllers/MercadopagoController.html":{},"injectables/MercadopagoService.html":{},"injectables/PhotoService.html":{},"injectables/SubscriptionService.html":{}}}],["console.log('almacenamiento",{"_index":2114,"title":{},"body":{"injectables/PhotoService.html":{}}}],["console.log('firma",{"_index":1735,"title":{},"body":{"injectables/MercadopagoService.html":{}}}],["console.log('respuesta",{"_index":1957,"title":{},"body":{"injectables/PaymentService.html":{}}}],["console.log('tamaño",{"_index":2116,"title":{},"body":{"injectables/PhotoService.html":{}}}],["console.log('term",{"_index":667,"title":{},"body":{"controllers/AlbumController.html":{}}}],["console.log('usuario",{"_index":2113,"title":{},"body":{"injectables/PhotoService.html":{}}}],["console.log('webhook",{"_index":1694,"title":{},"body":{"injectables/MercadopagoService.html":{}}}],["console.log(`order",{"_index":1278,"title":{},"body":{"injectables/BuyerOrdersService.html":{}}}],["console.log(`plan",{"_index":2286,"title":{},"body":{"injectables/SeedService.html":{}}}],["console.log(`usuario",{"_index":2265,"title":{},"body":{"injectables/SeedService.html":{}}}],["console.warn('external_reference",{"_index":1746,"title":{},"body":{"injectables/MercadopagoService.html":{}}}],["console.warn('pago",{"_index":1702,"title":{},"body":{"injectables/MercadopagoService.html":{}}}],["const",{"_index":116,"title":{},"body":{"injectables/AdminAlbumService.html":{},"injectables/AdminOrderService.html":{},"controllers/AdminUserController.html":{},"injectables/AdminUserService.html":{},"controllers/AlbumAccessController.html":{},"injectables/AlbumAccessService.html":{},"controllers/AlbumController.html":{},"injectables/AlbumService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"controllers/BuyerOrdersController.html":{},"injectables/BuyerOrdersService.html":{},"controllers/FilesController.html":{},"injectables/FilesService.html":{},"injectables/LeadService.html":{},"injectables/MailService.html":{},"controllers/MercadopagoController.html":{},"injectables/MercadopagoService.html":{},"injectables/PasswordResetService.html":{},"controllers/PaymentController.html":{},"injectables/PaymentService.html":{},"controllers/PhotoController.html":{},"injectables/PhotoService.html":{},"controllers/PhotographerOrdersController.html":{},"injectables/PhotographerOrdersService.html":{},"guards/RolesGuard.html":{},"injectables/SeedService.html":{},"controllers/SubscriptionController.html":{},"injectables/SubscriptionService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":99,"title":{},"body":{"injectables/AdminAlbumService.html":{},"injectables/AdminOrderService.html":{},"controllers/AdminUserController.html":{},"injectables/AdminUserService.html":{},"injectables/AlbumAccessService.html":{},"injectables/AlbumService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/BuyerOrdersService.html":{},"injectables/FilesService.html":{},"injectables/LeadService.html":{},"injectables/MailService.html":{},"injectables/MercadopagoService.html":{},"injectables/PasswordResetService.html":{},"injectables/PaymentService.html":{},"injectables/PhotoService.html":{},"injectables/PhotographerOrdersService.html":{},"guards/RolesGuard.html":{},"injectables/SeedService.html":{},"injectables/SubscriptionService.html":{},"injectables/UserService.html":{}}}],["constructor(albumrepo",{"_index":100,"title":{},"body":{"injectables/AdminAlbumService.html":{},"injectables/AlbumAccessService.html":{},"injectables/AlbumService.html":{}}}],["constructor(httpservice",{"_index":1673,"title":{},"body":{"injectables/MercadopagoService.html":{}}}],["constructor(jwtservice",{"_index":908,"title":{},"body":{"guards/AuthGuard.html":{}}}],["constructor(leadrepo",{"_index":1541,"title":{},"body":{"injectables/LeadService.html":{}}}],["constructor(orderrepo",{"_index":263,"title":{},"body":{"injectables/AdminOrderService.html":{}}}],["constructor(orderrepository",{"_index":2172,"title":{},"body":{"injectables/PhotographerOrdersService.html":{}}}],["constructor(paymentaccountrepo",{"_index":1928,"title":{},"body":{"injectables/PaymentService.html":{}}}],["constructor(photorepository",{"_index":2048,"title":{},"body":{"injectables/PhotoService.html":{}}}],["constructor(private",{"_index":69,"title":{},"body":{"controllers/AdminAlbumController.html":{},"controllers/AdminOrderController.html":{},"controllers/AlbumAccessController.html":{},"controllers/AlbumController.html":{},"guards/AuthGuard.html":{},"controllers/BuyerOrdersController.html":{},"controllers/FilesController.html":{},"injectables/FilesService.html":{},"controllers/LeadController.html":{},"controllers/MercadopagoController.html":{},"controllers/PaymentController.html":{},"controllers/PhotoController.html":{},"controllers/PhotographerOrdersController.html":{},"guards/RolesGuard.html":{},"controllers/SeedController.html":{},"controllers/SubscriptionController.html":{},"controllers/UserController.html":{}}}],["constructor(reflector",{"_index":2195,"title":{},"body":{"guards/RolesGuard.html":{}}}],["constructor(resetrepo",{"_index":1847,"title":{},"body":{"injectables/PasswordResetService.html":{}}}],["constructor(subscriptionrepo",{"_index":2388,"title":{},"body":{"injectables/SubscriptionService.html":{}}}],["constructor(userrepo",{"_index":383,"title":{},"body":{"injectables/AdminUserService.html":{},"injectables/UserService.html":{}}}],["constructor(userrepository",{"_index":1103,"title":{},"body":{"injectables/BuyerOrdersService.html":{}}}],["constructor(userservice",{"_index":959,"title":{},"body":{"injectables/AuthService.html":{},"injectables/FilesService.html":{},"injectables/SeedService.html":{}}}],["construimos",{"_index":1723,"title":{},"body":{"injectables/MercadopagoService.html":{}}}],["consumetoken",{"_index":1845,"title":{},"body":{"injectables/PasswordResetService.html":{}}}],["consumetoken(tokenid",{"_index":1850,"title":{},"body":{"injectables/PasswordResetService.html":{}}}],["contador",{"_index":712,"title":{},"body":{"injectables/AlbumService.html":{},"injectables/PhotoService.html":{}}}],["contar",{"_index":121,"title":{},"body":{"injectables/AdminAlbumService.html":{}}}],["contenido",{"_index":1645,"title":{},"body":{"controllers/MercadopagoController.html":{}}}],["content",{"_index":1258,"title":{},"body":{"injectables/BuyerOrdersService.html":{},"injectables/SubscriptionService.html":{}}}],["context",{"_index":914,"title":{},"body":{"guards/AuthGuard.html":{},"guards/RolesGuard.html":{}}}],["context.getclass",{"_index":2205,"title":{},"body":{"guards/RolesGuard.html":{}}}],["context.gethandler",{"_index":2204,"title":{},"body":{"guards/RolesGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":918,"title":{},"body":{"guards/AuthGuard.html":{},"guards/RolesGuard.html":{}}}],["continue",{"_index":2260,"title":{},"body":{"injectables/SeedService.html":{}}}],["contraseña",{"_index":543,"title":{},"body":{"entities/Album.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/MailService.html":{},"injectables/UserService.html":{}}}],["controller",{"_index":49,"title":{"controllers/AdminAlbumController.html":{},"controllers/AdminOrderController.html":{},"controllers/AdminUserController.html":{},"controllers/AlbumAccessController.html":{},"controllers/AlbumController.html":{},"controllers/AuthController.html":{},"controllers/BuyerOrdersController.html":{},"controllers/FilesController.html":{},"controllers/LeadController.html":{},"controllers/MercadopagoController.html":{},"controllers/PaymentController.html":{},"controllers/PhotoController.html":{},"controllers/PhotographerOrdersController.html":{},"controllers/SeedController.html":{},"controllers/SubscriptionController.html":{},"controllers/UserController.html":{}},"body":{"controllers/AdminAlbumController.html":{},"controllers/AdminOrderController.html":{},"controllers/AdminUserController.html":{},"controllers/AlbumAccessController.html":{},"controllers/AlbumController.html":{},"controllers/AuthController.html":{},"controllers/BuyerOrdersController.html":{},"controllers/FilesController.html":{},"controllers/LeadController.html":{},"controllers/MercadopagoController.html":{},"controllers/PaymentController.html":{},"controllers/PhotoController.html":{},"controllers/PhotographerOrdersController.html":{},"controllers/SeedController.html":{},"controllers/SubscriptionController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["controller('admin",{"_index":354,"title":{},"body":{"controllers/AdminUserController.html":{}}}],["controller('admin/albums",{"_index":68,"title":{},"body":{"controllers/AdminAlbumController.html":{}}}],["controller('admin/orders",{"_index":246,"title":{},"body":{"controllers/AdminOrderController.html":{}}}],["controller('album",{"_index":568,"title":{},"body":{"controllers/AlbumAccessController.html":{},"controllers/AlbumController.html":{}}}],["controller('auth",{"_index":869,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('buyer/orders",{"_index":1068,"title":{},"body":{"controllers/BuyerOrdersController.html":{}}}],["controller('files",{"_index":1428,"title":{},"body":{"controllers/FilesController.html":{}}}],["controller('leads",{"_index":1531,"title":{},"body":{"controllers/LeadController.html":{}}}],["controller('mercadopago",{"_index":1632,"title":{},"body":{"controllers/MercadopagoController.html":{}}}],["controller('payment",{"_index":1912,"title":{},"body":{"controllers/PaymentController.html":{}}}],["controller('photo",{"_index":2011,"title":{},"body":{"controllers/PhotoController.html":{}}}],["controller('photographer/orders",{"_index":2161,"title":{},"body":{"controllers/PhotographerOrdersController.html":{}}}],["controller('seed",{"_index":2222,"title":{},"body":{"controllers/SeedController.html":{}}}],["controller('subscriptions",{"_index":2330,"title":{},"body":{"controllers/SubscriptionController.html":{}}}],["controller('users",{"_index":2538,"title":{},"body":{"controllers/UserController.html":{}}}],["controllers",{"_index":51,"title":{},"body":{"controllers/AdminAlbumController.html":{},"modules/AdminModule.html":{},"controllers/AdminOrderController.html":{},"controllers/AdminUserController.html":{},"controllers/AlbumAccessController.html":{},"controllers/AlbumController.html":{},"modules/AlbumModule.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/BuyerOrdersController.html":{},"controllers/FilesController.html":{},"modules/FilesModule.html":{},"controllers/LeadController.html":{},"modules/LeadModule.html":{},"controllers/MercadopagoController.html":{},"modules/MercadopagoModule.html":{},"modules/OrdersModule.html":{},"controllers/PaymentController.html":{},"modules/PaymentModule.html":{},"controllers/PhotoController.html":{},"modules/PhotoModule.html":{},"controllers/PhotographerOrdersController.html":{},"controllers/SeedController.html":{},"modules/SeedModule.html":{},"controllers/SubscriptionController.html":{},"modules/SubscriptionModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["cookie",{"_index":889,"title":{},"body":{"controllers/AuthController.html":{}}}],["correctamente",{"_index":731,"title":{},"body":{"injectables/AlbumService.html":{},"controllers/AuthController.html":{},"controllers/MercadopagoController.html":{},"injectables/PhotoService.html":{}}}],["correcto",{"_index":1217,"title":{},"body":{"injectables/BuyerOrdersService.html":{}}}],["correo",{"_index":1551,"title":{},"body":{"injectables/LeadService.html":{},"injectables/MailService.html":{}}}],["counts",{"_index":305,"title":{},"body":{"injectables/AdminOrderService.html":{}}}],["courses",{"_index":2748,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":2582,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["coverurl",{"_index":171,"title":{},"body":{"interfaces/AdminAlbumSummaryDto.html":{},"interfaces/AdminPhotographerByIdDto.html":{},"injectables/AdminUserService.html":{}}}],["crea",{"_index":2443,"title":{},"body":{"injectables/SubscriptionService.html":{}}}],["creada",{"_index":1260,"title":{},"body":{"injectables/BuyerOrdersService.html":{},"injectables/SubscriptionService.html":{}}}],["creado",{"_index":730,"title":{},"body":{"injectables/AlbumService.html":{},"injectables/SeedService.html":{}}}],["creamos",{"_index":1093,"title":{},"body":{"controllers/BuyerOrdersController.html":{}}}],["crear",{"_index":720,"title":{},"body":{"injectables/AlbumService.html":{},"injectables/AuthService.html":{},"injectables/BuyerOrdersService.html":{},"injectables/PhotoService.html":{},"injectables/SubscriptionService.html":{}}}],["create",{"_index":630,"title":{},"body":{"controllers/AlbumController.html":{},"injectables/AlbumService.html":{},"controllers/LeadController.html":{},"injectables/LeadService.html":{},"classes/UpdateAdminDto.html":{},"classes/UpdateAlbumDto.html":{},"classes/UpdateLeadDto.html":{},"classes/UpdateMercadopagoDto.html":{},"classes/UpdateOrderDto.html":{},"classes/UpdatePaymentDto.html":{},"classes/UpdatePhotoDto.html":{},"classes/UpdateSeedDto.html":{},"classes/UpdateSubscriptionDto.html":{},"injectables/UserService.html":{}}}],["create(@body",{"_index":661,"title":{},"body":{"controllers/AlbumController.html":{},"controllers/LeadController.html":{}}}],["create(createalbumdto",{"_index":634,"title":{},"body":{"controllers/AlbumController.html":{}}}],["create(data",{"_index":2552,"title":{},"body":{"injectables/UserService.html":{}}}],["create(dto",{"_index":694,"title":{},"body":{"injectables/AlbumService.html":{},"controllers/LeadController.html":{},"injectables/LeadService.html":{}}}],["createadmindto",{"_index":1320,"title":{"classes/CreateAdminDto.html":{}},"body":{"classes/CreateAdminDto.html":{},"classes/UpdateAdminDto.html":{},"coverage.html":{}}}],["createalbumdto",{"_index":635,"title":{"classes/CreateAlbumDto.html":{}},"body":{"controllers/AlbumController.html":{},"injectables/AlbumService.html":{},"classes/CreateAlbumDto.html":{},"classes/PriceOptionDto.html":{},"classes/UpdateAlbumDto.html":{},"coverage.html":{}}}],["createdat",{"_index":48,"title":{},"body":{"classes/AdminAlbumByIdDto.html":{},"injectables/AdminOrderService.html":{},"injectables/AdminUserService.html":{},"entities/Album.html":{},"injectables/AlbumAccessService.html":{},"injectables/AlbumService.html":{},"classes/AlbumSummaryDto.html":{},"injectables/BuyerOrdersService.html":{},"entities/Lead.html":{},"injectables/LeadService.html":{},"entities/Order.html":{},"classes/OrderItemResponseDto.html":{},"classes/OrderResponseDto.html":{},"entities/PasswordResetToken.html":{},"entities/PaymentAccount.html":{},"injectables/PhotographerOrdersService.html":{},"entities/Subscription.html":{},"entities/SubscriptionOrder.html":{},"injectables/SubscriptionService.html":{},"entities/User.html":{},"injectables/UserService.html":{}}}],["createdatecolumn",{"_index":491,"title":{},"body":{"entities/Album.html":{},"entities/Lead.html":{},"entities/Order.html":{},"entities/PasswordResetToken.html":{},"entities/PaymentAccount.html":{},"entities/Subscription.html":{},"entities/SubscriptionOrder.html":{},"entities/User.html":{}}}],["createhmac",{"_index":1684,"title":{},"body":{"injectables/MercadopagoService.html":{}}}],["createhmac('sha256",{"_index":1732,"title":{},"body":{"injectables/MercadopagoService.html":{}}}],["createinitial",{"_index":2306,"title":{},"body":{"controllers/SubscriptionController.html":{}}}],["createinitial(@req",{"_index":2332,"title":{},"body":{"controllers/SubscriptionController.html":{}}}],["createinitial(req",{"_index":2312,"title":{},"body":{"controllers/SubscriptionController.html":{}}}],["createinitialsubscription",{"_index":2383,"title":{},"body":{"injectables/SubscriptionService.html":{}}}],["createinitialsubscription(userid",{"_index":2395,"title":{},"body":{"injectables/SubscriptionService.html":{}}}],["createleaddto",{"_index":1360,"title":{"classes/CreateLeadDto.html":{}},"body":{"classes/CreateLeadDto.html":{},"controllers/LeadController.html":{},"injectables/LeadService.html":{},"classes/UpdateLeadDto.html":{},"coverage.html":{}}}],["createmercadopagodto",{"_index":1364,"title":{"classes/CreateMercadopagoDto.html":{}},"body":{"classes/CreateMercadopagoDto.html":{},"classes/UpdateMercadopagoDto.html":{},"coverage.html":{}}}],["createorder",{"_index":1044,"title":{},"body":{"controllers/BuyerOrdersController.html":{},"injectables/BuyerOrdersService.html":{},"controllers/SubscriptionController.html":{}}}],["createorder(@body",{"_index":1070,"title":{},"body":{"controllers/BuyerOrdersController.html":{}}}],["createorder(@req",{"_index":2344,"title":{},"body":{"controllers/SubscriptionController.html":{}}}],["createorder(dto",{"_index":1050,"title":{},"body":{"controllers/BuyerOrdersController.html":{},"injectables/BuyerOrdersService.html":{}}}],["createorder(req",{"_index":2316,"title":{},"body":{"controllers/SubscriptionController.html":{}}}],["createorderdto",{"_index":1051,"title":{"classes/CreateOrderDto.html":{}},"body":{"controllers/BuyerOrdersController.html":{},"injectables/BuyerOrdersService.html":{},"classes/CreateOrderDto.html":{},"classes/OrderItemDto.html":{},"classes/UpdateOrderDto.html":{},"coverage.html":{}}}],["createpayment",{"_index":1045,"title":{},"body":{"controllers/BuyerOrdersController.html":{}}}],["createpayment(@param('id",{"_index":1089,"title":{},"body":{"controllers/BuyerOrdersController.html":{}}}],["createpayment(orderid",{"_index":1053,"title":{},"body":{"controllers/BuyerOrdersController.html":{}}}],["createpaymentaccountdto",{"_index":1377,"title":{"classes/CreatePaymentAccountDto.html":{}},"body":{"classes/CreatePaymentAccountDto.html":{},"classes/UpdatePaymentDto.html":{},"coverage.html":{}}}],["createpaymentpreference",{"_index":1099,"title":{},"body":{"injectables/BuyerOrdersService.html":{},"controllers/SubscriptionController.html":{}}}],["createpaymentpreference(@req",{"_index":2350,"title":{},"body":{"controllers/SubscriptionController.html":{}}}],["createpaymentpreference(orderid",{"_index":1114,"title":{},"body":{"injectables/BuyerOrdersService.html":{}}}],["createpaymentpreference(req",{"_index":2319,"title":{},"body":{"controllers/SubscriptionController.html":{}}}],["createphotodto",{"_index":1390,"title":{"classes/CreatePhotoDto.html":{}},"body":{"classes/CreatePhotoDto.html":{},"classes/UpdatePhotoDto.html":{},"coverage.html":{}}}],["createquerybuilder('order",{"_index":159,"title":{},"body":{"injectables/AdminAlbumService.html":{},"injectables/AdminOrderService.html":{}}}],["createquerybuilder('photo",{"_index":1148,"title":{},"body":{"injectables/BuyerOrdersService.html":{}}}],["createquerybuilder('user",{"_index":432,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["createseeddto",{"_index":1395,"title":{"classes/CreateSeedDto.html":{}},"body":{"classes/CreateSeedDto.html":{},"classes/UpdateSeedDto.html":{},"coverage.html":{}}}],["createsubscriptiondto",{"_index":1398,"title":{"classes/CreateSubscriptionDto.html":{}},"body":{"classes/CreateSubscriptionDto.html":{},"classes/UpdateSubscriptionDto.html":{},"coverage.html":{}}}],["createsubscriptionorder",{"_index":2384,"title":{},"body":{"injectables/SubscriptionService.html":{}}}],["createsubscriptionorder(userid",{"_index":2398,"title":{},"body":{"injectables/SubscriptionService.html":{}}}],["createsubscriptionorderdto",{"_index":1401,"title":{"classes/CreateSubscriptionOrderDto.html":{}},"body":{"classes/CreateSubscriptionOrderDto.html":{},"controllers/SubscriptionController.html":{},"coverage.html":{}}}],["createsubscriptionpayment",{"_index":2385,"title":{},"body":{"injectables/SubscriptionService.html":{}}}],["createsubscriptionpayment(orderid",{"_index":2400,"title":{},"body":{"injectables/SubscriptionService.html":{}}}],["createtoken",{"_index":1846,"title":{},"body":{"injectables/PasswordResetService.html":{}}}],["createtoken(userid",{"_index":1853,"title":{},"body":{"injectables/PasswordResetService.html":{}}}],["createuserdto",{"_index":852,"title":{"classes/CreateUserDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"coverage.html":{}}}],["credentials",{"_index":601,"title":{},"body":{"injectables/AlbumAccessService.html":{},"injectables/AuthService.html":{},"injectables/SeedService.html":{},"entities/User.html":{}}}],["crypto",{"_index":1459,"title":{},"body":{"injectables/FilesService.html":{},"injectables/MercadopagoService.html":{}}}],["cuenta",{"_index":1200,"title":{},"body":{"injectables/BuyerOrdersService.html":{},"injectables/PaymentService.html":{}}}],["currency_id",{"_index":1210,"title":{},"body":{"injectables/BuyerOrdersService.html":{},"injectables/SubscriptionService.html":{}}}],["data",{"_index":1253,"title":{},"body":{"injectables/BuyerOrdersService.html":{},"injectables/MailService.html":{},"injectables/MercadopagoService.html":{},"injectables/PaymentService.html":{},"injectables/SubscriptionService.html":{},"injectables/UserService.html":{}}}],["data.access_token",{"_index":1963,"title":{},"body":{"injectables/PaymentService.html":{}}}],["data.expires_in",{"_index":1969,"title":{},"body":{"injectables/PaymentService.html":{}}}],["data.id",{"_index":1264,"title":{},"body":{"injectables/BuyerOrdersService.html":{},"injectables/SubscriptionService.html":{}}}],["data.init_point",{"_index":1262,"title":{},"body":{"injectables/BuyerOrdersService.html":{},"injectables/SubscriptionService.html":{}}}],["data.refresh_token",{"_index":1965,"title":{},"body":{"injectables/PaymentService.html":{}}}],["data.user_id",{"_index":1967,"title":{},"body":{"injectables/PaymentService.html":{}}}],["data?.id",{"_index":1611,"title":{},"body":{"injectables/MailService.html":{}}}],["date",{"_index":34,"title":{},"body":{"classes/AdminAlbumByIdDto.html":{},"entities/Album.html":{},"injectables/AlbumService.html":{},"classes/AlbumSummaryDto.html":{},"injectables/AuthService.html":{},"classes/CreatePaymentAccountDto.html":{},"entities/Lead.html":{},"entities/Order.html":{},"classes/OrderItemResponseDto.html":{},"classes/OrderResponseDto.html":{},"entities/PasswordResetToken.html":{},"entities/PaymentAccount.html":{},"entities/Subscription.html":{},"entities/SubscriptionOrder.html":{},"injectables/SubscriptionService.html":{},"entities/User.html":{},"injectables/UserService.html":{}}}],["date(album.eventdate",{"_index":469,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["date(date.now",{"_index":1867,"title":{},"body":{"injectables/PasswordResetService.html":{},"injectables/PaymentService.html":{}}}],["date(now.setmonth(now.getmonth",{"_index":2452,"title":{},"body":{"injectables/SubscriptionService.html":{}}}],["date(payload.exp",{"_index":936,"title":{},"body":{"guards/AuthGuard.html":{}}}],["date(payload.iat",{"_index":934,"title":{},"body":{"guards/AuthGuard.html":{}}}],["datos",{"_index":1277,"title":{},"body":{"injectables/BuyerOrdersService.html":{},"entities/OrderItem.html":{}}}],["db",{"_index":606,"title":{},"body":{"injectables/AlbumAccessService.html":{},"injectables/AlbumService.html":{},"injectables/PhotoService.html":{}}}],["dbuser",{"_index":607,"title":{},"body":{"injectables/AlbumAccessService.html":{}}}],["dbuser.id",{"_index":615,"title":{},"body":{"injectables/AlbumAccessService.html":{}}}],["de",{"_index":146,"title":{},"body":{"injectables/AdminAlbumService.html":{},"interfaces/AdminAlbumSummaryDto.html":{},"injectables/AdminOrderService.html":{},"interfaces/AdminPhotographerByIdDto.html":{},"injectables/AlbumService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"controllers/BuyerOrdersController.html":{},"injectables/BuyerOrdersService.html":{},"injectables/FilesService.html":{},"injectables/MailService.html":{},"injectables/MercadopagoService.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"injectables/PaymentService.html":{},"controllers/PhotoController.html":{},"injectables/PhotoService.html":{},"injectables/SeedService.html":{},"injectables/SubscriptionService.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["deactivateuser",{"_index":328,"title":{},"body":{"controllers/AdminUserController.html":{}}}],["deactivateuser(@param('id",{"_index":372,"title":{},"body":{"controllers/AdminUserController.html":{}}}],["deactivateuser(id",{"_index":337,"title":{},"body":{"controllers/AdminUserController.html":{}}}],["decimal",{"_index":2375,"title":{},"body":{"entities/SubscriptionPlan.html":{}}}],["declarations",{"_index":188,"title":{},"body":{"modules/AdminModule.html":{},"modules/AlbumModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/FilesModule.html":{},"modules/LeadModule.html":{},"modules/MailModule.html":{},"modules/MercadopagoModule.html":{},"modules/OrdersModule.html":{},"modules/PaymentModule.html":{},"modules/PhotoModule.html":{},"modules/SeedModule.html":{},"modules/SubscriptionModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["decorators",{"_index":58,"title":{},"body":{"controllers/AdminAlbumController.html":{},"controllers/AdminOrderController.html":{},"controllers/AdminUserController.html":{},"entities/Album.html":{},"controllers/AlbumAccessController.html":{},"controllers/AlbumController.html":{},"controllers/AuthController.html":{},"classes/BaseUserDto.html":{},"controllers/BuyerOrdersController.html":{},"classes/CreateAlbumDto.html":{},"classes/CreateLeadDto.html":{},"classes/CreateOrderDto.html":{},"classes/CreatePaymentAccountDto.html":{},"classes/CreatePhotoDto.html":{},"classes/CreateSubscriptionOrderDto.html":{},"classes/CreateUserDto.html":{},"controllers/FilesController.html":{},"entities/Lead.html":{},"controllers/LeadController.html":{},"classes/LoginDto.html":{},"controllers/MercadopagoController.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"classes/OrderItemDto.html":{},"classes/PaginationDto.html":{},"entities/PasswordResetToken.html":{},"entities/PaymentAccount.html":{},"controllers/PaymentController.html":{},"entities/Photo.html":{},"controllers/PhotoController.html":{},"controllers/PhotographerOrdersController.html":{},"classes/PriceOptionDto.html":{},"controllers/SeedController.html":{},"entities/Subscription.html":{},"controllers/SubscriptionController.html":{},"entities/SubscriptionOrder.html":{},"entities/SubscriptionPlan.html":{},"classes/UpdateDeliveryStatusDto.html":{},"entities/User.html":{},"controllers/UserController.html":{}}}],["decrementa",{"_index":711,"title":{},"body":{"injectables/AlbumService.html":{}}}],["deeper",{"_index":2744,"title":{},"body":{"index.html":{}}}],["default",{"_index":227,"title":{},"body":{"controllers/AdminOrderController.html":{},"entities/Album.html":{},"injectables/MailService.html":{},"entities/Order.html":{},"entities/PasswordResetToken.html":{},"entities/PaymentAccount.html":{},"entities/Subscription.html":{},"entities/SubscriptionOrder.html":{},"entities/SubscriptionPlan.html":{},"entities/User.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":30,"title":{},"body":{"classes/AdminAlbumByIdDto.html":{},"controllers/AdminAlbumController.html":{},"classes/AdminAlbumDto.html":{},"injectables/AdminAlbumService.html":{},"controllers/AdminOrderController.html":{},"injectables/AdminOrderService.html":{},"controllers/AdminUserController.html":{},"classes/AdminUserDto.html":{},"injectables/AdminUserService.html":{},"entities/Album.html":{},"controllers/AlbumAccessController.html":{},"injectables/AlbumAccessService.html":{},"controllers/AlbumController.html":{},"injectables/AlbumService.html":{},"classes/AlbumSummaryDto.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/BaseUserDto.html":{},"controllers/BuyerOrdersController.html":{},"injectables/BuyerOrdersService.html":{},"classes/CreateAlbumDto.html":{},"classes/CreateLeadDto.html":{},"classes/CreateOrderDto.html":{},"classes/CreatePaymentAccountDto.html":{},"classes/CreatePhotoDto.html":{},"classes/CreateSubscriptionOrderDto.html":{},"classes/CreateUserDto.html":{},"controllers/FilesController.html":{},"injectables/FilesService.html":{},"entities/Lead.html":{},"controllers/LeadController.html":{},"injectables/LeadService.html":{},"classes/LoginDto.html":{},"injectables/MailService.html":{},"controllers/MercadopagoController.html":{},"injectables/MercadopagoService.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"classes/OrderItemDto.html":{},"classes/OrderItemResponseDto.html":{},"classes/OrderResponseDto.html":{},"classes/PaginationDto.html":{},"injectables/PasswordResetService.html":{},"entities/PasswordResetToken.html":{},"entities/PaymentAccount.html":{},"controllers/PaymentController.html":{},"injectables/PaymentService.html":{},"entities/Photo.html":{},"controllers/PhotoController.html":{},"injectables/PhotoService.html":{},"controllers/PhotographerOrdersController.html":{},"injectables/PhotographerOrdersService.html":{},"classes/PriceOptionDto.html":{},"guards/RolesGuard.html":{},"controllers/SeedController.html":{},"injectables/SeedService.html":{},"entities/Subscription.html":{},"controllers/SubscriptionController.html":{},"entities/SubscriptionOrder.html":{},"entities/SubscriptionPlan.html":{},"injectables/SubscriptionService.html":{},"classes/UpdateDeliveryStatusDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["del",{"_index":172,"title":{},"body":{"interfaces/AdminAlbumSummaryDto.html":{},"interfaces/AdminPhotographerByIdDto.html":{},"entities/Album.html":{},"controllers/AuthController.html":{},"controllers/BuyerOrdersController.html":{},"injectables/BuyerOrdersService.html":{},"injectables/FilesService.html":{},"controllers/MercadopagoController.html":{},"injectables/PhotoService.html":{},"injectables/SubscriptionService.html":{}}}],["delete",{"_index":653,"title":{},"body":{"controllers/AlbumController.html":{},"injectables/AlbumService.html":{},"controllers/BuyerOrdersController.html":{},"controllers/PhotoController.html":{},"injectables/UserService.html":{}}}],["delete('/album/:albumid",{"_index":2031,"title":{},"body":{"controllers/PhotoController.html":{}}}],["delete(':id",{"_index":673,"title":{},"body":{"controllers/AlbumController.html":{},"controllers/BuyerOrdersController.html":{},"controllers/PhotoController.html":{}}}],["deletealbum",{"_index":631,"title":{},"body":{"controllers/AlbumController.html":{}}}],["deletealbum(@param('id",{"_index":674,"title":{},"body":{"controllers/AlbumController.html":{}}}],["deletealbum(id",{"_index":638,"title":{},"body":{"controllers/AlbumController.html":{}}}],["deleteallbyalbum",{"_index":1989,"title":{},"body":{"controllers/PhotoController.html":{}}}],["deleteallbyalbum(@param('albumid",{"_index":2032,"title":{},"body":{"controllers/PhotoController.html":{}}}],["deleteallbyalbum(albumid",{"_index":1994,"title":{},"body":{"controllers/PhotoController.html":{}}}],["deletedat",{"_index":481,"title":{},"body":{"entities/Album.html":{}}}],["deleteimage",{"_index":1449,"title":{},"body":{"injectables/FilesService.html":{}}}],["deleteimage(publicid",{"_index":1452,"title":{},"body":{"injectables/FilesService.html":{}}}],["deletephoto",{"_index":1990,"title":{},"body":{"controllers/PhotoController.html":{}}}],["deletephoto(@req",{"_index":2029,"title":{},"body":{"controllers/PhotoController.html":{}}}],["deletephoto(req",{"_index":1997,"title":{},"body":{"controllers/PhotoController.html":{}}}],["delivered",{"_index":310,"title":{},"body":{"injectables/AdminOrderService.html":{},"entities/Order.html":{},"controllers/PhotographerOrdersController.html":{},"classes/UpdateDeliveryStatusDto.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["delivery",{"_index":324,"title":{},"body":{"injectables/AdminOrderService.html":{}}}],["deliverydelivered",{"_index":309,"title":{},"body":{"injectables/AdminOrderService.html":{}}}],["deliveryinprogress",{"_index":307,"title":{},"body":{"injectables/AdminOrderService.html":{}}}],["deliverypending",{"_index":306,"title":{},"body":{"injectables/AdminOrderService.html":{}}}],["deliverystatus",{"_index":304,"title":{},"body":{"injectables/AdminOrderService.html":{},"injectables/AdminUserService.html":{},"entities/Order.html":{},"injectables/PhotographerOrdersService.html":{},"classes/UpdateDeliveryStatusDto.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["dependencies",{"_index":186,"title":{"dependencies.html":{}},"body":{"modules/AdminModule.html":{},"modules/AlbumModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/FilesModule.html":{},"modules/LeadModule.html":{},"modules/MailModule.html":{},"modules/MercadopagoModule.html":{},"modules/OrdersModule.html":{},"modules/PaymentModule.html":{},"modules/PhotoModule.html":{},"modules/SeedModule.html":{},"modules/SubscriptionModule.html":{},"modules/UserModule.html":{},"dependencies.html":{},"overview.html":{}}}],["deploy",{"_index":2696,"title":{},"body":{"index.html":{}}}],["deploying",{"_index":2715,"title":{},"body":{"index.html":{}}}],["deployment",{"_index":2706,"title":{},"body":{"index.html":{}}}],["deploywith",{"_index":2725,"title":{},"body":{"index.html":{}}}],["desactiva",{"_index":2441,"title":{},"body":{"injectables/SubscriptionService.html":{}}}],["desactivado",{"_index":941,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{}}}],["desactivar",{"_index":2445,"title":{},"body":{"injectables/SubscriptionService.html":{}}}],["desc",{"_index":285,"title":{},"body":{"injectables/AdminOrderService.html":{},"injectables/BuyerOrdersService.html":{},"injectables/LeadService.html":{},"injectables/PhotographerOrdersService.html":{},"injectables/SubscriptionService.html":{}}}],["desconocido",{"_index":1615,"title":{},"body":{"injectables/MailService.html":{}}}],["description",{"_index":19,"title":{},"body":{"classes/AdminAlbumByIdDto.html":{},"classes/AdminAlbumDto.html":{},"interfaces/AdminAlbumSummaryDto.html":{},"interfaces/AdminPhotographerByIdDto.html":{},"classes/AdminUserDto.html":{},"injectables/AdminUserService.html":{},"entities/Album.html":{},"injectables/AlbumService.html":{},"classes/AlbumSummaryDto.html":{},"injectables/BuyerOrdersService.html":{},"classes/CreateAlbumDto.html":{},"classes/OrderItemResponseDto.html":{},"classes/OrderResponseDto.html":{},"classes/PriceOptionDto.html":{},"injectables/SeedService.html":{},"entities/SubscriptionPlan.html":{},"injectables/UserService.html":{},"index.html":{},"properties.html":{}}}],["descuento",{"_index":2276,"title":{},"body":{"injectables/SeedService.html":{}}}],["desde",{"_index":156,"title":{},"body":{"injectables/AdminAlbumService.html":{},"controllers/PhotoController.html":{},"injectables/PhotoService.html":{}}}],["details",{"_index":1707,"title":{},"body":{"injectables/MercadopagoService.html":{}}}],["detalles",{"_index":2112,"title":{},"body":{"injectables/PhotoService.html":{}}}],["development",{"_index":2682,"title":{},"body":{"index.html":{}}}],["devtools",{"_index":2754,"title":{},"body":{"index.html":{}}}],["diffminutes",{"_index":1017,"title":{},"body":{"injectables/AuthService.html":{}}}],["digest('hex",{"_index":1734,"title":{},"body":{"injectables/MercadopagoService.html":{}}}],["digital",{"_index":1774,"title":{},"body":{"entities/Order.html":{}}}],["directa",{"_index":1800,"title":{},"body":{"entities/OrderItem.html":{}}}],["discord",{"_index":2741,"title":{},"body":{"index.html":{}}}],["discountpercentage",{"_index":2272,"title":{},"body":{"injectables/SeedService.html":{},"entities/SubscriptionPlan.html":{}}}],["disponibles",{"_index":2419,"title":{},"body":{"injectables/SubscriptionService.html":{}}}],["distinct",{"_index":154,"title":{},"body":{"injectables/AdminAlbumService.html":{}}}],["dive",{"_index":2743,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":2583,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["domain",{"_index":901,"title":{},"body":{"controllers/AuthController.html":{}}}],["dotenv",{"_index":2628,"title":{},"body":{"dependencies.html":{}}}],["dto",{"_index":696,"title":{},"body":{"injectables/AlbumService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/BuyerOrdersController.html":{},"injectables/BuyerOrdersService.html":{},"controllers/LeadController.html":{},"injectables/LeadService.html":{},"controllers/UserController.html":{}}}],["dto.albumid",{"_index":1142,"title":{},"body":{"injectables/BuyerOrdersService.html":{}}}],["dto.email",{"_index":983,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LeadService.html":{}}}],["dto.image",{"_index":986,"title":{},"body":{"injectables/AuthService.html":{}}}],["dto.items.length",{"_index":1154,"title":{},"body":{"injectables/BuyerOrdersService.html":{}}}],["dto.items.map((i",{"_index":1145,"title":{},"body":{"injectables/BuyerOrdersService.html":{}}}],["dto.items.map((itemdto",{"_index":1157,"title":{},"body":{"injectables/BuyerOrdersService.html":{}}}],["dto.name",{"_index":985,"title":{},"body":{"injectables/AuthService.html":{}}}],["dto.password",{"_index":979,"title":{},"body":{"injectables/AuthService.html":{}}}],["dto.passwordevent",{"_index":744,"title":{},"body":{"injectables/AlbumService.html":{}}}],["dto.role",{"_index":984,"title":{},"body":{"injectables/AuthService.html":{}}}],["dto.userevent",{"_index":723,"title":{},"body":{"injectables/AlbumService.html":{}}}],["dto/admin",{"_index":398,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["dto/create",{"_index":658,"title":{},"body":{"controllers/AlbumController.html":{},"injectables/AlbumService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/BuyerOrdersController.html":{},"injectables/BuyerOrdersService.html":{},"controllers/LeadController.html":{},"injectables/LeadService.html":{},"controllers/SubscriptionController.html":{}}}],["dto/login.dto",{"_index":865,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["dto/order",{"_index":1129,"title":{},"body":{"injectables/BuyerOrdersService.html":{}}}],["dto/up",{"_index":2160,"title":{},"body":{"controllers/PhotographerOrdersController.html":{}}}],["dto/update",{"_index":660,"title":{},"body":{"controllers/AlbumController.html":{},"injectables/AlbumService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["dueño",{"_index":545,"title":{},"body":{"entities/Album.html":{},"controllers/BuyerOrdersController.html":{}}}],["durationmonths",{"_index":2271,"title":{},"body":{"injectables/SeedService.html":{},"entities/SubscriptionPlan.html":{}}}],["e",{"_index":144,"title":{},"body":{"injectables/AdminAlbumService.html":{}}}],["e2e",{"_index":2691,"title":{},"body":{"index.html":{}}}],["each",{"_index":1359,"title":{},"body":{"classes/CreateAlbumDto.html":{},"classes/CreateOrderDto.html":{},"classes/OrderItemDto.html":{},"classes/PriceOptionDto.html":{}}}],["eager",{"_index":1750,"title":{},"body":{"entities/Order.html":{},"entities/OrderItem.html":{},"entities/Subscription.html":{},"entities/SubscriptionOrder.html":{}}}],["efficient",{"_index":2668,"title":{},"body":{"index.html":{}}}],["efficiently",{"_index":2703,"title":{},"body":{"index.html":{}}}],["ej",{"_index":138,"title":{},"body":{"injectables/AdminAlbumService.html":{},"entities/Order.html":{}}}],["el",{"_index":593,"title":{},"body":{"injectables/AlbumAccessService.html":{},"injectables/AlbumService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"controllers/BuyerOrdersController.html":{},"injectables/BuyerOrdersService.html":{},"injectables/FilesService.html":{},"entities/Order.html":{},"entities/PasswordResetToken.html":{},"injectables/PaymentService.html":{},"controllers/PhotoController.html":{},"injectables/PhotoService.html":{},"injectables/PhotographerOrdersService.html":{},"injectables/SubscriptionService.html":{},"miscellaneous/variables.html":{}}}],["eliminada",{"_index":2134,"title":{},"body":{"injectables/PhotoService.html":{}}}],["eliminadas",{"_index":2146,"title":{},"body":{"injectables/PhotoService.html":{}}}],["eliminados",{"_index":763,"title":{},"body":{"injectables/AlbumService.html":{}}}],["eliminamos",{"_index":1798,"title":{},"body":{"entities/OrderItem.html":{}}}],["eliminando",{"_index":2135,"title":{},"body":{"injectables/PhotoService.html":{}}}],["eliminar",{"_index":756,"title":{},"body":{"injectables/AlbumService.html":{},"controllers/BuyerOrdersController.html":{},"injectables/PhotoService.html":{}}}],["email",{"_index":88,"title":{},"body":{"classes/AdminAlbumDto.html":{},"interfaces/AdminAlbumSummaryDto.html":{},"interfaces/AdminPhotographerByIdDto.html":{},"classes/AdminUserDto.html":{},"injectables/AdminUserService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BaseUserDto.html":{},"injectables/BuyerOrdersService.html":{},"classes/CreateLeadDto.html":{},"classes/CreateUserDto.html":{},"entities/Lead.html":{},"injectables/LeadService.html":{},"classes/LoginDto.html":{},"injectables/MailService.html":{},"injectables/PasswordResetService.html":{},"injectables/SeedService.html":{},"injectables/SubscriptionService.html":{},"entities/User.html":{},"injectables/UserService.html":{}}}],["en",{"_index":605,"title":{},"body":{"injectables/AlbumAccessService.html":{},"injectables/BuyerOrdersService.html":{},"controllers/FilesController.html":{},"injectables/FilesService.html":{},"injectables/MailService.html":{},"controllers/MercadopagoController.html":{},"injectables/MercadopagoService.html":{},"injectables/PaymentService.html":{},"entities/Photo.html":{},"injectables/PhotoService.html":{},"injectables/SubscriptionService.html":{}}}],["enableimplicitconversions",{"_index":1841,"title":{},"body":{"classes/PaginationDto.html":{}}}],["encontrada",{"_index":1180,"title":{},"body":{"injectables/BuyerOrdersService.html":{},"injectables/PaymentService.html":{},"injectables/PhotoService.html":{},"injectables/SubscriptionService.html":{}}}],["encontrado",{"_index":292,"title":{},"body":{"injectables/AdminOrderService.html":{},"injectables/AdminUserService.html":{},"injectables/AlbumService.html":{},"injectables/AuthService.html":{},"injectables/FilesService.html":{},"injectables/PasswordResetService.html":{},"injectables/PaymentService.html":{},"injectables/PhotoService.html":{},"injectables/SubscriptionService.html":{},"injectables/UserService.html":{}}}],["encuentra",{"_index":2813,"title":{},"body":{"miscellaneous/variables.html":{}}}],["end",{"_index":443,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["enddate",{"_index":2291,"title":{},"body":{"entities/Subscription.html":{},"injectables/SubscriptionService.html":{},"miscellaneous/variables.html":{}}}],["ensure",{"_index":2701,"title":{},"body":{"index.html":{}}}],["enterprise",{"_index":2758,"title":{},"body":{"index.html":{}}}],["entidades",{"_index":2100,"title":{},"body":{"injectables/PhotoService.html":{}}}],["entities",{"_index":478,"title":{},"body":{"entities/Album.html":{},"entities/Lead.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"entities/PasswordResetToken.html":{},"entities/PaymentAccount.html":{},"entities/Photo.html":{},"entities/Subscription.html":{},"entities/SubscriptionOrder.html":{},"entities/SubscriptionPlan.html":{},"entities/User.html":{},"overview.html":{}}}],["entities/album.entity",{"_index":590,"title":{},"body":{"injectables/AlbumAccessService.html":{},"modules/AlbumModule.html":{},"injectables/AlbumService.html":{}}}],["entities/auth.entity",{"_index":950,"title":{},"body":{"modules/AuthModule.html":{}}}],["entities/lead.entity",{"_index":1537,"title":{},"body":{"modules/LeadModule.html":{},"injectables/LeadService.html":{}}}],["entities/order",{"_index":1132,"title":{},"body":{"injectables/BuyerOrdersService.html":{},"modules/OrdersModule.html":{}}}],["entities/order.entity",{"_index":1128,"title":{},"body":{"injectables/BuyerOrdersService.html":{},"modules/OrdersModule.html":{},"injectables/PhotographerOrdersService.html":{},"classes/UpdateDeliveryStatusDto.html":{}}}],["entities/password",{"_index":953,"title":{},"body":{"modules/AuthModule.html":{},"injectables/PasswordResetService.html":{}}}],["entities/payment.entity",{"_index":1922,"title":{},"body":{"modules/PaymentModule.html":{},"injectables/PaymentService.html":{}}}],["entities/photo.entity",{"_index":2041,"title":{},"body":{"modules/PhotoModule.html":{},"injectables/PhotoService.html":{}}}],["entities/subscription",{"_index":2361,"title":{},"body":{"modules/SubscriptionModule.html":{},"injectables/SubscriptionService.html":{}}}],["entities/subscription.entity",{"_index":2358,"title":{},"body":{"modules/SubscriptionModule.html":{},"injectables/SubscriptionService.html":{}}}],["entities/subscriptionplan.entity",{"_index":2359,"title":{},"body":{"modules/SubscriptionModule.html":{},"injectables/SubscriptionService.html":{}}}],["entities/user.entity",{"_index":2546,"title":{},"body":{"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["entity",{"_index":477,"title":{"entities/Album.html":{},"entities/Lead.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"entities/PasswordResetToken.html":{},"entities/PaymentAccount.html":{},"entities/Photo.html":{},"entities/Subscription.html":{},"entities/SubscriptionOrder.html":{},"entities/SubscriptionPlan.html":{},"entities/User.html":{}},"body":{"entities/Album.html":{},"entities/Lead.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"entities/PasswordResetToken.html":{},"entities/PaymentAccount.html":{},"entities/Photo.html":{},"entities/Subscription.html":{},"entities/SubscriptionOrder.html":{},"entities/SubscriptionPlan.html":{},"entities/User.html":{},"coverage.html":{}}}],["entre",{"_index":820,"title":{},"body":{"modules/AppModule.html":{}}}],["entrega",{"_index":1780,"title":{},"body":{"entities/Order.html":{}}}],["entregado",{"_index":1773,"title":{},"body":{"entities/Order.html":{}}}],["enum",{"_index":1038,"title":{},"body":{"classes/BaseUserDto.html":{},"classes/CreateAlbumDto.html":{},"entities/Order.html":{},"entities/PaymentAccount.html":{},"classes/PriceOptionDto.html":{},"entities/SubscriptionOrder.html":{},"entities/User.html":{}}}],["enumerations",{"_index":2647,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["envi",{"_index":1432,"title":{},"body":{"controllers/FilesController.html":{}}}],["enviado",{"_index":883,"title":{},"body":{"controllers/AuthController.html":{},"injectables/MailService.html":{},"controllers/PhotoController.html":{},"injectables/PhotoService.html":{}}}],["enviar",{"_index":994,"title":{},"body":{"injectables/AuthService.html":{},"injectables/MailService.html":{},"injectables/PasswordResetService.html":{},"injectables/SubscriptionService.html":{}}}],["enviaron",{"_index":2085,"title":{},"body":{"injectables/PhotoService.html":{}}}],["err",{"_index":1265,"title":{},"body":{"injectables/BuyerOrdersService.html":{},"injectables/MailService.html":{},"injectables/PhotoService.html":{}}}],["err.message",{"_index":1267,"title":{},"body":{"injectables/BuyerOrdersService.html":{}}}],["err.response?.data",{"_index":1266,"title":{},"body":{"injectables/BuyerOrdersService.html":{}}}],["error",{"_index":733,"title":{},"body":{"injectables/AlbumService.html":{},"guards/AuthGuard.html":{},"injectables/BuyerOrdersService.html":{},"injectables/FilesService.html":{},"injectables/MailService.html":{},"controllers/MercadopagoController.html":{},"injectables/MercadopagoService.html":{},"injectables/SubscriptionService.html":{}}}],["error('mp_webhook_secret",{"_index":1687,"title":{},"body":{"injectables/MercadopagoService.html":{}}}],["error.code",{"_index":734,"title":{},"body":{"injectables/AlbumService.html":{}}}],["error.message",{"_index":1709,"title":{},"body":{"injectables/MercadopagoService.html":{}}}],["error.response?.data",{"_index":1708,"title":{},"body":{"injectables/MercadopagoService.html":{},"injectables/SubscriptionService.html":{}}}],["es",{"_index":925,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/SubscriptionService.html":{},"miscellaneous/variables.html":{}}}],["ese",{"_index":724,"title":{},"body":{"injectables/AlbumService.html":{},"injectables/SubscriptionService.html":{}}}],["espacio",{"_index":2095,"title":{},"body":{"injectables/PhotoService.html":{}}}],["específica",{"_index":1081,"title":{},"body":{"controllers/BuyerOrdersController.html":{}}}],["est",{"_index":611,"title":{},"body":{"injectables/AlbumAccessService.html":{},"guards/AuthGuard.html":{},"injectables/LeadService.html":{},"controllers/MercadopagoController.html":{},"injectables/PaymentService.html":{}}}],["esta",{"_index":1185,"title":{},"body":{"injectables/BuyerOrdersService.html":{},"injectables/PhotographerOrdersService.html":{},"guards/RolesGuard.html":{}}}],["estado",{"_index":314,"title":{},"body":{"injectables/AdminOrderService.html":{},"injectables/MercadopagoService.html":{},"entities/Order.html":{},"injectables/SubscriptionService.html":{}}}],["estados",{"_index":1777,"title":{},"body":{"entities/Order.html":{}}}],["este",{"_index":548,"title":{},"body":{"entities/Album.html":{},"injectables/AlbumService.html":{},"injectables/BuyerOrdersService.html":{},"injectables/FilesService.html":{},"injectables/PhotoService.html":{},"injectables/SubscriptionService.html":{}}}],["eventdate",{"_index":20,"title":{},"body":{"classes/AdminAlbumByIdDto.html":{},"classes/AdminAlbumDto.html":{},"classes/AdminUserDto.html":{},"injectables/AdminUserService.html":{},"entities/Album.html":{},"injectables/AlbumAccessService.html":{},"classes/AlbumSummaryDto.html":{},"injectables/BuyerOrdersService.html":{},"classes/CreateAlbumDto.html":{},"classes/OrderItemResponseDto.html":{},"classes/OrderResponseDto.html":{},"classes/PriceOptionDto.html":{},"injectables/UserService.html":{}}}],["evento",{"_index":725,"title":{},"body":{"injectables/AlbumService.html":{}}}],["evitar",{"_index":1656,"title":{},"body":{"controllers/MercadopagoController.html":{}}}],["example",{"_index":2678,"title":{},"body":{"index.html":{}}}],["excede",{"_index":1473,"title":{},"body":{"injectables/FilesService.html":{}}}],["excesiva",{"_index":1229,"title":{},"body":{"injectables/BuyerOrdersService.html":{}}}],["excluded_payment_types",{"_index":1240,"title":{},"body":{"injectables/BuyerOrdersService.html":{}}}],["executioncontext",{"_index":912,"title":{},"body":{"guards/AuthGuard.html":{},"guards/RolesGuard.html":{}}}],["existe",{"_index":125,"title":{},"body":{"injectables/AdminAlbumService.html":{},"injectables/AlbumService.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/PhotographerOrdersService.html":{}}}],["existing",{"_index":722,"title":{},"body":{"injectables/AlbumService.html":{}}}],["existinguser",{"_index":975,"title":{},"body":{"injectables/AuthService.html":{}}}],["exists",{"_index":1548,"title":{},"body":{"injectables/LeadService.html":{},"injectables/SeedService.html":{}}}],["exitoso",{"_index":874,"title":{},"body":{"controllers/AuthController.html":{}}}],["experience",{"_index":2746,"title":{},"body":{"index.html":{}}}],["expiresat",{"_index":1866,"title":{},"body":{"injectables/PasswordResetService.html":{},"entities/PasswordResetToken.html":{}}}],["expiresin",{"_index":831,"title":{},"body":{"modules/AppModule.html":{}}}],["export",{"_index":7,"title":{},"body":{"classes/Admin.html":{},"classes/AdminAlbumByIdDto.html":{},"controllers/AdminAlbumController.html":{},"classes/AdminAlbumDto.html":{},"injectables/AdminAlbumService.html":{},"interfaces/AdminAlbumSummaryDto.html":{},"modules/AdminModule.html":{},"controllers/AdminOrderController.html":{},"injectables/AdminOrderService.html":{},"interfaces/AdminPhotographerByIdDto.html":{},"controllers/AdminUserController.html":{},"classes/AdminUserDto.html":{},"injectables/AdminUserService.html":{},"entities/Album.html":{},"controllers/AlbumAccessController.html":{},"injectables/AlbumAccessService.html":{},"controllers/AlbumController.html":{},"modules/AlbumModule.html":{},"injectables/AlbumService.html":{},"classes/AlbumSummaryDto.html":{},"modules/AppModule.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseUserDto.html":{},"controllers/BuyerOrdersController.html":{},"injectables/BuyerOrdersService.html":{},"modules/CommonModule.html":{},"classes/CreateAdminDto.html":{},"classes/CreateAlbumDto.html":{},"classes/CreateLeadDto.html":{},"classes/CreateMercadopagoDto.html":{},"classes/CreateOrderDto.html":{},"classes/CreatePaymentAccountDto.html":{},"classes/CreatePhotoDto.html":{},"classes/CreateSeedDto.html":{},"classes/CreateSubscriptionDto.html":{},"classes/CreateSubscriptionOrderDto.html":{},"classes/CreateUserDto.html":{},"controllers/FilesController.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"entities/Lead.html":{},"controllers/LeadController.html":{},"modules/LeadModule.html":{},"injectables/LeadService.html":{},"classes/LoginDto.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"classes/Mercadopago.html":{},"controllers/MercadopagoController.html":{},"modules/MercadopagoModule.html":{},"injectables/MercadopagoService.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"classes/OrderItemDto.html":{},"classes/OrderItemResponseDto.html":{},"classes/OrderResponseDto.html":{},"modules/OrdersModule.html":{},"classes/PaginationDto.html":{},"injectables/PasswordResetService.html":{},"entities/PasswordResetToken.html":{},"entities/PaymentAccount.html":{},"controllers/PaymentController.html":{},"modules/PaymentModule.html":{},"injectables/PaymentService.html":{},"entities/Photo.html":{},"controllers/PhotoController.html":{},"modules/PhotoModule.html":{},"injectables/PhotoService.html":{},"controllers/PhotographerOrdersController.html":{},"injectables/PhotographerOrdersService.html":{},"classes/PriceOptionDto.html":{},"guards/RolesGuard.html":{},"classes/Seed.html":{},"controllers/SeedController.html":{},"modules/SeedModule.html":{},"injectables/SeedService.html":{},"entities/Subscription.html":{},"controllers/SubscriptionController.html":{},"modules/SubscriptionModule.html":{},"entities/SubscriptionOrder.html":{},"entities/SubscriptionPlan.html":{},"injectables/SubscriptionService.html":{},"classes/UpdateAdminDto.html":{},"classes/UpdateAlbumDto.html":{},"classes/UpdateDeliveryStatusDto.html":{},"classes/UpdateLeadDto.html":{},"classes/UpdateMercadopagoDto.html":{},"classes/UpdateOrderDto.html":{},"classes/UpdatePaymentDto.html":{},"classes/UpdatePhotoDto.html":{},"classes/UpdateSeedDto.html":{},"classes/UpdateSubscriptionDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["exports",{"_index":191,"title":{},"body":{"modules/AdminModule.html":{},"modules/AlbumModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/FilesModule.html":{},"modules/LeadModule.html":{},"modules/MailModule.html":{},"modules/MercadopagoModule.html":{},"modules/OrdersModule.html":{},"modules/PaymentModule.html":{},"modules/PhotoModule.html":{},"modules/SeedModule.html":{},"modules/SubscriptionModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["express",{"_index":866,"title":{},"body":{"controllers/AuthController.html":{},"controllers/FilesController.html":{},"controllers/MercadopagoController.html":{},"controllers/PhotoController.html":{},"dependencies.html":{}}}],["express.multer.file",{"_index":1419,"title":{},"body":{"controllers/FilesController.html":{},"injectables/FilesService.html":{},"controllers/PhotoController.html":{},"injectables/PhotoService.html":{}}}],["extends",{"_index":2458,"title":{},"body":{"classes/UpdateAdminDto.html":{},"classes/UpdateAlbumDto.html":{},"classes/UpdateLeadDto.html":{},"classes/UpdateMercadopagoDto.html":{},"classes/UpdateOrderDto.html":{},"classes/UpdatePaymentDto.html":{},"classes/UpdatePhotoDto.html":{},"classes/UpdateSeedDto.html":{},"classes/UpdateSubscriptionDto.html":{},"classes/UpdateUserDto.html":{}}}],["external_reference",{"_index":1246,"title":{},"body":{"injectables/BuyerOrdersService.html":{},"injectables/MercadopagoService.html":{},"injectables/SubscriptionService.html":{}}}],["external_reference.replace('buyerorder",{"_index":1739,"title":{},"body":{"injectables/MercadopagoService.html":{}}}],["external_reference.replace('subscription",{"_index":1744,"title":{},"body":{"injectables/MercadopagoService.html":{}}}],["external_reference.startswith('buyerorder",{"_index":1738,"title":{},"body":{"injectables/MercadopagoService.html":{}}}],["external_reference.startswith('subscription",{"_index":1742,"title":{},"body":{"injectables/MercadopagoService.html":{}}}],["extraer",{"_index":1713,"title":{},"body":{"injectables/MercadopagoService.html":{}}}],["eyjhbgcioijiuzi1niisinr5cci6ikpxvcj9.eyjzdwiioii4nmrkn2mzzi1hn2u2ltrizwqtytvkzc0wmdcwytvln2rmnwyilcjpzci6ijg2zgq3yznmlwe3ztytngjlzc1hnwrkltawnzbhnwu3zgy1ziisimvtywlsijoiywxnb0bhbgdvlmnvbsisimlhdci6mtcyotywnze5ocwizxhwijoxnzi5njewnzk4fq.s",{"_index":920,"title":{},"body":{"guards/AuthGuard.html":{}}}],["f",{"_index":2090,"title":{},"body":{"injectables/PhotoService.html":{}}}],["f.size",{"_index":2091,"title":{},"body":{"injectables/PhotoService.html":{}}}],["failed",{"_index":1710,"title":{},"body":{"injectables/MercadopagoService.html":{}}}],["failure",{"_index":1236,"title":{},"body":{"injectables/BuyerOrdersService.html":{},"injectables/SubscriptionService.html":{}}}],["false",{"_index":373,"title":{},"body":{"controllers/AdminUserController.html":{},"injectables/AlbumService.html":{},"modules/AppModule.html":{},"guards/AuthGuard.html":{},"injectables/MercadopagoService.html":{},"entities/PasswordResetToken.html":{},"injectables/SubscriptionService.html":{},"miscellaneous/variables.html":{}}}],["fast",{"_index":2719,"title":{},"body":{"index.html":{}}}],["features",{"_index":2729,"title":{},"body":{"index.html":{}}}],["fee",{"_index":2816,"title":{},"body":{"miscellaneous/variables.html":{}}}],["feepercentage",{"_index":1218,"title":{},"body":{"injectables/BuyerOrdersService.html":{}}}],["fetching",{"_index":1706,"title":{},"body":{"injectables/MercadopagoService.html":{}}}],["few",{"_index":2721,"title":{},"body":{"index.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/Admin.html":{},"classes/AdminAlbumByIdDto.html":{},"controllers/AdminAlbumController.html":{},"classes/AdminAlbumDto.html":{},"injectables/AdminAlbumService.html":{},"interfaces/AdminAlbumSummaryDto.html":{},"modules/AdminModule.html":{},"controllers/AdminOrderController.html":{},"injectables/AdminOrderService.html":{},"interfaces/AdminPhotographerByIdDto.html":{},"controllers/AdminUserController.html":{},"classes/AdminUserDto.html":{},"injectables/AdminUserService.html":{},"entities/Album.html":{},"controllers/AlbumAccessController.html":{},"injectables/AlbumAccessService.html":{},"controllers/AlbumController.html":{},"modules/AlbumModule.html":{},"injectables/AlbumService.html":{},"classes/AlbumSummaryDto.html":{},"modules/AppModule.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseUserDto.html":{},"controllers/BuyerOrdersController.html":{},"injectables/BuyerOrdersService.html":{},"modules/CommonModule.html":{},"classes/CreateAdminDto.html":{},"classes/CreateAlbumDto.html":{},"classes/CreateLeadDto.html":{},"classes/CreateMercadopagoDto.html":{},"classes/CreateOrderDto.html":{},"classes/CreatePaymentAccountDto.html":{},"classes/CreatePhotoDto.html":{},"classes/CreateSeedDto.html":{},"classes/CreateSubscriptionDto.html":{},"classes/CreateSubscriptionOrderDto.html":{},"classes/CreateUserDto.html":{},"controllers/FilesController.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"entities/Lead.html":{},"controllers/LeadController.html":{},"modules/LeadModule.html":{},"injectables/LeadService.html":{},"classes/LoginDto.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"classes/Mercadopago.html":{},"controllers/MercadopagoController.html":{},"modules/MercadopagoModule.html":{},"injectables/MercadopagoService.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"classes/OrderItemDto.html":{},"classes/OrderItemResponseDto.html":{},"classes/OrderResponseDto.html":{},"modules/OrdersModule.html":{},"classes/PaginationDto.html":{},"injectables/PasswordResetService.html":{},"entities/PasswordResetToken.html":{},"entities/PaymentAccount.html":{},"controllers/PaymentController.html":{},"modules/PaymentModule.html":{},"injectables/PaymentService.html":{},"entities/Photo.html":{},"controllers/PhotoController.html":{},"modules/PhotoModule.html":{},"injectables/PhotoService.html":{},"controllers/PhotographerOrdersController.html":{},"injectables/PhotographerOrdersService.html":{},"classes/PriceOptionDto.html":{},"guards/RolesGuard.html":{},"classes/Seed.html":{},"controllers/SeedController.html":{},"modules/SeedModule.html":{},"injectables/SeedService.html":{},"entities/Subscription.html":{},"controllers/SubscriptionController.html":{},"modules/SubscriptionModule.html":{},"entities/SubscriptionOrder.html":{},"entities/SubscriptionPlan.html":{},"injectables/SubscriptionService.html":{},"classes/UpdateAdminDto.html":{},"classes/UpdateAlbumDto.html":{},"classes/UpdateDeliveryStatusDto.html":{},"classes/UpdateLeadDto.html":{},"classes/UpdateMercadopagoDto.html":{},"classes/UpdateOrderDto.html":{},"classes/UpdatePaymentDto.html":{},"classes/UpdatePhotoDto.html":{},"classes/UpdateSeedDto.html":{},"classes/UpdateSubscriptionDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["file.mimetype",{"_index":1437,"title":{},"body":{"controllers/FilesController.html":{},"injectables/PhotoService.html":{}}}],["file.size",{"_index":1468,"title":{},"body":{"injectables/FilesService.html":{}}}],["fileinterceptor",{"_index":1424,"title":{},"body":{"controllers/FilesController.html":{},"controllers/PhotoController.html":{}}}],["fileinterceptor('file",{"_index":2013,"title":{},"body":{"controllers/PhotoController.html":{}}}],["files",{"_index":1416,"title":{},"body":{"controllers/FilesController.html":{},"controllers/PhotoController.html":{},"injectables/PhotoService.html":{}}}],["files.controller",{"_index":1447,"title":{},"body":{"modules/FilesModule.html":{}}}],["files.foreach((file",{"_index":2086,"title":{},"body":{"injectables/PhotoService.html":{}}}],["files.length",{"_index":2084,"title":{},"body":{"injectables/PhotoService.html":{}}}],["files.map((file",{"_index":2099,"title":{},"body":{"injectables/PhotoService.html":{}}}],["files.reduce((sum",{"_index":2089,"title":{},"body":{"injectables/PhotoService.html":{}}}],["files.service",{"_index":1427,"title":{},"body":{"controllers/FilesController.html":{},"modules/FilesModule.html":{}}}],["files/files.module",{"_index":801,"title":{},"body":{"modules/AppModule.html":{}}}],["filescontroller",{"_index":1414,"title":{"controllers/FilesController.html":{}},"body":{"controllers/FilesController.html":{},"modules/FilesModule.html":{},"coverage.html":{}}}],["filesinterceptor",{"_index":2009,"title":{},"body":{"controllers/PhotoController.html":{}}}],["filesinterceptor('files",{"_index":2020,"title":{},"body":{"controllers/PhotoController.html":{}}}],["filesize",{"_index":2015,"title":{},"body":{"controllers/PhotoController.html":{}}}],["filesizeinmb",{"_index":1467,"title":{},"body":{"injectables/FilesService.html":{}}}],["filesmodule",{"_index":784,"title":{"modules/FilesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/FilesModule.html":{},"modules/PhotoModule.html":{},"modules.html":{},"overview.html":{}}}],["filesservice",{"_index":1426,"title":{"injectables/FilesService.html":{}},"body":{"controllers/FilesController.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"injectables/PhotoService.html":{},"coverage.html":{},"overview.html":{}}}],["finalizar",{"_index":2432,"title":{},"body":{"injectables/SubscriptionService.html":{}}}],["findall",{"_index":261,"title":{},"body":{"injectables/AdminOrderService.html":{},"injectables/AdminUserService.html":{},"controllers/AlbumController.html":{},"injectables/AlbumService.html":{},"controllers/LeadController.html":{},"injectables/LeadService.html":{},"injectables/PhotoService.html":{}}}],["findall(@query",{"_index":663,"title":{},"body":{"controllers/AlbumController.html":{}}}],["findall(paginationdto",{"_index":641,"title":{},"body":{"controllers/AlbumController.html":{},"injectables/AlbumService.html":{}}}],["findall(undefined",{"_index":265,"title":{},"body":{"injectables/AdminOrderService.html":{}}}],["findall(userid",{"_index":2050,"title":{},"body":{"injectables/PhotoService.html":{}}}],["findbyemail",{"_index":2549,"title":{},"body":{"injectables/UserService.html":{}}}],["findbyemail(email",{"_index":2555,"title":{},"body":{"injectables/UserService.html":{}}}],["findbyid",{"_index":262,"title":{},"body":{"injectables/AdminOrderService.html":{},"injectables/UserService.html":{}}}],["findbyid(id",{"_index":267,"title":{},"body":{"injectables/AdminOrderService.html":{},"injectables/UserService.html":{}}}],["findone",{"_index":632,"title":{},"body":{"controllers/AlbumController.html":{},"injectables/AlbumService.html":{}}}],["findone(@param('term",{"_index":666,"title":{},"body":{"controllers/AlbumController.html":{}}}],["findone(term",{"_index":645,"title":{},"body":{"controllers/AlbumController.html":{},"injectables/AlbumService.html":{}}}],["firstvaluefrom",{"_index":1685,"title":{},"body":{"injectables/MercadopagoService.html":{}}}],["fk",{"_index":1806,"title":{},"body":{"entities/OrderItem.html":{}}}],["float",{"_index":2521,"title":{},"body":{"entities/User.html":{}}}],["focus",{"_index":2728,"title":{},"body":{"index.html":{}}}],["folder",{"_index":1496,"title":{},"body":{"injectables/FilesService.html":{}}}],["follow",{"_index":2762,"title":{},"body":{"index.html":{}}}],["forbiddenexception",{"_index":1127,"title":{},"body":{"injectables/BuyerOrdersService.html":{},"injectables/PhotographerOrdersService.html":{},"guards/RolesGuard.html":{}}}],["forbiddenexception('no",{"_index":1182,"title":{},"body":{"injectables/BuyerOrdersService.html":{},"injectables/PhotographerOrdersService.html":{},"guards/RolesGuard.html":{}}}],["format",{"_index":1499,"title":{},"body":{"injectables/FilesService.html":{}}}],["formato",{"_index":1435,"title":{},"body":{"controllers/FilesController.html":{},"injectables/PhotoService.html":{}}}],["formattedalbums",{"_index":412,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["forwardref",{"_index":585,"title":{},"body":{"injectables/AlbumAccessService.html":{},"modules/AlbumModule.html":{},"injectables/AlbumService.html":{},"modules/PhotoModule.html":{},"injectables/PhotoService.html":{}}}],["foto",{"_index":176,"title":{},"body":{"interfaces/AdminAlbumSummaryDto.html":{},"interfaces/AdminPhotographerByIdDto.html":{},"controllers/AuthController.html":{},"injectables/BuyerOrdersService.html":{},"entities/OrderItem.html":{},"injectables/PhotoService.html":{}}}],["fotonube",{"_index":1608,"title":{},"body":{"injectables/MailService.html":{}}}],["fotonube/user_${userid",{"_index":1497,"title":{},"body":{"injectables/FilesService.html":{}}}],["fotos",{"_index":713,"title":{},"body":{"injectables/AlbumService.html":{},"injectables/BuyerOrdersService.html":{},"entities/Photo.html":{},"injectables/PhotoService.html":{}}}],["fotógrafo",{"_index":539,"title":{},"body":{"entities/Album.html":{},"injectables/AlbumService.html":{},"injectables/BuyerOrdersService.html":{},"entities/Order.html":{},"injectables/PhotoService.html":{},"injectables/PhotographerOrdersService.html":{},"injectables/SeedService.html":{}}}],["fotógrafos",{"_index":2242,"title":{},"body":{"injectables/SeedService.html":{}}}],["found",{"_index":598,"title":{},"body":{"injectables/AlbumAccessService.html":{},"injectables/BuyerOrdersService.html":{},"injectables/SubscriptionService.html":{},"injectables/UserService.html":{}}}],["framework",{"_index":2666,"title":{},"body":{"index.html":{}}}],["free",{"_index":2268,"title":{},"body":{"injectables/SeedService.html":{},"entities/SubscriptionPlan.html":{},"injectables/SubscriptionService.html":{},"miscellaneous/variables.html":{}}}],["freeplan",{"_index":2411,"title":{},"body":{"injectables/SubscriptionService.html":{}}}],["frontend",{"_index":2024,"title":{},"body":{"controllers/PhotoController.html":{},"injectables/PhotoService.html":{}}}],["fue",{"_index":1280,"title":{},"body":{"injectables/BuyerOrdersService.html":{},"injectables/PasswordResetService.html":{},"injectables/PhotographerOrdersService.html":{},"injectables/SubscriptionService.html":{}}}],["full",{"_index":2757,"title":{},"body":{"index.html":{}}}],["function",{"_index":2587,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":2652,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["físico",{"_index":1775,"title":{},"body":{"entities/Order.html":{}}}],["g",{"_index":1487,"title":{},"body":{"injectables/FilesService.html":{},"index.html":{}}}],["galerías/listados",{"_index":1516,"title":{},"body":{"injectables/FilesService.html":{}}}],["generada",{"_index":1737,"title":{},"body":{"injectables/MercadopagoService.html":{}}}],["generatebuyerwelcomeemail",{"_index":1602,"title":{},"body":{"injectables/MailService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["generatenewordernotificationemail",{"_index":1596,"title":{},"body":{"injectables/MailService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["generatenewordernotificationemail(orderid",{"_index":2659,"title":{},"body":{"miscellaneous/functions.html":{}}}],["generatepasswordresetemail",{"_index":1594,"title":{},"body":{"injectables/MailService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["generatepasswordresetemail(__namedparameters",{"_index":2660,"title":{},"body":{"miscellaneous/functions.html":{}}}],["generatephotographerwelcomeemail",{"_index":1603,"title":{},"body":{"injectables/MailService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["generateprowelcomeemail",{"_index":1600,"title":{},"body":{"injectables/MailService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["generateprowelcomeemail(__namedparameters",{"_index":2661,"title":{},"body":{"miscellaneous/functions.html":{}}}],["generatepurchaseconfirmationemail",{"_index":1598,"title":{},"body":{"injectables/MailService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["generatepurchaseconfirmationemail(orderid",{"_index":2662,"title":{},"body":{"miscellaneous/functions.html":{}}}],["generatetoken",{"_index":958,"title":{},"body":{"injectables/AuthService.html":{}}}],["generatetoken(user",{"_index":963,"title":{},"body":{"injectables/AuthService.html":{}}}],["get('/:albumid",{"_index":575,"title":{},"body":{"controllers/AlbumAccessController.html":{}}}],["get('/stats",{"_index":357,"title":{},"body":{"controllers/AdminUserController.html":{}}}],["get('/stats')@roles(validroles.super_admin",{"_index":343,"title":{},"body":{"controllers/AdminUserController.html":{}}}],["get('/users",{"_index":355,"title":{},"body":{"controllers/AdminUserController.html":{}}}],["get('/users')@roles(validroles.super_admin",{"_index":345,"title":{},"body":{"controllers/AdminUserController.html":{}}}],["get(':id",{"_index":255,"title":{},"body":{"controllers/AdminOrderController.html":{},"controllers/BuyerOrdersController.html":{},"controllers/PhotographerOrdersController.html":{}}}],["get(':id')@roles(validroles.super_admin",{"_index":231,"title":{},"body":{"controllers/AdminOrderController.html":{}}}],["get(':id/verify",{"_index":1083,"title":{},"body":{"controllers/BuyerOrdersController.html":{}}}],["get(':term",{"_index":665,"title":{},"body":{"controllers/AlbumController.html":{}}}],["get('albums/:id",{"_index":365,"title":{},"body":{"controllers/AdminUserController.html":{}}}],["get('albums/:id')@roles(validroles.super_admin",{"_index":341,"title":{},"body":{"controllers/AdminUserController.html":{}}}],["get('me",{"_index":2334,"title":{},"body":{"controllers/SubscriptionController.html":{},"controllers/UserController.html":{}}}],["get('mercadopago/callback",{"_index":1913,"title":{},"body":{"controllers/PaymentController.html":{}}}],["get('my",{"_index":2163,"title":{},"body":{"controllers/PhotographerOrdersController.html":{}}}],["get('orders",{"_index":2347,"title":{},"body":{"controllers/SubscriptionController.html":{}}}],["get('photographers",{"_index":360,"title":{},"body":{"controllers/AdminUserController.html":{}}}],["get('photographers')@roles(validroles.super_admin",{"_index":350,"title":{},"body":{"controllers/AdminUserController.html":{}}}],["get('photographers/:id",{"_index":362,"title":{},"body":{"controllers/AdminUserController.html":{}}}],["get('photographers/:id')@roles(validroles.super_admin",{"_index":348,"title":{},"body":{"controllers/AdminUserController.html":{}}}],["get('plans",{"_index":2327,"title":{},"body":{"controllers/SubscriptionController.html":{}}}],["get('stats",{"_index":59,"title":{},"body":{"controllers/AdminAlbumController.html":{}}}],["get('stats/dashboard",{"_index":258,"title":{},"body":{"controllers/AdminOrderController.html":{}}}],["get('stats/dashboard')@roles(validroles.super_admin",{"_index":233,"title":{},"body":{"controllers/AdminOrderController.html":{}}}],["get()@roles(validroles.super_admin",{"_index":225,"title":{},"body":{"controllers/AdminOrderController.html":{}}}],["getaccesstoken",{"_index":1925,"title":{},"body":{"injectables/PaymentService.html":{}}}],["getaccesstoken(userid",{"_index":1931,"title":{},"body":{"injectables/PaymentService.html":{}}}],["getaccount",{"_index":1926,"title":{},"body":{"injectables/PaymentService.html":{}}}],["getaccount(userid",{"_index":1935,"title":{},"body":{"injectables/PaymentService.html":{}}}],["getactivesubscription",{"_index":2307,"title":{},"body":{"controllers/SubscriptionController.html":{},"injectables/SubscriptionService.html":{}}}],["getactivesubscription(@req",{"_index":2335,"title":{},"body":{"controllers/SubscriptionController.html":{}}}],["getactivesubscription(req",{"_index":2322,"title":{},"body":{"controllers/SubscriptionController.html":{}}}],["getactivesubscription(user",{"_index":2811,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getactivesubscription(userid",{"_index":2402,"title":{},"body":{"injectables/SubscriptionService.html":{}}}],["getalbum",{"_index":554,"title":{},"body":{"controllers/AlbumAccessController.html":{}}}],["getalbum(@param('albumid",{"_index":576,"title":{},"body":{"controllers/AlbumAccessController.html":{}}}],["getalbum(albumid",{"_index":556,"title":{},"body":{"controllers/AlbumAccessController.html":{}}}],["getalbumbyid",{"_index":329,"title":{},"body":{"controllers/AdminUserController.html":{},"injectables/AlbumAccessService.html":{}}}],["getalbumbyid(@param('id",{"_index":366,"title":{},"body":{"controllers/AdminUserController.html":{}}}],["getalbumbyid(id",{"_index":340,"title":{},"body":{"controllers/AdminUserController.html":{}}}],["getalbumbyid(userid",{"_index":581,"title":{},"body":{"injectables/AlbumAccessService.html":{}}}],["getalbumbyidforadmin",{"_index":380,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["getalbumbyidforadmin(albumid",{"_index":388,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["getalbumstats",{"_index":57,"title":{},"body":{"controllers/AdminAlbumController.html":{}}}],["getallorders",{"_index":217,"title":{},"body":{"controllers/AdminOrderController.html":{}}}],["getallorders(status",{"_index":220,"title":{},"body":{"controllers/AdminOrderController.html":{}}}],["getallphotographers",{"_index":381,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["getallstats",{"_index":330,"title":{},"body":{"controllers/AdminUserController.html":{}}}],["getallusers",{"_index":331,"title":{},"body":{"controllers/AdminUserController.html":{}}}],["getfeepercentage(user",{"_index":2817,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getmany",{"_index":1152,"title":{},"body":{"injectables/BuyerOrdersService.html":{}}}],["getmaxalbums(user",{"_index":2824,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getme",{"_index":2530,"title":{},"body":{"controllers/UserController.html":{}}}],["getme(@req",{"_index":2539,"title":{},"body":{"controllers/UserController.html":{}}}],["getme(req",{"_index":2532,"title":{},"body":{"controllers/UserController.html":{}}}],["getmyorders",{"_index":1046,"title":{},"body":{"controllers/BuyerOrdersController.html":{}}}],["getmyorders(@req",{"_index":1076,"title":{},"body":{"controllers/BuyerOrdersController.html":{}}}],["getmyorders(req",{"_index":1057,"title":{},"body":{"controllers/BuyerOrdersController.html":{}}}],["getorderbyid",{"_index":218,"title":{},"body":{"controllers/AdminOrderController.html":{},"controllers/BuyerOrdersController.html":{},"injectables/BuyerOrdersService.html":{},"controllers/PhotographerOrdersController.html":{},"injectables/PhotographerOrdersService.html":{}}}],["getorderbyid(@param('id",{"_index":256,"title":{},"body":{"controllers/AdminOrderController.html":{},"controllers/BuyerOrdersController.html":{}}}],["getorderbyid(@req",{"_index":2166,"title":{},"body":{"controllers/PhotographerOrdersController.html":{}}}],["getorderbyid(id",{"_index":230,"title":{},"body":{"controllers/AdminOrderController.html":{},"controllers/BuyerOrdersController.html":{}}}],["getorderbyid(orderid",{"_index":1116,"title":{},"body":{"injectables/BuyerOrdersService.html":{}}}],["getorderbyid(photographerid",{"_index":2174,"title":{},"body":{"injectables/PhotographerOrdersService.html":{}}}],["getorderbyid(req",{"_index":2151,"title":{},"body":{"controllers/PhotographerOrdersController.html":{}}}],["getorders",{"_index":2149,"title":{},"body":{"controllers/PhotographerOrdersController.html":{},"controllers/SubscriptionController.html":{}}}],["getorders(@req",{"_index":2164,"title":{},"body":{"controllers/PhotographerOrdersController.html":{},"controllers/SubscriptionController.html":{}}}],["getorders(req",{"_index":2153,"title":{},"body":{"controllers/PhotographerOrdersController.html":{},"controllers/SubscriptionController.html":{}}}],["getordersbybuyer",{"_index":1100,"title":{},"body":{"injectables/BuyerOrdersService.html":{}}}],["getordersbybuyer(buyerid",{"_index":1118,"title":{},"body":{"injectables/BuyerOrdersService.html":{}}}],["getordersforphotographer",{"_index":2171,"title":{},"body":{"injectables/PhotographerOrdersService.html":{}}}],["getordersforphotographer(photographerid",{"_index":2176,"title":{},"body":{"injectables/PhotographerOrdersService.html":{}}}],["getorderstats",{"_index":219,"title":{},"body":{"controllers/AdminOrderController.html":{}}}],["getphotographerbyid",{"_index":332,"title":{},"body":{"controllers/AdminUserController.html":{},"injectables/AdminUserService.html":{}}}],["getphotographerbyid(@param('id",{"_index":363,"title":{},"body":{"controllers/AdminUserController.html":{}}}],["getphotographerbyid(id",{"_index":347,"title":{},"body":{"controllers/AdminUserController.html":{},"injectables/AdminUserService.html":{}}}],["getphotographers",{"_index":333,"title":{},"body":{"controllers/AdminUserController.html":{}}}],["getphotos",{"_index":1991,"title":{},"body":{"controllers/PhotoController.html":{}}}],["getphotos(@req",{"_index":2027,"title":{},"body":{"controllers/PhotoController.html":{}}}],["getphotos(req",{"_index":1999,"title":{},"body":{"controllers/PhotoController.html":{}}}],["getplans",{"_index":2308,"title":{},"body":{"controllers/SubscriptionController.html":{},"injectables/SubscriptionService.html":{}}}],["getrawmany",{"_index":446,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["getrawone",{"_index":163,"title":{},"body":{"injectables/AdminAlbumService.html":{},"injectables/AdminOrderService.html":{}}}],["getstats",{"_index":98,"title":{},"body":{"injectables/AdminAlbumService.html":{},"injectables/AdminOrderService.html":{},"injectables/AdminUserService.html":{}}}],["getuserorders",{"_index":2386,"title":{},"body":{"injectables/SubscriptionService.html":{}}}],["getuserorders(userid",{"_index":2405,"title":{},"body":{"injectables/SubscriptionService.html":{}}}],["global",{"_index":829,"title":{},"body":{"modules/AppModule.html":{}}}],["google",{"_index":987,"title":{},"body":{"injectables/AuthService.html":{},"entities/User.html":{},"dependencies.html":{}}}],["grant_type",{"_index":1953,"title":{},"body":{"injectables/PaymentService.html":{}}}],["grantaccess",{"_index":555,"title":{},"body":{"controllers/AlbumAccessController.html":{},"injectables/AlbumAccessService.html":{}}}],["grantaccess(body",{"_index":560,"title":{},"body":{"controllers/AlbumAccessController.html":{}}}],["grantaccess(userid",{"_index":583,"title":{},"body":{"injectables/AlbumAccessService.html":{}}}],["graph",{"_index":2751,"title":{},"body":{"index.html":{},"modules.html":{}}}],["gratuito",{"_index":2270,"title":{},"body":{"injectables/SeedService.html":{}}}],["greater",{"_index":1227,"title":{},"body":{"injectables/BuyerOrdersService.html":{}}}],["groupby('user.id",{"_index":445,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["grow",{"_index":2772,"title":{},"body":{"index.html":{}}}],["guard",{"_index":904,"title":{"guards/AuthGuard.html":{},"guards/RolesGuard.html":{}},"body":{"coverage.html":{}}}],["guardamos",{"_index":1801,"title":{},"body":{"entities/OrderItem.html":{}}}],["guardar",{"_index":1959,"title":{},"body":{"injectables/PaymentService.html":{},"injectables/PhotoService.html":{}}}],["guards",{"_index":905,"title":{},"body":{"guards/AuthGuard.html":{},"guards/RolesGuard.html":{},"overview.html":{}}}],["handlepaymentupdate",{"_index":1670,"title":{},"body":{"injectables/MercadopagoService.html":{}}}],["handlepaymentupdate(payment",{"_index":1676,"title":{},"body":{"injectables/MercadopagoService.html":{}}}],["handlewebhook",{"_index":1624,"title":{},"body":{"controllers/MercadopagoController.html":{}}}],["handlewebhook(req",{"_index":1625,"title":{},"body":{"controllers/MercadopagoController.html":{}}}],["hands",{"_index":2745,"title":{},"body":{"index.html":{}}}],["handy",{"_index":2734,"title":{},"body":{"index.html":{}}}],["hasheada",{"_index":544,"title":{},"body":{"entities/Album.html":{}}}],["hashedpassword",{"_index":980,"title":{},"body":{"injectables/AuthService.html":{},"injectables/SeedService.html":{}}}],["hay",{"_index":1634,"title":{},"body":{"controllers/MercadopagoController.html":{},"injectables/PhotoService.html":{},"injectables/SubscriptionService.html":{}}}],["headers",{"_index":1256,"title":{},"body":{"injectables/BuyerOrdersService.html":{},"controllers/MercadopagoController.html":{},"injectables/MercadopagoService.html":{},"injectables/SubscriptionService.html":{}}}],["headers('x",{"_index":1633,"title":{},"body":{"controllers/MercadopagoController.html":{}}}],["help",{"_index":2749,"title":{},"body":{"index.html":{}}}],["helper",{"_index":1215,"title":{},"body":{"injectables/BuyerOrdersService.html":{},"injectables/FilesService.html":{}}}],["here",{"_index":2780,"title":{},"body":{"index.html":{}}}],["histórica",{"_index":1805,"title":{},"body":{"entities/OrderItem.html":{}}}],["hizo",{"_index":1640,"title":{},"body":{"controllers/MercadopagoController.html":{}}}],["hmac",{"_index":1731,"title":{},"body":{"injectables/MercadopagoService.html":{}}}],["html",{"_index":1577,"title":{},"body":{"injectables/MailService.html":{}}}],["htmlcontent",{"_index":1613,"title":{},"body":{"injectables/MailService.html":{}}}],["http",{"_index":890,"title":{},"body":{"controllers/AuthController.html":{}}}],["http://localhost:3000/reset",{"_index":1863,"title":{},"body":{"injectables/PasswordResetService.html":{}}}],["httpmodule",{"_index":1665,"title":{},"body":{"modules/MercadopagoModule.html":{}}}],["httponly",{"_index":892,"title":{},"body":{"controllers/AuthController.html":{}}}],["https://api.mercadopago.com/checkout/preferences",{"_index":1255,"title":{},"body":{"injectables/BuyerOrdersService.html":{},"injectables/SubscriptionService.html":{}}}],["https://api.mercadopago.com/oauth/token",{"_index":1948,"title":{},"body":{"injectables/PaymentService.html":{}}}],["https://api.mercadopago.com/v1/payments/${data.id",{"_index":1695,"title":{},"body":{"injectables/MercadopagoService.html":{}}}],["https://nestjs.com",{"_index":2786,"title":{},"body":{"index.html":{}}}],["httpservice",{"_index":1674,"title":{},"body":{"injectables/MercadopagoService.html":{}}}],["i.photoid",{"_index":1146,"title":{},"body":{"injectables/BuyerOrdersService.html":{}}}],["i.photourl",{"_index":1206,"title":{},"body":{"injectables/BuyerOrdersService.html":{}}}],["i.quantity",{"_index":1207,"title":{},"body":{"injectables/BuyerOrdersService.html":{}}}],["i.size",{"_index":1204,"title":{},"body":{"injectables/BuyerOrdersService.html":{}}}],["id",{"_index":21,"title":{},"body":{"classes/AdminAlbumByIdDto.html":{},"classes/AdminAlbumDto.html":{},"interfaces/AdminAlbumSummaryDto.html":{},"controllers/AdminOrderController.html":{},"injectables/AdminOrderService.html":{},"interfaces/AdminPhotographerByIdDto.html":{},"controllers/AdminUserController.html":{},"classes/AdminUserDto.html":{},"injectables/AdminUserService.html":{},"entities/Album.html":{},"injectables/AlbumAccessService.html":{},"controllers/AlbumController.html":{},"injectables/AlbumService.html":{},"classes/AlbumSummaryDto.html":{},"injectables/AuthService.html":{},"controllers/BuyerOrdersController.html":{},"injectables/BuyerOrdersService.html":{},"entities/Lead.html":{},"controllers/MercadopagoController.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"classes/OrderItemResponseDto.html":{},"classes/OrderResponseDto.html":{},"injectables/PasswordResetService.html":{},"entities/PasswordResetToken.html":{},"entities/PaymentAccount.html":{},"injectables/PaymentService.html":{},"entities/Photo.html":{},"controllers/PhotoController.html":{},"injectables/PhotoService.html":{},"controllers/PhotographerOrdersController.html":{},"injectables/PhotographerOrdersService.html":{},"entities/Subscription.html":{},"entities/SubscriptionOrder.html":{},"entities/SubscriptionPlan.html":{},"injectables/SubscriptionService.html":{},"entities/User.html":{},"injectables/UserService.html":{}}}],["id.dto",{"_index":400,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["id.dto.ts",{"_index":14,"title":{},"body":{"classes/AdminAlbumByIdDto.html":{},"interfaces/AdminAlbumSummaryDto.html":{},"interfaces/AdminPhotographerByIdDto.html":{},"coverage.html":{}}}],["id.dto.ts:10",{"_index":31,"title":{},"body":{"classes/AdminAlbumByIdDto.html":{}}}],["id.dto.ts:11",{"_index":32,"title":{},"body":{"classes/AdminAlbumByIdDto.html":{}}}],["id.dto.ts:13",{"_index":43,"title":{},"body":{"classes/AdminAlbumByIdDto.html":{}}}],["id.dto.ts:15",{"_index":38,"title":{},"body":{"classes/AdminAlbumByIdDto.html":{}}}],["id.dto.ts:3",{"_index":36,"title":{},"body":{"classes/AdminAlbumByIdDto.html":{}}}],["id.dto.ts:4",{"_index":41,"title":{},"body":{"classes/AdminAlbumByIdDto.html":{}}}],["id.dto.ts:5",{"_index":33,"title":{},"body":{"classes/AdminAlbumByIdDto.html":{}}}],["id.dto.ts:6",{"_index":35,"title":{},"body":{"classes/AdminAlbumByIdDto.html":{}}}],["id.dto.ts:7",{"_index":39,"title":{},"body":{"classes/AdminAlbumByIdDto.html":{}}}],["id.dto.ts:9",{"_index":40,"title":{},"body":{"classes/AdminAlbumByIdDto.html":{}}}],["id:${body.data.id.tostring().tolowercase",{"_index":1728,"title":{},"body":{"injectables/MercadopagoService.html":{}}}],["id:${requestid",{"_index":1729,"title":{},"body":{"injectables/MercadopagoService.html":{}}}],["identificador",{"_index":740,"title":{},"body":{"injectables/AlbumService.html":{}}}],["identifier",{"_index":2584,"title":{},"body":{"coverage.html":{}}}],["ids",{"_index":1150,"title":{},"body":{"injectables/BuyerOrdersService.html":{}}}],["igual",{"_index":271,"title":{},"body":{"injectables/AdminOrderService.html":{}}}],["image",{"_index":178,"title":{},"body":{"interfaces/AdminAlbumSummaryDto.html":{},"interfaces/AdminPhotographerByIdDto.html":{},"injectables/AdminUserService.html":{},"injectables/AuthService.html":{},"classes/BaseUserDto.html":{},"classes/CreateUserDto.html":{},"injectables/FilesService.html":{},"classes/LoginDto.html":{},"entities/User.html":{}}}],["image/webp",{"_index":1438,"title":{},"body":{"controllers/FilesController.html":{},"injectables/PhotoService.html":{}}}],["imagen",{"_index":2133,"title":{},"body":{"injectables/PhotoService.html":{}}}],["implements",{"_index":917,"title":{},"body":{"guards/AuthGuard.html":{},"guards/RolesGuard.html":{}}}],["import",{"_index":64,"title":{},"body":{"controllers/AdminAlbumController.html":{},"injectables/AdminAlbumService.html":{},"modules/AdminModule.html":{},"controllers/AdminOrderController.html":{},"injectables/AdminOrderService.html":{},"controllers/AdminUserController.html":{},"injectables/AdminUserService.html":{},"entities/Album.html":{},"controllers/AlbumAccessController.html":{},"injectables/AlbumAccessService.html":{},"controllers/AlbumController.html":{},"modules/AlbumModule.html":{},"injectables/AlbumService.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseUserDto.html":{},"controllers/BuyerOrdersController.html":{},"injectables/BuyerOrdersService.html":{},"modules/CommonModule.html":{},"classes/CreateAlbumDto.html":{},"classes/CreateLeadDto.html":{},"classes/CreateOrderDto.html":{},"classes/CreatePaymentAccountDto.html":{},"classes/CreatePhotoDto.html":{},"classes/CreateSubscriptionOrderDto.html":{},"classes/CreateUserDto.html":{},"controllers/FilesController.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"entities/Lead.html":{},"controllers/LeadController.html":{},"modules/LeadModule.html":{},"injectables/LeadService.html":{},"classes/LoginDto.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"controllers/MercadopagoController.html":{},"modules/MercadopagoModule.html":{},"injectables/MercadopagoService.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"classes/OrderItemDto.html":{},"modules/OrdersModule.html":{},"classes/PaginationDto.html":{},"injectables/PasswordResetService.html":{},"entities/PasswordResetToken.html":{},"entities/PaymentAccount.html":{},"controllers/PaymentController.html":{},"modules/PaymentModule.html":{},"injectables/PaymentService.html":{},"entities/Photo.html":{},"controllers/PhotoController.html":{},"modules/PhotoModule.html":{},"injectables/PhotoService.html":{},"controllers/PhotographerOrdersController.html":{},"injectables/PhotographerOrdersService.html":{},"classes/PriceOptionDto.html":{},"guards/RolesGuard.html":{},"controllers/SeedController.html":{},"modules/SeedModule.html":{},"injectables/SeedService.html":{},"entities/Subscription.html":{},"controllers/SubscriptionController.html":{},"modules/SubscriptionModule.html":{},"entities/SubscriptionOrder.html":{},"entities/SubscriptionPlan.html":{},"injectables/SubscriptionService.html":{},"classes/UpdateAdminDto.html":{},"classes/UpdateAlbumDto.html":{},"classes/UpdateDeliveryStatusDto.html":{},"classes/UpdateLeadDto.html":{},"classes/UpdateMercadopagoDto.html":{},"classes/UpdateOrderDto.html":{},"classes/UpdatePaymentDto.html":{},"classes/UpdatePhotoDto.html":{},"classes/UpdateSeedDto.html":{},"classes/UpdateSubscriptionDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["importantes",{"_index":1803,"title":{},"body":{"entities/OrderItem.html":{}}}],["imports",{"_index":213,"title":{},"body":{"modules/AdminModule.html":{},"modules/AlbumModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/FilesModule.html":{},"modules/LeadModule.html":{},"modules/MercadopagoModule.html":{},"modules/OrdersModule.html":{},"modules/PaymentModule.html":{},"modules/PhotoModule.html":{},"modules/SeedModule.html":{},"modules/SubscriptionModule.html":{},"modules/UserModule.html":{}}}],["in_mediation",{"_index":1769,"title":{},"body":{"entities/Order.html":{},"entities/SubscriptionOrder.html":{},"miscellaneous/typealiases.html":{}}}],["in_process",{"_index":1768,"title":{},"body":{"entities/Order.html":{},"entities/SubscriptionOrder.html":{},"miscellaneous/typealiases.html":{}}}],["in_progress",{"_index":308,"title":{},"body":{"injectables/AdminOrderService.html":{},"entities/Order.html":{},"classes/UpdateDeliveryStatusDto.html":{},"miscellaneous/typealiases.html":{}}}],["income",{"_index":317,"title":{},"body":{"injectables/AdminOrderService.html":{}}}],["incomeapproved",{"_index":320,"title":{},"body":{"injectables/AdminOrderService.html":{}}}],["incomepending",{"_index":322,"title":{},"body":{"injectables/AdminOrderService.html":{}}}],["incrementa",{"_index":710,"title":{},"body":{"injectables/AlbumService.html":{}}}],["incrementar",{"_index":2073,"title":{},"body":{"injectables/PhotoService.html":{}}}],["incrementphotoscount",{"_index":689,"title":{},"body":{"injectables/AlbumService.html":{}}}],["incrementphotoscount(albumid",{"_index":699,"title":{},"body":{"injectables/AlbumService.html":{}}}],["index",{"_index":15,"title":{"index.html":{}},"body":{"classes/AdminAlbumByIdDto.html":{},"controllers/AdminAlbumController.html":{},"classes/AdminAlbumDto.html":{},"injectables/AdminAlbumService.html":{},"interfaces/AdminAlbumSummaryDto.html":{},"controllers/AdminOrderController.html":{},"injectables/AdminOrderService.html":{},"interfaces/AdminPhotographerByIdDto.html":{},"controllers/AdminUserController.html":{},"classes/AdminUserDto.html":{},"injectables/AdminUserService.html":{},"entities/Album.html":{},"controllers/AlbumAccessController.html":{},"injectables/AlbumAccessService.html":{},"controllers/AlbumController.html":{},"injectables/AlbumService.html":{},"classes/AlbumSummaryDto.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/BaseUserDto.html":{},"controllers/BuyerOrdersController.html":{},"injectables/BuyerOrdersService.html":{},"classes/CreateAlbumDto.html":{},"classes/CreateLeadDto.html":{},"classes/CreateOrderDto.html":{},"classes/CreatePaymentAccountDto.html":{},"classes/CreatePhotoDto.html":{},"classes/CreateSubscriptionOrderDto.html":{},"classes/CreateUserDto.html":{},"controllers/FilesController.html":{},"injectables/FilesService.html":{},"entities/Lead.html":{},"controllers/LeadController.html":{},"injectables/LeadService.html":{},"classes/LoginDto.html":{},"injectables/MailService.html":{},"controllers/MercadopagoController.html":{},"injectables/MercadopagoService.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"classes/OrderItemDto.html":{},"classes/OrderItemResponseDto.html":{},"classes/OrderResponseDto.html":{},"classes/PaginationDto.html":{},"injectables/PasswordResetService.html":{},"entities/PasswordResetToken.html":{},"entities/PaymentAccount.html":{},"controllers/PaymentController.html":{},"injectables/PaymentService.html":{},"entities/Photo.html":{},"controllers/PhotoController.html":{},"injectables/PhotoService.html":{},"controllers/PhotographerOrdersController.html":{},"injectables/PhotographerOrdersService.html":{},"classes/PriceOptionDto.html":{},"guards/RolesGuard.html":{},"controllers/SeedController.html":{},"injectables/SeedService.html":{},"entities/Subscription.html":{},"controllers/SubscriptionController.html":{},"entities/SubscriptionOrder.html":{},"entities/SubscriptionPlan.html":{},"injectables/SubscriptionService.html":{},"classes/UpdateDeliveryStatusDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["index(['userevent",{"_index":534,"title":{},"body":{"entities/Album.html":{}}}],["individual",{"_index":1515,"title":{},"body":{"injectables/FilesService.html":{},"injectables/PhotoService.html":{}}}],["inesperado",{"_index":1612,"title":{},"body":{"injectables/MailService.html":{}}}],["infinitos",{"_index":1658,"title":{},"body":{"controllers/MercadopagoController.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/Admin.html":{},"classes/AdminAlbumByIdDto.html":{},"controllers/AdminAlbumController.html":{},"classes/AdminAlbumDto.html":{},"injectables/AdminAlbumService.html":{},"interfaces/AdminAlbumSummaryDto.html":{},"modules/AdminModule.html":{},"controllers/AdminOrderController.html":{},"injectables/AdminOrderService.html":{},"interfaces/AdminPhotographerByIdDto.html":{},"controllers/AdminUserController.html":{},"classes/AdminUserDto.html":{},"injectables/AdminUserService.html":{},"entities/Album.html":{},"controllers/AlbumAccessController.html":{},"injectables/AlbumAccessService.html":{},"controllers/AlbumController.html":{},"modules/AlbumModule.html":{},"injectables/AlbumService.html":{},"classes/AlbumSummaryDto.html":{},"modules/AppModule.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseUserDto.html":{},"controllers/BuyerOrdersController.html":{},"injectables/BuyerOrdersService.html":{},"modules/CommonModule.html":{},"classes/CreateAdminDto.html":{},"classes/CreateAlbumDto.html":{},"classes/CreateLeadDto.html":{},"classes/CreateMercadopagoDto.html":{},"classes/CreateOrderDto.html":{},"classes/CreatePaymentAccountDto.html":{},"classes/CreatePhotoDto.html":{},"classes/CreateSeedDto.html":{},"classes/CreateSubscriptionDto.html":{},"classes/CreateSubscriptionOrderDto.html":{},"classes/CreateUserDto.html":{},"controllers/FilesController.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"entities/Lead.html":{},"controllers/LeadController.html":{},"modules/LeadModule.html":{},"injectables/LeadService.html":{},"classes/LoginDto.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"classes/Mercadopago.html":{},"controllers/MercadopagoController.html":{},"modules/MercadopagoModule.html":{},"injectables/MercadopagoService.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"classes/OrderItemDto.html":{},"classes/OrderItemResponseDto.html":{},"classes/OrderResponseDto.html":{},"modules/OrdersModule.html":{},"classes/PaginationDto.html":{},"injectables/PasswordResetService.html":{},"entities/PasswordResetToken.html":{},"entities/PaymentAccount.html":{},"controllers/PaymentController.html":{},"modules/PaymentModule.html":{},"injectables/PaymentService.html":{},"entities/Photo.html":{},"controllers/PhotoController.html":{},"modules/PhotoModule.html":{},"injectables/PhotoService.html":{},"controllers/PhotographerOrdersController.html":{},"injectables/PhotographerOrdersService.html":{},"classes/PriceOptionDto.html":{},"guards/RolesGuard.html":{},"classes/Seed.html":{},"controllers/SeedController.html":{},"modules/SeedModule.html":{},"injectables/SeedService.html":{},"entities/Subscription.html":{},"controllers/SubscriptionController.html":{},"modules/SubscriptionModule.html":{},"entities/SubscriptionOrder.html":{},"entities/SubscriptionPlan.html":{},"injectables/SubscriptionService.html":{},"classes/UpdateAdminDto.html":{},"classes/UpdateAlbumDto.html":{},"classes/UpdateDeliveryStatusDto.html":{},"classes/UpdateLeadDto.html":{},"classes/UpdateMercadopagoDto.html":{},"classes/UpdateOrderDto.html":{},"classes/UpdatePaymentDto.html":{},"classes/UpdatePhotoDto.html":{},"classes/UpdateSeedDto.html":{},"classes/UpdateSubscriptionDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["information",{"_index":2708,"title":{},"body":{"index.html":{}}}],["infrastructure",{"_index":2731,"title":{},"body":{"index.html":{}}}],["ingresos",{"_index":311,"title":{},"body":{"injectables/AdminOrderService.html":{}}}],["inicial",{"_index":992,"title":{},"body":{"injectables/AuthService.html":{},"injectables/SeedService.html":{},"injectables/SubscriptionService.html":{}}}],["init_point",{"_index":1261,"title":{},"body":{"injectables/BuyerOrdersService.html":{},"injectables/SubscriptionService.html":{}}}],["initial",{"_index":2314,"title":{},"body":{"controllers/SubscriptionController.html":{}}}],["inject",{"_index":586,"title":{},"body":{"injectables/AlbumAccessService.html":{},"injectables/AlbumService.html":{},"injectables/PhotoService.html":{}}}],["inject(forwardref",{"_index":591,"title":{},"body":{"injectables/AlbumAccessService.html":{},"injectables/AlbumService.html":{},"injectables/PhotoService.html":{}}}],["injectable",{"_index":95,"title":{"injectables/AdminAlbumService.html":{},"injectables/AdminOrderService.html":{},"injectables/AdminUserService.html":{},"injectables/AlbumAccessService.html":{},"injectables/AlbumService.html":{},"injectables/AuthService.html":{},"injectables/BuyerOrdersService.html":{},"injectables/FilesService.html":{},"injectables/LeadService.html":{},"injectables/MailService.html":{},"injectables/MercadopagoService.html":{},"injectables/PasswordResetService.html":{},"injectables/PaymentService.html":{},"injectables/PhotoService.html":{},"injectables/PhotographerOrdersService.html":{},"injectables/SeedService.html":{},"injectables/SubscriptionService.html":{},"injectables/UserService.html":{}},"body":{"injectables/AdminAlbumService.html":{},"injectables/AdminOrderService.html":{},"injectables/AdminUserService.html":{},"injectables/AlbumAccessService.html":{},"injectables/AlbumService.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/BuyerOrdersService.html":{},"injectables/FilesService.html":{},"injectables/LeadService.html":{},"injectables/MailService.html":{},"injectables/MercadopagoService.html":{},"injectables/PasswordResetService.html":{},"injectables/PaymentService.html":{},"injectables/PhotoService.html":{},"injectables/PhotographerOrdersService.html":{},"guards/RolesGuard.html":{},"injectables/SeedService.html":{},"injectables/SubscriptionService.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["injectables",{"_index":96,"title":{},"body":{"injectables/AdminAlbumService.html":{},"injectables/AdminOrderService.html":{},"injectables/AdminUserService.html":{},"injectables/AlbumAccessService.html":{},"injectables/AlbumService.html":{},"injectables/AuthService.html":{},"injectables/BuyerOrdersService.html":{},"injectables/FilesService.html":{},"injectables/LeadService.html":{},"injectables/MailService.html":{},"injectables/MercadopagoService.html":{},"injectables/PasswordResetService.html":{},"injectables/PaymentService.html":{},"injectables/PhotoService.html":{},"injectables/PhotographerOrdersService.html":{},"injectables/SeedService.html":{},"injectables/SubscriptionService.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["injectrepository",{"_index":107,"title":{},"body":{"injectables/AdminAlbumService.html":{},"injectables/AdminOrderService.html":{},"injectables/AdminUserService.html":{},"injectables/AlbumAccessService.html":{},"injectables/AlbumService.html":{},"injectables/BuyerOrdersService.html":{},"injectables/LeadService.html":{},"injectables/PasswordResetService.html":{},"injectables/PaymentService.html":{},"injectables/PhotoService.html":{},"injectables/PhotographerOrdersService.html":{},"injectables/SeedService.html":{},"injectables/SubscriptionService.html":{},"injectables/UserService.html":{}}}],["injectrepository(album",{"_index":113,"title":{},"body":{"injectables/AdminAlbumService.html":{},"injectables/AdminUserService.html":{},"injectables/AlbumAccessService.html":{},"injectables/AlbumService.html":{},"injectables/BuyerOrdersService.html":{}}}],["injectrepository(lead",{"_index":1547,"title":{},"body":{"injectables/LeadService.html":{}}}],["injectrepository(order",{"_index":115,"title":{},"body":{"injectables/AdminAlbumService.html":{},"injectables/AdminOrderService.html":{},"injectables/BuyerOrdersService.html":{},"injectables/PhotographerOrdersService.html":{}}}],["injectrepository(passwordresettoken",{"_index":1858,"title":{},"body":{"injectables/PasswordResetService.html":{}}}],["injectrepository(paymentaccount",{"_index":1947,"title":{},"body":{"injectables/PaymentService.html":{}}}],["injectrepository(photo",{"_index":1137,"title":{},"body":{"injectables/BuyerOrdersService.html":{},"injectables/PhotoService.html":{}}}],["injectrepository(subscription",{"_index":2409,"title":{},"body":{"injectables/SubscriptionService.html":{}}}],["injectrepository(subscriptionorder",{"_index":2410,"title":{},"body":{"injectables/SubscriptionService.html":{}}}],["injectrepository(subscriptionplan",{"_index":2240,"title":{},"body":{"injectables/SeedService.html":{},"injectables/SubscriptionService.html":{}}}],["injectrepository(user",{"_index":401,"title":{},"body":{"injectables/AdminUserService.html":{},"injectables/BuyerOrdersService.html":{},"injectables/PasswordResetService.html":{},"injectables/PhotographerOrdersService.html":{},"injectables/UserService.html":{}}}],["install",{"_index":2723,"title":{},"body":{"index.html":{}}}],["installcompile",{"_index":2680,"title":{},"body":{"index.html":{}}}],["insuficientes",{"_index":989,"title":{},"body":{"injectables/AuthService.html":{}}}],["int",{"_index":516,"title":{},"body":{"entities/Album.html":{}}}],["intentamos",{"_index":120,"title":{},"body":{"injectables/AdminAlbumService.html":{}}}],["intentos",{"_index":821,"title":{},"body":{"modules/AppModule.html":{}}}],["interact",{"_index":2752,"title":{},"body":{"index.html":{}}}],["intercambia",{"_index":1939,"title":{},"body":{"injectables/PaymentService.html":{}}}],["interface",{"_index":167,"title":{"interfaces/AdminAlbumSummaryDto.html":{},"interfaces/AdminPhotographerByIdDto.html":{}},"body":{"interfaces/AdminAlbumSummaryDto.html":{},"interfaces/AdminPhotographerByIdDto.html":{},"coverage.html":{}}}],["interfaces",{"_index":169,"title":{},"body":{"interfaces/AdminAlbumSummaryDto.html":{},"interfaces/AdminPhotographerByIdDto.html":{},"overview.html":{}}}],["intermedios",{"_index":1778,"title":{},"body":{"entities/Order.html":{}}}],["internalservererrorexception",{"_index":971,"title":{},"body":{"injectables/AuthService.html":{},"injectables/MercadopagoService.html":{}}}],["invalido",{"_index":944,"title":{},"body":{"guards/AuthGuard.html":{}}}],["inválida",{"_index":1692,"title":{},"body":{"injectables/MercadopagoService.html":{}}}],["inválidas",{"_index":1008,"title":{},"body":{"injectables/AuthService.html":{}}}],["inválido",{"_index":1872,"title":{},"body":{"injectables/PasswordResetService.html":{}}}],["isactive",{"_index":128,"title":{},"body":{"injectables/AdminAlbumService.html":{},"interfaces/AdminAlbumSummaryDto.html":{},"interfaces/AdminPhotographerByIdDto.html":{},"injectables/AdminUserService.html":{},"entities/Subscription.html":{},"injectables/SubscriptionService.html":{},"entities/User.html":{}}}],["isactivefolder",{"_index":141,"title":{},"body":{"injectables/AdminAlbumService.html":{},"entities/Album.html":{},"injectables/AlbumService.html":{},"classes/CreateAlbumDto.html":{},"classes/PriceOptionDto.html":{}}}],["isarray",{"_index":1346,"title":{},"body":{"classes/CreateAlbumDto.html":{},"classes/CreateOrderDto.html":{},"classes/OrderItemDto.html":{},"classes/PriceOptionDto.html":{}}}],["isarray()@validatenested({each",{"_index":1338,"title":{},"body":{"classes/CreateAlbumDto.html":{},"classes/CreateOrderDto.html":{}}}],["isboolean",{"_index":1347,"title":{},"body":{"classes/CreateAlbumDto.html":{},"classes/PriceOptionDto.html":{}}}],["isdatestring",{"_index":1348,"title":{},"body":{"classes/CreateAlbumDto.html":{},"classes/PriceOptionDto.html":{}}}],["isemail",{"_index":1022,"title":{},"body":{"classes/BaseUserDto.html":{},"classes/CreateAlbumDto.html":{},"classes/CreateLeadDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"classes/PriceOptionDto.html":{}}}],["isenum",{"_index":1033,"title":{},"body":{"classes/BaseUserDto.html":{},"classes/CreateAlbumDto.html":{},"classes/CreatePaymentAccountDto.html":{},"classes/CreateUserDto.html":{},"classes/PriceOptionDto.html":{},"classes/UpdateDeliveryStatusDto.html":{}}}],["isenum(['mercadopago",{"_index":1385,"title":{},"body":{"classes/CreatePaymentAccountDto.html":{}}}],["isenum(['pending",{"_index":2467,"title":{},"body":{"classes/UpdateDeliveryStatusDto.html":{}}}],["isenum(printsize",{"_index":1358,"title":{},"body":{"classes/CreateAlbumDto.html":{},"classes/PriceOptionDto.html":{}}}],["isenum(userrole",{"_index":1029,"title":{},"body":{"classes/BaseUserDto.html":{},"classes/CreateUserDto.html":{}}}],["isglobal",{"_index":811,"title":{},"body":{"modules/AppModule.html":{}}}],["isint",{"_index":1373,"title":{},"body":{"classes/CreateOrderDto.html":{},"classes/OrderItemDto.html":{}}}],["isint()@min(1",{"_index":1808,"title":{},"body":{"classes/OrderItemDto.html":{}}}],["ismatch",{"_index":1004,"title":{},"body":{"injectables/AuthService.html":{}}}],["isnotempty",{"_index":1349,"title":{},"body":{"classes/CreateAlbumDto.html":{},"classes/CreatePaymentAccountDto.html":{},"classes/PriceOptionDto.html":{}}}],["isnotempty()@isboolean",{"_index":1332,"title":{},"body":{"classes/CreateAlbumDto.html":{}}}],["isnotempty()@isdatestring",{"_index":1330,"title":{},"body":{"classes/CreateAlbumDto.html":{}}}],["isnotempty()@isemail",{"_index":1325,"title":{},"body":{"classes/CreateAlbumDto.html":{}}}],["isnotempty()@isenum(printsize",{"_index":2192,"title":{},"body":{"classes/PriceOptionDto.html":{}}}],["isnotempty()@isnumber()@type(undefined",{"_index":1335,"title":{},"body":{"classes/CreateAlbumDto.html":{},"classes/PriceOptionDto.html":{}}}],["isnotempty()@isstring",{"_index":1327,"title":{},"body":{"classes/CreateAlbumDto.html":{}}}],["isnumber",{"_index":1034,"title":{},"body":{"classes/BaseUserDto.html":{},"classes/CreateAlbumDto.html":{},"classes/CreateOrderDto.html":{},"classes/CreatePhotoDto.html":{},"classes/OrderItemDto.html":{},"classes/PriceOptionDto.html":{}}}],["isoptional",{"_index":1035,"title":{},"body":{"classes/BaseUserDto.html":{},"classes/CreateAlbumDto.html":{},"classes/CreatePaymentAccountDto.html":{},"classes/CreatePhotoDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"classes/PaginationDto.html":{},"classes/PriceOptionDto.html":{}}}],["isoptional()@isnumber",{"_index":1031,"title":{},"body":{"classes/BaseUserDto.html":{}}}],["isoptional()@isnumber()@type(undefined",{"_index":1341,"title":{},"body":{"classes/CreateAlbumDto.html":{}}}],["isoptional()@ispositive()@type(undefined",{"_index":1836,"title":{},"body":{"classes/PaginationDto.html":{}}}],["isoptional()@isstring",{"_index":1023,"title":{},"body":{"classes/BaseUserDto.html":{},"classes/CreateAlbumDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{}}}],["isoptional()@isstring()@minlength(6",{"_index":1410,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginDto.html":{}}}],["isoptional()@isurl",{"_index":1407,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginDto.html":{}}}],["isoptional()@min(0)@type(undefined",{"_index":1838,"title":{},"body":{"classes/PaginationDto.html":{}}}],["ispositive",{"_index":1840,"title":{},"body":{"classes/PaginationDto.html":{}}}],["isstring",{"_index":1036,"title":{},"body":{"classes/BaseUserDto.html":{},"classes/CreateAlbumDto.html":{},"classes/CreateOrderDto.html":{},"classes/CreatePaymentAccountDto.html":{},"classes/CreatePhotoDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"classes/OrderItemDto.html":{},"classes/PriceOptionDto.html":{}}}],["isurl",{"_index":1412,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginDto.html":{}}}],["isuuid",{"_index":1369,"title":{},"body":{"classes/CreateOrderDto.html":{},"classes/CreatePhotoDto.html":{},"classes/CreateSubscriptionOrderDto.html":{},"classes/OrderItemDto.html":{},"injectables/PasswordResetService.html":{}}}],["isuuid(tokenid",{"_index":1870,"title":{},"body":{"injectables/PasswordResetService.html":{}}}],["isvalidsignature",{"_index":1671,"title":{},"body":{"injectables/MercadopagoService.html":{}}}],["isvalidsignature(rawbody",{"_index":1678,"title":{},"body":{"injectables/MercadopagoService.html":{}}}],["item",{"_index":1757,"title":{},"body":{"entities/Order.html":{}}}],["item.entity",{"_index":1133,"title":{},"body":{"injectables/BuyerOrdersService.html":{},"entities/Order.html":{},"modules/OrdersModule.html":{}}}],["item.entity.ts",{"_index":1783,"title":{},"body":{"entities/OrderItem.html":{},"coverage.html":{}}}],["item.entity.ts:11",{"_index":1787,"title":{},"body":{"entities/OrderItem.html":{}}}],["item.entity.ts:19",{"_index":1790,"title":{},"body":{"entities/OrderItem.html":{}}}],["item.entity.ts:22",{"_index":1791,"title":{},"body":{"entities/OrderItem.html":{}}}],["item.entity.ts:25",{"_index":1789,"title":{},"body":{"entities/OrderItem.html":{}}}],["item.entity.ts:28",{"_index":1788,"title":{},"body":{"entities/OrderItem.html":{}}}],["item.entity.ts:31",{"_index":1794,"title":{},"body":{"entities/OrderItem.html":{}}}],["item.entity.ts:34",{"_index":1793,"title":{},"body":{"entities/OrderItem.html":{}}}],["item.entity.ts:37",{"_index":1796,"title":{},"body":{"entities/OrderItem.html":{}}}],["item.entity.ts:40",{"_index":1795,"title":{},"body":{"entities/OrderItem.html":{}}}],["item.entity.ts:8",{"_index":1784,"title":{},"body":{"entities/OrderItem.html":{}}}],["item.id",{"_index":1306,"title":{},"body":{"injectables/BuyerOrdersService.html":{}}}],["item.order",{"_index":1758,"title":{},"body":{"entities/Order.html":{}}}],["item.originalphotoid",{"_index":1311,"title":{},"body":{"injectables/BuyerOrdersService.html":{}}}],["item.photothumbnailurl",{"_index":1316,"title":{},"body":{"injectables/BuyerOrdersService.html":{}}}],["item.photourl",{"_index":1312,"title":{},"body":{"injectables/BuyerOrdersService.html":{}}}],["item.photoweburl",{"_index":1314,"title":{},"body":{"injectables/BuyerOrdersService.html":{}}}],["item.quantity",{"_index":1308,"title":{},"body":{"injectables/BuyerOrdersService.html":{}}}],["item.size",{"_index":1307,"title":{},"body":{"injectables/BuyerOrdersService.html":{}}}],["item.subtotal",{"_index":1310,"title":{},"body":{"injectables/BuyerOrdersService.html":{}}}],["item.unitprice",{"_index":1309,"title":{},"body":{"injectables/BuyerOrdersService.html":{}}}],["itemcount",{"_index":1285,"title":{},"body":{"injectables/BuyerOrdersService.html":{},"injectables/MailService.html":{},"miscellaneous/functions.html":{}}}],["itemdto.photoid",{"_index":1160,"title":{},"body":{"injectables/BuyerOrdersService.html":{}}}],["itemdto.quantity",{"_index":1167,"title":{},"body":{"injectables/BuyerOrdersService.html":{}}}],["itemdto.size",{"_index":1166,"title":{},"body":{"injectables/BuyerOrdersService.html":{}}}],["itemdto.unitprice",{"_index":1168,"title":{},"body":{"injectables/BuyerOrdersService.html":{}}}],["items",{"_index":283,"title":{},"body":{"injectables/AdminOrderService.html":{},"classes/AlbumSummaryDto.html":{},"injectables/BuyerOrdersService.html":{},"classes/CreateOrderDto.html":{},"entities/Order.html":{},"classes/OrderItemDto.html":{},"classes/OrderItemResponseDto.html":{},"classes/OrderResponseDto.html":{},"injectables/PhotographerOrdersService.html":{},"injectables/SubscriptionService.html":{}}}],["items.photo",{"_index":284,"title":{},"body":{"injectables/AdminOrderService.html":{},"injectables/PhotographerOrdersService.html":{}}}],["job",{"_index":2765,"title":{},"body":{"index.html":{}}}],["jobs",{"_index":2767,"title":{},"body":{"index.html":{}}}],["join",{"_index":2778,"title":{},"body":{"index.html":{}}}],["jointable",{"_index":528,"title":{},"body":{"entities/Album.html":{}}}],["json.parse(rawbody",{"_index":1652,"title":{},"body":{"controllers/MercadopagoController.html":{},"injectables/MercadopagoService.html":{}}}],["json.stringify(preferencepayload",{"_index":1250,"title":{},"body":{"injectables/BuyerOrdersService.html":{}}}],["jwt",{"_index":1078,"title":{},"body":{"controllers/BuyerOrdersController.html":{},"dependencies.html":{}}}],["jwtmodule",{"_index":795,"title":{},"body":{"modules/AppModule.html":{}}}],["jwtmodule.register",{"_index":828,"title":{},"body":{"modules/AppModule.html":{}}}],["jwtservice",{"_index":909,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{}}}],["kamil",{"_index":2783,"title":{},"body":{"index.html":{}}}],["key",{"_index":2699,"title":{},"body":{"index.html":{}}}],["l",{"_index":1357,"title":{},"body":{"classes/CreateAlbumDto.html":{},"classes/PriceOptionDto.html":{},"miscellaneous/enumerations.html":{}}}],["la",{"_index":126,"title":{},"body":{"injectables/AdminAlbumService.html":{},"interfaces/AdminAlbumSummaryDto.html":{},"interfaces/AdminPhotographerByIdDto.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/BuyerOrdersController.html":{},"injectables/BuyerOrdersService.html":{},"controllers/MercadopagoController.html":{},"injectables/MercadopagoService.html":{},"entities/OrderItem.html":{},"injectables/PhotoService.html":{},"injectables/PhotographerOrdersService.html":{},"injectables/SubscriptionService.html":{},"miscellaneous/variables.html":{}}}],["large",{"_index":1356,"title":{},"body":{"classes/CreateAlbumDto.html":{},"classes/PriceOptionDto.html":{},"miscellaneous/enumerations.html":{}}}],["las",{"_index":758,"title":{},"body":{"injectables/AlbumService.html":{},"controllers/BuyerOrdersController.html":{},"injectables/PhotoService.html":{}}}],["lbum",{"_index":173,"title":{},"body":{"interfaces/AdminAlbumSummaryDto.html":{},"interfaces/AdminPhotographerByIdDto.html":{},"entities/Album.html":{},"injectables/AlbumAccessService.html":{},"injectables/AlbumService.html":{},"injectables/BuyerOrdersService.html":{},"entities/Photo.html":{},"injectables/PhotoService.html":{}}}],["lbumes",{"_index":147,"title":{},"body":{"injectables/AdminAlbumService.html":{},"injectables/AlbumService.html":{}}}],["lead",{"_index":1518,"title":{"entities/Lead.html":{}},"body":{"entities/Lead.html":{},"modules/LeadModule.html":{},"injectables/LeadService.html":{},"coverage.html":{}}}],["lead.controller",{"_index":1538,"title":{},"body":{"modules/LeadModule.html":{}}}],["lead.dto",{"_index":1530,"title":{},"body":{"controllers/LeadController.html":{},"injectables/LeadService.html":{},"classes/UpdateLeadDto.html":{}}}],["lead.dto.ts",{"_index":1362,"title":{},"body":{"classes/CreateLeadDto.html":{},"classes/UpdateLeadDto.html":{},"coverage.html":{}}}],["lead.dto.ts:5",{"_index":1363,"title":{},"body":{"classes/CreateLeadDto.html":{}}}],["lead.service",{"_index":1529,"title":{},"body":{"controllers/LeadController.html":{},"modules/LeadModule.html":{}}}],["lead/lead.module",{"_index":802,"title":{},"body":{"modules/AppModule.html":{}}}],["leadcontroller",{"_index":1523,"title":{"controllers/LeadController.html":{}},"body":{"controllers/LeadController.html":{},"modules/LeadModule.html":{},"coverage.html":{}}}],["leadmodule",{"_index":785,"title":{"modules/LeadModule.html":{}},"body":{"modules/AppModule.html":{},"modules/LeadModule.html":{},"modules.html":{},"overview.html":{}}}],["leadrepo",{"_index":1543,"title":{},"body":{"injectables/LeadService.html":{}}}],["leads",{"_index":1525,"title":{},"body":{"controllers/LeadController.html":{}}}],["leadservice",{"_index":1528,"title":{"injectables/LeadService.html":{}},"body":{"controllers/LeadController.html":{},"modules/LeadModule.html":{},"injectables/LeadService.html":{},"coverage.html":{},"overview.html":{}}}],["learn",{"_index":2737,"title":{},"body":{"index.html":{}}}],["leer",{"_index":2022,"title":{},"body":{"controllers/PhotoController.html":{}}}],["leftjoin('album.orders",{"_index":438,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["leftjoin('user.albums",{"_index":437,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["legend",{"_index":187,"title":{},"body":{"modules/AdminModule.html":{},"modules/AlbumModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/FilesModule.html":{},"modules/LeadModule.html":{},"modules/MailModule.html":{},"modules/MercadopagoModule.html":{},"modules/OrdersModule.html":{},"modules/PaymentModule.html":{},"modules/PhotoModule.html":{},"modules/SeedModule.html":{},"modules/SubscriptionModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["length",{"_index":461,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["lib/.../emailforgotpassword.ts",{"_index":2656,"title":{},"body":{"miscellaneous/functions.html":{}}}],["lib/.../emailnewordernotification.ts",{"_index":2655,"title":{},"body":{"miscellaneous/functions.html":{}}}],["lib/.../emailorderpayment.ts",{"_index":2658,"title":{},"body":{"miscellaneous/functions.html":{}}}],["lib/.../emailprowelcome.ts",{"_index":2657,"title":{},"body":{"miscellaneous/functions.html":{}}}],["lib/.../emailwelcome.ts",{"_index":2654,"title":{},"body":{"miscellaneous/functions.html":{}}}],["lib/emailforgotpassword",{"_index":1595,"title":{},"body":{"injectables/MailService.html":{}}}],["lib/emailforgotpassword.ts",{"_index":2586,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["lib/emailnewordernotification",{"_index":1597,"title":{},"body":{"injectables/MailService.html":{}}}],["lib/emailnewordernotification.ts",{"_index":2589,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["lib/emailorderpayment",{"_index":1599,"title":{},"body":{"injectables/MailService.html":{}}}],["lib/emailorderpayment.ts",{"_index":2590,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["lib/emailprowelcome",{"_index":1601,"title":{},"body":{"injectables/MailService.html":{}}}],["lib/emailprowelcome.ts",{"_index":2591,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["lib/emailwelcome",{"_index":1604,"title":{},"body":{"injectables/MailService.html":{}}}],["lib/emailwelcome.ts",{"_index":2592,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["library",{"_index":2631,"title":{},"body":{"dependencies.html":{}}}],["license",{"_index":2789,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":2770,"title":{},"body":{"index.html":{}}}],["limit",{"_index":224,"title":{},"body":{"controllers/AdminOrderController.html":{},"injectables/AdminOrderService.html":{},"injectables/AlbumService.html":{},"classes/PaginationDto.html":{}}}],["limits",{"_index":2014,"title":{},"body":{"controllers/PhotoController.html":{}}}],["link",{"_index":1861,"title":{},"body":{"injectables/PasswordResetService.html":{}}}],["linkedin",{"_index":2764,"title":{},"body":{"index.html":{}}}],["linkmercadopago",{"_index":1927,"title":{},"body":{"injectables/PaymentService.html":{}}}],["linkmercadopago(userid",{"_index":1937,"title":{},"body":{"injectables/PaymentService.html":{}}}],["listar",{"_index":2122,"title":{},"body":{"injectables/PhotoService.html":{},"injectables/SubscriptionService.html":{}}}],["literal",{"_index":37,"title":{},"body":{"classes/AdminAlbumByIdDto.html":{},"classes/AdminAlbumDto.html":{},"entities/Album.html":{},"controllers/AlbumAccessController.html":{},"classes/AlbumSummaryDto.html":{},"classes/OrderItemResponseDto.html":{}}}],["lo",{"_index":923,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/PhotoService.html":{}}}],["log",{"_index":1682,"title":{},"body":{"injectables/MercadopagoService.html":{},"injectables/PhotoService.html":{}}}],["logger",{"_index":1566,"title":{},"body":{"injectables/MailService.html":{}}}],["logger(mailservice.name",{"_index":1592,"title":{},"body":{"injectables/MailService.html":{}}}],["login",{"_index":841,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["login(dto",{"_index":845,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["login.access_token",{"_index":891,"title":{},"body":{"controllers/AuthController.html":{}}}],["logindto",{"_index":846,"title":{"classes/LoginDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginDto.html":{},"coverage.html":{}}}],["looking",{"_index":2709,"title":{},"body":{"index.html":{}}}],["loop",{"_index":2760,"title":{},"body":{"index.html":{}}}],["los",{"_index":1274,"title":{},"body":{"injectables/BuyerOrdersService.html":{},"entities/OrderItem.html":{}}}],["lowercase",{"_index":275,"title":{},"body":{"injectables/AdminOrderService.html":{}}}],["límite",{"_index":1483,"title":{},"body":{"injectables/FilesService.html":{},"controllers/PhotoController.html":{},"injectables/PhotoService.html":{}}}],["m",{"_index":1355,"title":{},"body":{"classes/CreateAlbumDto.html":{},"classes/PriceOptionDto.html":{},"miscellaneous/enumerations.html":{}}}],["mail",{"_index":1283,"title":{},"body":{"injectables/BuyerOrdersService.html":{},"injectables/SubscriptionService.html":{}}}],["mail.service",{"_index":1564,"title":{},"body":{"modules/MailModule.html":{}}}],["mail/mail.module",{"_index":799,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["mail/mail.service",{"_index":972,"title":{},"body":{"injectables/AuthService.html":{}}}],["mailmodule",{"_index":786,"title":{"modules/MailModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MailModule.html":{},"modules/OrdersModule.html":{},"modules/SubscriptionModule.html":{},"modules.html":{},"overview.html":{}}}],["mailservice",{"_index":961,"title":{"injectables/MailService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/BuyerOrdersService.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"injectables/PasswordResetService.html":{},"injectables/SubscriptionService.html":{},"coverage.html":{},"overview.html":{}}}],["makes",{"_index":2717,"title":{},"body":{"index.html":{}}}],["managing",{"_index":2730,"title":{},"body":{"index.html":{}}}],["mandar",{"_index":1282,"title":{},"body":{"injectables/BuyerOrdersService.html":{}}}],["manera",{"_index":2074,"title":{},"body":{"injectables/PhotoService.html":{}}}],["manytomany",{"_index":529,"title":{},"body":{"entities/Album.html":{},"entities/User.html":{}}}],["manytomany(undefined",{"_index":485,"title":{},"body":{"entities/Album.html":{},"entities/User.html":{}}}],["manytoone",{"_index":530,"title":{},"body":{"entities/Album.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"entities/PasswordResetToken.html":{},"entities/PaymentAccount.html":{},"entities/Photo.html":{},"entities/Subscription.html":{},"entities/SubscriptionOrder.html":{}}}],["manytoone(undefined",{"_index":509,"title":{},"body":{"entities/Album.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"entities/PasswordResetToken.html":{},"entities/PaymentAccount.html":{},"entities/Photo.html":{},"entities/Subscription.html":{},"entities/SubscriptionOrder.html":{}}}],["mapeo",{"_index":1296,"title":{},"body":{"injectables/BuyerOrdersService.html":{}}}],["maptodto",{"_index":1101,"title":{},"body":{"injectables/BuyerOrdersService.html":{}}}],["maptodto(order",{"_index":1120,"title":{},"body":{"injectables/BuyerOrdersService.html":{}}}],["marketplace",{"_index":1222,"title":{},"body":{"injectables/BuyerOrdersService.html":{}}}],["marketplace_fee",{"_index":1238,"title":{},"body":{"injectables/BuyerOrdersService.html":{}}}],["marketplacefee",{"_index":1223,"title":{},"body":{"injectables/BuyerOrdersService.html":{}}}],["marketplaceprovideruserid",{"_index":1230,"title":{},"body":{"injectables/BuyerOrdersService.html":{}}}],["matching",{"_index":10,"title":{},"body":{"classes/Admin.html":{},"classes/AdminAlbumByIdDto.html":{},"controllers/AdminAlbumController.html":{},"classes/AdminAlbumDto.html":{},"injectables/AdminAlbumService.html":{},"interfaces/AdminAlbumSummaryDto.html":{},"modules/AdminModule.html":{},"controllers/AdminOrderController.html":{},"injectables/AdminOrderService.html":{},"interfaces/AdminPhotographerByIdDto.html":{},"controllers/AdminUserController.html":{},"classes/AdminUserDto.html":{},"injectables/AdminUserService.html":{},"entities/Album.html":{},"controllers/AlbumAccessController.html":{},"injectables/AlbumAccessService.html":{},"controllers/AlbumController.html":{},"modules/AlbumModule.html":{},"injectables/AlbumService.html":{},"classes/AlbumSummaryDto.html":{},"modules/AppModule.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseUserDto.html":{},"controllers/BuyerOrdersController.html":{},"injectables/BuyerOrdersService.html":{},"modules/CommonModule.html":{},"classes/CreateAdminDto.html":{},"classes/CreateAlbumDto.html":{},"classes/CreateLeadDto.html":{},"classes/CreateMercadopagoDto.html":{},"classes/CreateOrderDto.html":{},"classes/CreatePaymentAccountDto.html":{},"classes/CreatePhotoDto.html":{},"classes/CreateSeedDto.html":{},"classes/CreateSubscriptionDto.html":{},"classes/CreateSubscriptionOrderDto.html":{},"classes/CreateUserDto.html":{},"controllers/FilesController.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"entities/Lead.html":{},"controllers/LeadController.html":{},"modules/LeadModule.html":{},"injectables/LeadService.html":{},"classes/LoginDto.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"classes/Mercadopago.html":{},"controllers/MercadopagoController.html":{},"modules/MercadopagoModule.html":{},"injectables/MercadopagoService.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"classes/OrderItemDto.html":{},"classes/OrderItemResponseDto.html":{},"classes/OrderResponseDto.html":{},"modules/OrdersModule.html":{},"classes/PaginationDto.html":{},"injectables/PasswordResetService.html":{},"entities/PasswordResetToken.html":{},"entities/PaymentAccount.html":{},"controllers/PaymentController.html":{},"modules/PaymentModule.html":{},"injectables/PaymentService.html":{},"entities/Photo.html":{},"controllers/PhotoController.html":{},"modules/PhotoModule.html":{},"injectables/PhotoService.html":{},"controllers/PhotographerOrdersController.html":{},"injectables/PhotographerOrdersService.html":{},"classes/PriceOptionDto.html":{},"guards/RolesGuard.html":{},"classes/Seed.html":{},"controllers/SeedController.html":{},"modules/SeedModule.html":{},"injectables/SeedService.html":{},"entities/Subscription.html":{},"controllers/SubscriptionController.html":{},"modules/SubscriptionModule.html":{},"entities/SubscriptionOrder.html":{},"entities/SubscriptionPlan.html":{},"injectables/SubscriptionService.html":{},"classes/UpdateAdminDto.html":{},"classes/UpdateAlbumDto.html":{},"classes/UpdateDeliveryStatusDto.html":{},"classes/UpdateLeadDto.html":{},"classes/UpdateMercadopagoDto.html":{},"classes/UpdateOrderDto.html":{},"classes/UpdatePaymentDto.html":{},"classes/UpdatePhotoDto.html":{},"classes/UpdateSeedDto.html":{},"classes/UpdateSubscriptionDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"routes.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["math.max",{"_index":2129,"title":{},"body":{"injectables/PhotoService.html":{}}}],["math.max(0",{"_index":2140,"title":{},"body":{"injectables/PhotoService.html":{}}}],["mau",{"_index":2713,"title":{},"body":{"index.html":{}}}],["maxage",{"_index":897,"title":{},"body":{"controllers/AuthController.html":{}}}],["maxfilesizemb",{"_index":1470,"title":{},"body":{"injectables/FilesService.html":{}}}],["maxphotos",{"_index":2062,"title":{},"body":{"injectables/PhotoService.html":{}}}],["maxstorage",{"_index":2092,"title":{},"body":{"injectables/PhotoService.html":{}}}],["mb",{"_index":1472,"title":{},"body":{"injectables/FilesService.html":{},"injectables/PhotoService.html":{}}}],["medium",{"_index":1354,"title":{},"body":{"classes/CreateAlbumDto.html":{},"classes/PriceOptionDto.html":{},"miscellaneous/enumerations.html":{}}}],["memoria",{"_index":2101,"title":{},"body":{"injectables/PhotoService.html":{}}}],["menos",{"_index":151,"title":{},"body":{"injectables/AdminAlbumService.html":{}}}],["mensaje",{"_index":879,"title":{},"body":{"controllers/AuthController.html":{}}}],["mercado",{"_index":1693,"title":{},"body":{"injectables/MercadopagoService.html":{},"injectables/SubscriptionService.html":{}}}],["mercadopago",{"_index":1201,"title":{"classes/Mercadopago.html":{}},"body":{"injectables/BuyerOrdersService.html":{},"classes/CreatePaymentAccountDto.html":{},"classes/Mercadopago.html":{},"controllers/MercadopagoController.html":{},"entities/PaymentAccount.html":{},"injectables/PaymentService.html":{},"injectables/SubscriptionService.html":{},"coverage.html":{}}}],["mercadopago.controller",{"_index":1668,"title":{},"body":{"modules/MercadopagoModule.html":{}}}],["mercadopago.dto",{"_index":2474,"title":{},"body":{"classes/UpdateMercadopagoDto.html":{}}}],["mercadopago.dto.ts",{"_index":1366,"title":{},"body":{"classes/CreateMercadopagoDto.html":{},"classes/UpdateMercadopagoDto.html":{},"coverage.html":{}}}],["mercadopago.module.ts",{"_index":1664,"title":{},"body":{"modules/MercadopagoModule.html":{}}}],["mercadopago.service",{"_index":1631,"title":{},"body":{"controllers/MercadopagoController.html":{},"modules/MercadopagoModule.html":{}}}],["mercadopago/mercadopago.module",{"_index":803,"title":{},"body":{"modules/AppModule.html":{}}}],["mercadopagocallback",{"_index":1906,"title":{},"body":{"controllers/PaymentController.html":{}}}],["mercadopagocallback(@query('code",{"_index":1914,"title":{},"body":{"controllers/PaymentController.html":{}}}],["mercadopagocallback(code",{"_index":1907,"title":{},"body":{"controllers/PaymentController.html":{}}}],["mercadopagocontroller",{"_index":1622,"title":{"controllers/MercadopagoController.html":{}},"body":{"controllers/MercadopagoController.html":{},"modules/MercadopagoModule.html":{},"coverage.html":{}}}],["mercadopagomodule",{"_index":787,"title":{"modules/MercadopagoModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MercadopagoModule.html":{},"modules.html":{},"overview.html":{}}}],["mercadopagoprovideruserid",{"_index":1098,"title":{},"body":{"injectables/BuyerOrdersService.html":{}}}],["mercadopagoservice",{"_index":1630,"title":{"injectables/MercadopagoService.html":{}},"body":{"controllers/MercadopagoController.html":{},"modules/MercadopagoModule.html":{},"injectables/MercadopagoService.html":{},"coverage.html":{},"overview.html":{}}}],["mes",{"_index":2273,"title":{},"body":{"injectables/SeedService.html":{}}}],["meses",{"_index":2275,"title":{},"body":{"injectables/SeedService.html":{}}}],["message",{"_index":729,"title":{},"body":{"injectables/AlbumService.html":{},"controllers/AuthController.html":{},"injectables/BuyerOrdersService.html":{},"injectables/PhotoService.html":{},"injectables/SeedService.html":{}}}],["metadata",{"_index":2641,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":55,"title":{},"body":{"controllers/AdminAlbumController.html":{},"injectables/AdminAlbumService.html":{},"controllers/AdminOrderController.html":{},"injectables/AdminOrderService.html":{},"controllers/AdminUserController.html":{},"injectables/AdminUserService.html":{},"controllers/AlbumAccessController.html":{},"injectables/AlbumAccessService.html":{},"controllers/AlbumController.html":{},"injectables/AlbumService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"controllers/BuyerOrdersController.html":{},"injectables/BuyerOrdersService.html":{},"controllers/FilesController.html":{},"injectables/FilesService.html":{},"controllers/LeadController.html":{},"injectables/LeadService.html":{},"injectables/MailService.html":{},"controllers/MercadopagoController.html":{},"injectables/MercadopagoService.html":{},"injectables/PasswordResetService.html":{},"controllers/PaymentController.html":{},"injectables/PaymentService.html":{},"controllers/PhotoController.html":{},"injectables/PhotoService.html":{},"controllers/PhotographerOrdersController.html":{},"injectables/PhotographerOrdersService.html":{},"guards/RolesGuard.html":{},"controllers/SeedController.html":{},"injectables/SeedService.html":{},"controllers/SubscriptionController.html":{},"injectables/SubscriptionService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["min",{"_index":1374,"title":{},"body":{"classes/CreateOrderDto.html":{},"classes/OrderItemDto.html":{},"classes/PaginationDto.html":{},"injectables/PasswordResetService.html":{}}}],["min(0",{"_index":1842,"title":{},"body":{"classes/PaginationDto.html":{}}}],["min(1",{"_index":1376,"title":{},"body":{"classes/CreateOrderDto.html":{},"classes/OrderItemDto.html":{}}}],["minlength",{"_index":1411,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginDto.html":{}}}],["minlength(6",{"_index":1413,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginDto.html":{}}}],["miscellaneous",{"_index":2646,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":2769,"title":{},"body":{"index.html":{}}}],["mode",{"_index":2685,"title":{},"body":{"index.html":{}}}],["module",{"_index":183,"title":{"modules/AdminModule.html":{},"modules/AlbumModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommonModule.html":{},"modules/FilesModule.html":{},"modules/LeadModule.html":{},"modules/MailModule.html":{},"modules/MercadopagoModule.html":{},"modules/OrdersModule.html":{},"modules/PaymentModule.html":{},"modules/PhotoModule.html":{},"modules/SeedModule.html":{},"modules/SubscriptionModule.html":{},"modules/UserModule.html":{}},"body":{"modules/AdminModule.html":{},"modules/AlbumModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommonModule.html":{},"modules/FilesModule.html":{},"modules/LeadModule.html":{},"modules/MailModule.html":{},"modules/MercadopagoModule.html":{},"modules/OrdersModule.html":{},"modules/PaymentModule.html":{},"modules/PhotoModule.html":{},"modules/SeedModule.html":{},"modules/SubscriptionModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["modules",{"_index":185,"title":{"modules.html":{}},"body":{"modules/AdminModule.html":{},"modules/AlbumModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommonModule.html":{},"modules/FilesModule.html":{},"modules/LeadModule.html":{},"modules/MailModule.html":{},"modules/MercadopagoModule.html":{},"modules/OrdersModule.html":{},"modules/PaymentModule.html":{},"modules/PhotoModule.html":{},"modules/SeedModule.html":{},"modules/SubscriptionModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":2707,"title":{},"body":{"index.html":{}}}],["mp_marketplace_access_token",{"_index":1699,"title":{},"body":{"injectables/MercadopagoService.html":{}}}],["mpuserid",{"_index":1903,"title":{},"body":{"entities/PaymentAccount.html":{}}}],["multiple/:albumid",{"_index":2019,"title":{},"body":{"controllers/PhotoController.html":{}}}],["multiple/:albumid')@useinterceptors(undefined",{"_index":2003,"title":{},"body":{"controllers/PhotoController.html":{}}}],["myśliwiec",{"_index":2784,"title":{},"body":{"index.html":{}}}],["más",{"_index":721,"title":{},"body":{"injectables/AlbumService.html":{},"injectables/BuyerOrdersService.html":{},"injectables/PhotoService.html":{}}}],["máximo",{"_index":1475,"title":{},"body":{"injectables/FilesService.html":{},"injectables/PhotoService.html":{}}}],["método",{"_index":2187,"title":{},"body":{"injectables/PhotographerOrdersService.html":{},"injectables/SubscriptionService.html":{}}}],["métricas",{"_index":293,"title":{},"body":{"injectables/AdminOrderService.html":{}}}],["múltiples",{"_index":2083,"title":{},"body":{"injectables/PhotoService.html":{}}}],["nada",{"_index":2436,"title":{},"body":{"injectables/SubscriptionService.html":{}}}],["name",{"_index":89,"title":{},"body":{"classes/AdminAlbumDto.html":{},"injectables/AdminAlbumService.html":{},"interfaces/AdminAlbumSummaryDto.html":{},"controllers/AdminOrderController.html":{},"injectables/AdminOrderService.html":{},"interfaces/AdminPhotographerByIdDto.html":{},"controllers/AdminUserController.html":{},"classes/AdminUserDto.html":{},"injectables/AdminUserService.html":{},"controllers/AlbumAccessController.html":{},"injectables/AlbumAccessService.html":{},"controllers/AlbumController.html":{},"injectables/AlbumService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/BaseUserDto.html":{},"controllers/BuyerOrdersController.html":{},"injectables/BuyerOrdersService.html":{},"classes/CreateUserDto.html":{},"controllers/FilesController.html":{},"injectables/FilesService.html":{},"controllers/LeadController.html":{},"injectables/LeadService.html":{},"classes/LoginDto.html":{},"injectables/MailService.html":{},"controllers/MercadopagoController.html":{},"injectables/MercadopagoService.html":{},"injectables/PasswordResetService.html":{},"controllers/PaymentController.html":{},"injectables/PaymentService.html":{},"controllers/PhotoController.html":{},"injectables/PhotoService.html":{},"controllers/PhotographerOrdersController.html":{},"injectables/PhotographerOrdersService.html":{},"guards/RolesGuard.html":{},"injectables/SeedService.html":{},"controllers/SubscriptionController.html":{},"entities/SubscriptionPlan.html":{},"injectables/SubscriptionService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["ndice",{"_index":536,"title":{},"body":{"entities/Album.html":{}}}],["need",{"_index":2755,"title":{},"body":{"index.html":{}}}],["nest",{"_index":2673,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":2788,"title":{},"body":{"index.html":{}}}],["nestjs",{"_index":2697,"title":{},"body":{"index.html":{}}}],["nestjs/axios",{"_index":1666,"title":{},"body":{"modules/MercadopagoModule.html":{},"injectables/MercadopagoService.html":{},"dependencies.html":{}}}],["nestjs/common",{"_index":65,"title":{},"body":{"controllers/AdminAlbumController.html":{},"injectables/AdminAlbumService.html":{},"modules/AdminModule.html":{},"controllers/AdminOrderController.html":{},"injectables/AdminOrderService.html":{},"controllers/AdminUserController.html":{},"injectables/AdminUserService.html":{},"controllers/AlbumAccessController.html":{},"injectables/AlbumAccessService.html":{},"controllers/AlbumController.html":{},"modules/AlbumModule.html":{},"injectables/AlbumService.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/BuyerOrdersController.html":{},"injectables/BuyerOrdersService.html":{},"modules/CommonModule.html":{},"controllers/FilesController.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"controllers/LeadController.html":{},"modules/LeadModule.html":{},"injectables/LeadService.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"controllers/MercadopagoController.html":{},"modules/MercadopagoModule.html":{},"injectables/MercadopagoService.html":{},"modules/OrdersModule.html":{},"injectables/PasswordResetService.html":{},"controllers/PaymentController.html":{},"modules/PaymentModule.html":{},"injectables/PaymentService.html":{},"controllers/PhotoController.html":{},"modules/PhotoModule.html":{},"injectables/PhotoService.html":{},"controllers/PhotographerOrdersController.html":{},"injectables/PhotographerOrdersService.html":{},"guards/RolesGuard.html":{},"controllers/SeedController.html":{},"modules/SeedModule.html":{},"injectables/SeedService.html":{},"controllers/SubscriptionController.html":{},"modules/SubscriptionModule.html":{},"injectables/SubscriptionService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":794,"title":{},"body":{"modules/AppModule.html":{},"injectables/BuyerOrdersService.html":{},"modules/FilesModule.html":{},"modules/MercadopagoModule.html":{},"injectables/MercadopagoService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":2199,"title":{},"body":{"guards/RolesGuard.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":796,"title":{},"body":{"modules/AppModule.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":2461,"title":{},"body":{"classes/UpdateAdminDto.html":{},"classes/UpdateAlbumDto.html":{},"classes/UpdateLeadDto.html":{},"classes/UpdateMercadopagoDto.html":{},"classes/UpdateOrderDto.html":{},"classes/UpdatePaymentDto.html":{},"classes/UpdatePhotoDto.html":{},"classes/UpdateSeedDto.html":{},"classes/UpdateSubscriptionDto.html":{},"classes/UpdateUserDto.html":{},"dependencies.html":{}}}],["nestjs/mau",{"_index":2724,"title":{},"body":{"index.html":{}}}],["nestjs/passport",{"_index":2621,"title":{},"body":{"dependencies.html":{}}}],["nestjs/platform",{"_index":1425,"title":{},"body":{"controllers/FilesController.html":{},"controllers/PhotoController.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":108,"title":{},"body":{"injectables/AdminAlbumService.html":{},"modules/AdminModule.html":{},"injectables/AdminOrderService.html":{},"injectables/AdminUserService.html":{},"injectables/AlbumAccessService.html":{},"modules/AlbumModule.html":{},"injectables/AlbumService.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/BuyerOrdersService.html":{},"modules/LeadModule.html":{},"injectables/LeadService.html":{},"modules/OrdersModule.html":{},"injectables/PasswordResetService.html":{},"modules/PaymentModule.html":{},"injectables/PaymentService.html":{},"modules/PhotoModule.html":{},"injectables/PhotoService.html":{},"injectables/PhotographerOrdersService.html":{},"modules/SeedModule.html":{},"injectables/SeedService.html":{},"modules/SubscriptionModule.html":{},"injectables/SubscriptionService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["new",{"_index":290,"title":{},"body":{"injectables/AdminOrderService.html":{},"injectables/AdminUserService.html":{},"injectables/AlbumAccessService.html":{},"injectables/AlbumService.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/BuyerOrdersService.html":{},"controllers/FilesController.html":{},"injectables/FilesService.html":{},"injectables/LeadService.html":{},"injectables/MailService.html":{},"injectables/MercadopagoService.html":{},"injectables/PasswordResetService.html":{},"injectables/PaymentService.html":{},"injectables/PhotoService.html":{},"injectables/PhotographerOrdersService.html":{},"guards/RolesGuard.html":{},"injectables/SubscriptionService.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["newpassword",{"_index":859,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/PasswordResetService.html":{}}}],["newstatus",{"_index":1123,"title":{},"body":{"injectables/BuyerOrdersService.html":{},"injectables/SubscriptionService.html":{}}}],["newstorage",{"_index":2070,"title":{},"body":{"injectables/PhotoService.html":{}}}],["newuser",{"_index":978,"title":{},"body":{"injectables/AuthService.html":{}}}],["newuser.role",{"_index":997,"title":{},"body":{"injectables/AuthService.html":{}}}],["next",{"_index":902,"title":{},"body":{"controllers/AuthController.html":{}}}],["nhnecuzywpmr8sxqhsfuzmqz1a",{"_index":922,"title":{},"body":{"guards/AuthGuard.html":{}}}],["nico",{"_index":537,"title":{},"body":{"entities/Album.html":{}}}],["ningún",{"_index":1433,"title":{},"body":{"controllers/FilesController.html":{}}}],["node.js",{"_index":2665,"title":{},"body":{"index.html":{}}}],["nodemailer",{"_index":2633,"title":{},"body":{"dependencies.html":{}}}],["nombre",{"_index":137,"title":{},"body":{"injectables/AdminAlbumService.html":{},"injectables/AlbumService.html":{}}}],["none",{"_index":895,"title":{},"body":{"controllers/AuthController.html":{}}}],["normalizamos",{"_index":274,"title":{},"body":{"injectables/AdminOrderService.html":{}}}],["normalmente",{"_index":1647,"title":{},"body":{"controllers/MercadopagoController.html":{}}}],["notfoundexception",{"_index":270,"title":{},"body":{"injectables/AdminOrderService.html":{},"injectables/AdminUserService.html":{},"injectables/AlbumAccessService.html":{},"injectables/AlbumService.html":{},"injectables/AuthService.html":{},"injectables/BuyerOrdersService.html":{},"injectables/FilesService.html":{},"injectables/PasswordResetService.html":{},"injectables/PaymentService.html":{},"injectables/PhotoService.html":{},"injectables/PhotographerOrdersService.html":{},"injectables/SubscriptionService.html":{},"injectables/UserService.html":{}}}],["notfoundexception('album",{"_index":597,"title":{},"body":{"injectables/AlbumAccessService.html":{}}}],["notfoundexception('cuenta",{"_index":1973,"title":{},"body":{"injectables/PaymentService.html":{}}}],["notfoundexception('el",{"_index":2181,"title":{},"body":{"injectables/PhotographerOrdersService.html":{}}}],["notfoundexception('este",{"_index":2183,"title":{},"body":{"injectables/PhotographerOrdersService.html":{}}}],["notfoundexception('fotógrafo",{"_index":455,"title":{},"body":{"injectables/AdminUserService.html":{},"injectables/AlbumService.html":{},"injectables/PhotoService.html":{}}}],["notfoundexception('imagen",{"_index":2125,"title":{},"body":{"injectables/PhotoService.html":{}}}],["notfoundexception('la",{"_index":2184,"title":{},"body":{"injectables/PhotographerOrdersService.html":{}}}],["notfoundexception('orden",{"_index":1179,"title":{},"body":{"injectables/BuyerOrdersService.html":{},"injectables/SubscriptionService.html":{}}}],["notfoundexception('pedido",{"_index":291,"title":{},"body":{"injectables/AdminOrderService.html":{}}}],["notfoundexception('plan",{"_index":2412,"title":{},"body":{"injectables/SubscriptionService.html":{}}}],["notfoundexception('user",{"_index":609,"title":{},"body":{"injectables/AlbumAccessService.html":{}}}],["notfoundexception('usuario",{"_index":424,"title":{},"body":{"injectables/AdminUserService.html":{},"injectables/AuthService.html":{},"injectables/FilesService.html":{},"injectables/PasswordResetService.html":{},"injectables/SubscriptionService.html":{}}}],["notfoundexception('álbum",{"_index":468,"title":{},"body":{"injectables/AdminUserService.html":{},"injectables/PhotoService.html":{}}}],["notfoundexception(`user",{"_index":2577,"title":{},"body":{"injectables/UserService.html":{}}}],["notfoundexception(`usuario",{"_index":2564,"title":{},"body":{"injectables/UserService.html":{}}}],["notification",{"_index":1712,"title":{},"body":{"injectables/MercadopagoService.html":{}}}],["notification_url",{"_index":1244,"title":{},"body":{"injectables/BuyerOrdersService.html":{},"injectables/SubscriptionService.html":{}}}],["now",{"_index":1013,"title":{},"body":{"injectables/AuthService.html":{},"injectables/SubscriptionService.html":{}}}],["now.gettime",{"_index":1018,"title":{},"body":{"injectables/AuthService.html":{}}}],["npm",{"_index":2679,"title":{},"body":{"index.html":{}}}],["nube.vercel.app",{"_index":903,"title":{},"body":{"controllers/AuthController.html":{}}}],["nueva",{"_index":2444,"title":{},"body":{"injectables/SubscriptionService.html":{}}}],["nuevo",{"_index":1290,"title":{},"body":{"injectables/BuyerOrdersService.html":{},"injectables/MailService.html":{},"injectables/PhotographerOrdersService.html":{},"injectables/SubscriptionService.html":{}}}],["null",{"_index":621,"title":{},"body":{"injectables/AlbumAccessService.html":{},"injectables/BuyerOrdersService.html":{},"entities/Subscription.html":{},"injectables/SubscriptionService.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["nullable",{"_index":495,"title":{},"body":{"entities/Album.html":{},"entities/OrderItem.html":{},"entities/PaymentAccount.html":{},"entities/Subscription.html":{},"entities/SubscriptionPlan.html":{},"entities/User.html":{}}}],["number",{"_index":42,"title":{},"body":{"classes/AdminAlbumByIdDto.html":{},"classes/AdminAlbumDto.html":{},"injectables/AdminAlbumService.html":{},"interfaces/AdminAlbumSummaryDto.html":{},"controllers/AdminOrderController.html":{},"interfaces/AdminPhotographerByIdDto.html":{},"classes/AdminUserDto.html":{},"entities/Album.html":{},"injectables/AlbumService.html":{},"classes/AlbumSummaryDto.html":{},"classes/BaseUserDto.html":{},"injectables/BuyerOrdersService.html":{},"classes/CreateAlbumDto.html":{},"classes/CreateOrderDto.html":{},"classes/CreatePaymentAccountDto.html":{},"injectables/MailService.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"classes/OrderItemDto.html":{},"classes/OrderItemResponseDto.html":{},"classes/OrderResponseDto.html":{},"classes/PaginationDto.html":{},"entities/PaymentAccount.html":{},"entities/Photo.html":{},"injectables/PhotoService.html":{},"classes/PriceOptionDto.html":{},"entities/SubscriptionOrder.html":{},"entities/SubscriptionPlan.html":{},"entities/User.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["number(((total",{"_index":1224,"title":{},"body":{"injectables/BuyerOrdersService.html":{}}}],["number(i.subtotal",{"_index":1171,"title":{},"body":{"injectables/BuyerOrdersService.html":{}}}],["number(i.unitprice",{"_index":1209,"title":{},"body":{"injectables/BuyerOrdersService.html":{}}}],["number(order.amount",{"_index":2427,"title":{},"body":{"injectables/SubscriptionService.html":{}}}],["number(order.total).tofixed(2",{"_index":1284,"title":{},"body":{"injectables/BuyerOrdersService.html":{}}}],["o",{"_index":459,"title":{},"body":{"injectables/AdminUserService.html":{},"injectables/AlbumService.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/BuyerOrdersService.html":{},"controllers/MercadopagoController.html":{},"entities/Order.html":{},"injectables/PasswordResetService.html":{},"injectables/PaymentService.html":{},"entities/SubscriptionPlan.html":{},"injectables/SubscriptionService.html":{}}}],["o.createdat",{"_index":476,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["o.deliverystatus",{"_index":474,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["o.id",{"_index":473,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["o.status",{"_index":460,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["o.total",{"_index":475,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["oauth",{"_index":1940,"title":{},"body":{"injectables/PaymentService.html":{}}}],["object",{"_index":2810,"title":{},"body":{"miscellaneous/variables.html":{}}}],["observable",{"_index":915,"title":{},"body":{"guards/AuthGuard.html":{}}}],["obtener",{"_index":1073,"title":{},"body":{"controllers/BuyerOrdersController.html":{},"injectables/BuyerOrdersService.html":{},"injectables/SubscriptionService.html":{}}}],["obtiene",{"_index":1933,"title":{},"body":{"injectables/PaymentService.html":{}}}],["offer",{"_index":2766,"title":{},"body":{"index.html":{}}}],["official",{"_index":2714,"title":{},"body":{"index.html":{}}}],["offset",{"_index":736,"title":{},"body":{"injectables/AlbumService.html":{},"classes/PaginationDto.html":{}}}],["oficial",{"_index":1725,"title":{},"body":{"injectables/MercadopagoService.html":{}}}],["ondelete",{"_index":1786,"title":{},"body":{"entities/OrderItem.html":{},"entities/PasswordResetToken.html":{},"entities/PaymentAccount.html":{},"entities/Photo.html":{},"entities/Subscription.html":{}}}],["onetomany",{"_index":531,"title":{},"body":{"entities/Album.html":{},"entities/Order.html":{},"entities/User.html":{}}}],["onetomany(undefined",{"_index":504,"title":{},"body":{"entities/Album.html":{},"entities/Order.html":{},"entities/User.html":{}}}],["opaco",{"_index":1887,"title":{},"body":{"entities/PasswordResetToken.html":{}}}],["opcional",{"_index":325,"title":{},"body":{"injectables/AdminOrderService.html":{},"injectables/BuyerOrdersService.html":{},"entities/OrderItem.html":{}}}],["open",{"_index":2771,"title":{},"body":{"index.html":{}}}],["optional",{"_index":23,"title":{},"body":{"classes/AdminAlbumByIdDto.html":{},"classes/AdminAlbumDto.html":{},"injectables/AdminAlbumService.html":{},"interfaces/AdminAlbumSummaryDto.html":{},"controllers/AdminOrderController.html":{},"injectables/AdminOrderService.html":{},"controllers/AdminUserController.html":{},"classes/AdminUserDto.html":{},"injectables/AdminUserService.html":{},"entities/Album.html":{},"controllers/AlbumAccessController.html":{},"injectables/AlbumAccessService.html":{},"controllers/AlbumController.html":{},"injectables/AlbumService.html":{},"classes/AlbumSummaryDto.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/BaseUserDto.html":{},"controllers/BuyerOrdersController.html":{},"injectables/BuyerOrdersService.html":{},"classes/CreateAlbumDto.html":{},"classes/CreatePaymentAccountDto.html":{},"classes/CreateUserDto.html":{},"controllers/FilesController.html":{},"injectables/FilesService.html":{},"controllers/LeadController.html":{},"injectables/LeadService.html":{},"classes/LoginDto.html":{},"injectables/MailService.html":{},"controllers/MercadopagoController.html":{},"injectables/MercadopagoService.html":{},"classes/PaginationDto.html":{},"injectables/PasswordResetService.html":{},"controllers/PaymentController.html":{},"injectables/PaymentService.html":{},"controllers/PhotoController.html":{},"injectables/PhotoService.html":{},"controllers/PhotographerOrdersController.html":{},"injectables/PhotographerOrdersService.html":{},"guards/RolesGuard.html":{},"injectables/SeedService.html":{},"entities/Subscription.html":{},"controllers/SubscriptionController.html":{},"entities/SubscriptionPlan.html":{},"injectables/SubscriptionService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["orden",{"_index":153,"title":{},"body":{"injectables/AdminAlbumService.html":{},"controllers/BuyerOrdersController.html":{},"injectables/BuyerOrdersService.html":{},"injectables/MercadopagoService.html":{},"injectables/PhotographerOrdersService.html":{},"injectables/SubscriptionService.html":{}}}],["ordenes",{"_index":2342,"title":{},"body":{"controllers/SubscriptionController.html":{},"injectables/SubscriptionService.html":{}}}],["order",{"_index":111,"title":{"entities/Order.html":{}},"body":{"injectables/AdminAlbumService.html":{},"modules/AdminModule.html":{},"injectables/AdminOrderService.html":{},"injectables/AdminUserService.html":{},"entities/Album.html":{},"controllers/BuyerOrdersController.html":{},"injectables/BuyerOrdersService.html":{},"injectables/LeadService.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"modules/OrdersModule.html":{},"injectables/PhotographerOrdersService.html":{},"injectables/SubscriptionService.html":{},"entities/User.html":{},"coverage.html":{}}}],["order.album",{"_index":505,"title":{},"body":{"entities/Album.html":{}}}],["order.album.description",{"_index":1304,"title":{},"body":{"injectables/BuyerOrdersService.html":{}}}],["order.album.eventdate",{"_index":1303,"title":{},"body":{"injectables/BuyerOrdersService.html":{}}}],["order.album.id",{"_index":1298,"title":{},"body":{"injectables/BuyerOrdersService.html":{}}}],["order.album.photographer",{"_index":1194,"title":{},"body":{"injectables/BuyerOrdersService.html":{}}}],["order.album.photographer.email",{"_index":1294,"title":{},"body":{"injectables/BuyerOrdersService.html":{}}}],["order.album.photographer.id",{"_index":2186,"title":{},"body":{"injectables/PhotographerOrdersService.html":{}}}],["order.album.pricedigital",{"_index":1301,"title":{},"body":{"injectables/BuyerOrdersService.html":{}}}],["order.album.prices",{"_index":1300,"title":{},"body":{"injectables/BuyerOrdersService.html":{}}}],["order.album.priceschoolsports",{"_index":1302,"title":{},"body":{"injectables/BuyerOrdersService.html":{}}}],["order.album.title",{"_index":1299,"title":{},"body":{"injectables/BuyerOrdersService.html":{}}}],["order.albumid",{"_index":161,"title":{},"body":{"injectables/AdminAlbumService.html":{}}}],["order.buyer",{"_index":2508,"title":{},"body":{"entities/User.html":{}}}],["order.buyer.email",{"_index":1233,"title":{},"body":{"injectables/BuyerOrdersService.html":{}}}],["order.buyer.id",{"_index":1181,"title":{},"body":{"injectables/BuyerOrdersService.html":{}}}],["order.buyer.name",{"_index":1295,"title":{},"body":{"injectables/BuyerOrdersService.html":{}}}],["order.createdat",{"_index":1317,"title":{},"body":{"injectables/BuyerOrdersService.html":{}}}],["order.deliverystatus",{"_index":2190,"title":{},"body":{"injectables/PhotographerOrdersService.html":{}}}],["order.dto",{"_index":1065,"title":{},"body":{"controllers/BuyerOrdersController.html":{},"injectables/BuyerOrdersService.html":{},"controllers/PhotographerOrdersController.html":{},"controllers/SubscriptionController.html":{},"classes/UpdateOrderDto.html":{}}}],["order.dto.ts",{"_index":1368,"title":{},"body":{"classes/CreateOrderDto.html":{},"classes/CreateSubscriptionOrderDto.html":{},"classes/OrderItemDto.html":{},"classes/UpdateDeliveryStatusDto.html":{},"classes/UpdateOrderDto.html":{},"coverage.html":{}}}],["order.dto.ts:15",{"_index":1807,"title":{},"body":{"classes/OrderItemDto.html":{}}}],["order.dto.ts:18",{"_index":1810,"title":{},"body":{"classes/OrderItemDto.html":{}}}],["order.dto.ts:22",{"_index":1809,"title":{},"body":{"classes/OrderItemDto.html":{}}}],["order.dto.ts:25",{"_index":1811,"title":{},"body":{"classes/OrderItemDto.html":{}}}],["order.dto.ts:30",{"_index":1370,"title":{},"body":{"classes/CreateOrderDto.html":{}}}],["order.dto.ts:35",{"_index":1372,"title":{},"body":{"classes/CreateOrderDto.html":{}}}],["order.dto.ts:6",{"_index":1404,"title":{},"body":{"classes/CreateSubscriptionOrderDto.html":{},"classes/UpdateDeliveryStatusDto.html":{}}}],["order.entity",{"_index":1797,"title":{},"body":{"entities/OrderItem.html":{},"modules/SubscriptionModule.html":{},"injectables/SubscriptionService.html":{}}}],["order.entity.ts",{"_index":1766,"title":{},"body":{"entities/Order.html":{},"entities/SubscriptionOrder.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["order.entity.ts:26",{"_index":2367,"title":{},"body":{"entities/SubscriptionOrder.html":{}}}],["order.entity.ts:29",{"_index":2372,"title":{},"body":{"entities/SubscriptionOrder.html":{}}}],["order.entity.ts:32",{"_index":2368,"title":{},"body":{"entities/SubscriptionOrder.html":{}}}],["order.entity.ts:35",{"_index":2365,"title":{},"body":{"entities/SubscriptionOrder.html":{}}}],["order.entity.ts:52",{"_index":2370,"title":{},"body":{"entities/SubscriptionOrder.html":{}}}],["order.entity.ts:55",{"_index":2366,"title":{},"body":{"entities/SubscriptionOrder.html":{}}}],["order.entity.ts:58",{"_index":2371,"title":{},"body":{"entities/SubscriptionOrder.html":{}}}],["order.id",{"_index":1187,"title":{},"body":{"injectables/BuyerOrdersService.html":{},"injectables/SubscriptionService.html":{}}}],["order.items",{"_index":1785,"title":{},"body":{"entities/OrderItem.html":{}}}],["order.items.length",{"_index":1286,"title":{},"body":{"injectables/BuyerOrdersService.html":{}}}],["order.items.map((i",{"_index":1203,"title":{},"body":{"injectables/BuyerOrdersService.html":{}}}],["order.items.map((item",{"_index":1305,"title":{},"body":{"injectables/BuyerOrdersService.html":{}}}],["order.plan",{"_index":2439,"title":{},"body":{"injectables/SubscriptionService.html":{}}}],["order.plan.name",{"_index":2426,"title":{},"body":{"injectables/SubscriptionService.html":{}}}],["order.status",{"_index":442,"title":{},"body":{"injectables/AdminUserService.html":{},"injectables/BuyerOrdersService.html":{},"injectables/SubscriptionService.html":{}}}],["order.status.tolowercase",{"_index":2189,"title":{},"body":{"injectables/PhotographerOrdersService.html":{}}}],["order.total",{"_index":1212,"title":{},"body":{"injectables/BuyerOrdersService.html":{}}}],["order.user.email",{"_index":2428,"title":{},"body":{"injectables/SubscriptionService.html":{}}}],["order/entities/order.entity",{"_index":112,"title":{},"body":{"injectables/AdminAlbumService.html":{},"injectables/AdminOrderService.html":{},"entities/Album.html":{},"entities/User.html":{}}}],["order/order.module",{"_index":804,"title":{},"body":{"modules/AppModule.html":{}}}],["orderid",{"_index":1056,"title":{},"body":{"controllers/BuyerOrdersController.html":{},"injectables/BuyerOrdersService.html":{},"injectables/MailService.html":{},"injectables/MercadopagoService.html":{},"injectables/PhotographerOrdersService.html":{},"controllers/SubscriptionController.html":{},"injectables/SubscriptionService.html":{},"miscellaneous/functions.html":{}}}],["orderid.replace('buyerorder",{"_index":1271,"title":{},"body":{"injectables/BuyerOrdersService.html":{}}}],["orderid.startswith('buyerorder",{"_index":1270,"title":{},"body":{"injectables/BuyerOrdersService.html":{}}}],["orderitem",{"_index":1131,"title":{"entities/OrderItem.html":{}},"body":{"injectables/BuyerOrdersService.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"modules/OrdersModule.html":{},"coverage.html":{}}}],["orderitemdto",{"_index":1371,"title":{"classes/OrderItemDto.html":{}},"body":{"classes/CreateOrderDto.html":{},"classes/OrderItemDto.html":{},"coverage.html":{}}}],["orderitemresponsedto",{"_index":775,"title":{"classes/OrderItemResponseDto.html":{}},"body":{"classes/AlbumSummaryDto.html":{},"classes/OrderItemResponseDto.html":{},"classes/OrderResponseDto.html":{},"coverage.html":{}}}],["orderitems",{"_index":1156,"title":{},"body":{"injectables/BuyerOrdersService.html":{}}}],["orderitems.reduce((sum",{"_index":1169,"title":{},"body":{"injectables/BuyerOrdersService.html":{}}}],["orderrepo",{"_index":102,"title":{},"body":{"injectables/AdminAlbumService.html":{},"injectables/AdminOrderService.html":{},"injectables/SubscriptionService.html":{}}}],["orderrepository",{"_index":1106,"title":{},"body":{"injectables/BuyerOrdersService.html":{},"injectables/PhotographerOrdersService.html":{}}}],["orderresponsedto",{"_index":779,"title":{"classes/OrderResponseDto.html":{}},"body":{"classes/AlbumSummaryDto.html":{},"injectables/BuyerOrdersService.html":{},"classes/OrderItemResponseDto.html":{},"classes/OrderResponseDto.html":{},"coverage.html":{}}}],["orders",{"_index":22,"title":{},"body":{"classes/AdminAlbumByIdDto.html":{},"injectables/AdminAlbumService.html":{},"injectables/AdminOrderService.html":{},"controllers/AdminUserController.html":{},"injectables/AdminUserService.html":{},"entities/Album.html":{},"injectables/AlbumService.html":{},"injectables/BuyerOrdersService.html":{},"controllers/PhotographerOrdersController.html":{},"injectables/PhotographerOrdersService.html":{},"entities/User.html":{},"injectables/UserService.html":{}}}],["orders.controller",{"_index":1831,"title":{},"body":{"modules/OrdersModule.html":{}}}],["orders.controller.ts",{"_index":1041,"title":{},"body":{"controllers/BuyerOrdersController.html":{},"controllers/PhotographerOrdersController.html":{},"coverage.html":{}}}],["orders.controller.ts:20",{"_index":2155,"title":{},"body":{"controllers/PhotographerOrdersController.html":{}}}],["orders.controller.ts:21",{"_index":1052,"title":{},"body":{"controllers/BuyerOrdersController.html":{}}}],["orders.controller.ts:28",{"_index":2152,"title":{},"body":{"controllers/PhotographerOrdersController.html":{}}}],["orders.controller.ts:30",{"_index":1058,"title":{},"body":{"controllers/BuyerOrdersController.html":{}}}],["orders.controller.ts:36",{"_index":2159,"title":{},"body":{"controllers/PhotographerOrdersController.html":{}}}],["orders.controller.ts:38",{"_index":1060,"title":{},"body":{"controllers/BuyerOrdersController.html":{}}}],["orders.controller.ts:45",{"_index":1064,"title":{},"body":{"controllers/BuyerOrdersController.html":{}}}],["orders.controller.ts:52",{"_index":1049,"title":{},"body":{"controllers/BuyerOrdersController.html":{}}}],["orders.controller.ts:61",{"_index":1055,"title":{},"body":{"controllers/BuyerOrdersController.html":{}}}],["orders.length",{"_index":2182,"title":{},"body":{"injectables/PhotographerOrdersService.html":{}}}],["orders.map(this.maptodto",{"_index":1177,"title":{},"body":{"injectables/BuyerOrdersService.html":{}}}],["orders.service",{"_index":1067,"title":{},"body":{"controllers/BuyerOrdersController.html":{},"injectables/MercadopagoService.html":{},"modules/OrdersModule.html":{},"controllers/PhotographerOrdersController.html":{}}}],["orders.service.ts",{"_index":1097,"title":{},"body":{"injectables/BuyerOrdersService.html":{},"injectables/PhotographerOrdersService.html":{},"coverage.html":{}}}],["orders.service.ts:100",{"_index":1119,"title":{},"body":{"injectables/BuyerOrdersService.html":{}}}],["orders.service.ts:110",{"_index":1117,"title":{},"body":{"injectables/BuyerOrdersService.html":{}}}],["orders.service.ts:12",{"_index":2173,"title":{},"body":{"injectables/PhotographerOrdersService.html":{}}}],["orders.service.ts:126",{"_index":1126,"title":{},"body":{"injectables/BuyerOrdersService.html":{}}}],["orders.service.ts:136",{"_index":1112,"title":{},"body":{"injectables/BuyerOrdersService.html":{}}}],["orders.service.ts:160",{"_index":1115,"title":{},"body":{"injectables/BuyerOrdersService.html":{}}}],["orders.service.ts:20",{"_index":2177,"title":{},"body":{"injectables/PhotographerOrdersService.html":{}}}],["orders.service.ts:24",{"_index":1109,"title":{},"body":{"injectables/BuyerOrdersService.html":{}}}],["orders.service.ts:256",{"_index":1125,"title":{},"body":{"injectables/BuyerOrdersService.html":{}}}],["orders.service.ts:306",{"_index":1121,"title":{},"body":{"injectables/BuyerOrdersService.html":{}}}],["orders.service.ts:37",{"_index":2175,"title":{},"body":{"injectables/PhotographerOrdersService.html":{}}}],["orders.service.ts:47",{"_index":1113,"title":{},"body":{"injectables/BuyerOrdersService.html":{}}}],["orders.service.ts:60",{"_index":2179,"title":{},"body":{"injectables/PhotographerOrdersService.html":{}}}],["orderservice",{"_index":1069,"title":{},"body":{"controllers/BuyerOrdersController.html":{}}}],["ordersmodule",{"_index":788,"title":{"modules/OrdersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MercadopagoModule.html":{},"modules/OrdersModule.html":{},"modules.html":{},"overview.html":{}}}],["orderstatus",{"_index":1124,"title":{},"body":{"injectables/BuyerOrdersService.html":{},"entities/Order.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["originalphotoid",{"_index":1165,"title":{},"body":{"injectables/BuyerOrdersService.html":{},"entities/OrderItem.html":{}}}],["otro",{"_index":136,"title":{},"body":{"injectables/AdminAlbumService.html":{}}}],["out",{"_index":198,"title":{},"body":{"modules/AdminModule.html":{},"modules/AlbumModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/FilesModule.html":{},"modules/LeadModule.html":{},"modules/MailModule.html":{},"modules/MercadopagoModule.html":{},"modules/OrdersModule.html":{},"modules/PaymentModule.html":{},"modules/PhotoModule.html":{},"modules/SeedModule.html":{},"modules/SubscriptionModule.html":{},"modules/UserModule.html":{},"index.html":{},"overview.html":{}}}],["overview",{"_index":2794,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["p",{"_index":2139,"title":{},"body":{"injectables/PhotoService.html":{}}}],["p.id",{"_index":1159,"title":{},"body":{"injectables/BuyerOrdersService.html":{},"injectables/PhotoService.html":{}}}],["p.public_id",{"_index":2105,"title":{},"body":{"injectables/PhotoService.html":{}}}],["p.publicid",{"_index":2121,"title":{},"body":{"injectables/PhotoService.html":{}}}],["p.sizemb",{"_index":2106,"title":{},"body":{"injectables/PhotoService.html":{}}}],["p.startswith('ts",{"_index":1718,"title":{},"body":{"injectables/MercadopagoService.html":{}}}],["p.startswith('v1",{"_index":1720,"title":{},"body":{"injectables/MercadopagoService.html":{}}}],["p.url",{"_index":2104,"title":{},"body":{"injectables/PhotoService.html":{}}}],["p.urlthumbnail",{"_index":2108,"title":{},"body":{"injectables/PhotoService.html":{}}}],["p.urlweb",{"_index":2107,"title":{},"body":{"injectables/PhotoService.html":{}}}],["p.user_email",{"_index":450,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["p.user_id",{"_index":448,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["p.user_image",{"_index":451,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["p.user_name",{"_index":449,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["pa",{"_index":2512,"title":{},"body":{"entities/User.html":{}}}],["pa.user",{"_index":2513,"title":{},"body":{"entities/User.html":{}}}],["package",{"_index":2616,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["pagada",{"_index":2425,"title":{},"body":{"injectables/SubscriptionService.html":{}}}],["page",{"_index":223,"title":{},"body":{"controllers/AdminOrderController.html":{},"injectables/AdminOrderService.html":{}}}],["paginationdto",{"_index":642,"title":{"classes/PaginationDto.html":{}},"body":{"controllers/AlbumController.html":{},"injectables/AlbumService.html":{},"classes/PaginationDto.html":{},"coverage.html":{}}}],["pago",{"_index":1095,"title":{},"body":{"controllers/BuyerOrdersController.html":{},"injectables/BuyerOrdersService.html":{},"injectables/MercadopagoService.html":{},"injectables/PaymentService.html":{},"injectables/PhotographerOrdersService.html":{},"injectables/SubscriptionService.html":{}}}],["para",{"_index":541,"title":{},"body":{"entities/Album.html":{},"injectables/AlbumService.html":{},"injectables/AuthService.html":{},"injectables/BuyerOrdersService.html":{},"injectables/FilesService.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"injectables/PaymentService.html":{},"entities/Photo.html":{},"injectables/PhotoService.html":{},"injectables/PhotographerOrdersService.html":{},"guards/RolesGuard.html":{},"entities/SubscriptionPlan.html":{},"injectables/SubscriptionService.html":{}}}],["paralelo",{"_index":2096,"title":{},"body":{"injectables/PhotoService.html":{}}}],["param",{"_index":235,"title":{},"body":{"controllers/AdminOrderController.html":{},"controllers/AdminUserController.html":{},"controllers/AlbumAccessController.html":{},"controllers/AlbumController.html":{},"controllers/BuyerOrdersController.html":{},"controllers/PhotoController.html":{},"controllers/PhotographerOrdersController.html":{},"controllers/SubscriptionController.html":{}}}],["param('albumid",{"_index":2017,"title":{},"body":{"controllers/PhotoController.html":{}}}],["param('id",{"_index":671,"title":{},"body":{"controllers/AlbumController.html":{},"controllers/PhotoController.html":{},"controllers/PhotographerOrdersController.html":{},"controllers/SubscriptionController.html":{}}}],["parameters",{"_index":104,"title":{},"body":{"injectables/AdminAlbumService.html":{},"controllers/AdminOrderController.html":{},"injectables/AdminOrderService.html":{},"controllers/AdminUserController.html":{},"injectables/AdminUserService.html":{},"controllers/AlbumAccessController.html":{},"injectables/AlbumAccessService.html":{},"controllers/AlbumController.html":{},"injectables/AlbumService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"controllers/BuyerOrdersController.html":{},"injectables/BuyerOrdersService.html":{},"controllers/FilesController.html":{},"injectables/FilesService.html":{},"controllers/LeadController.html":{},"injectables/LeadService.html":{},"injectables/MailService.html":{},"controllers/MercadopagoController.html":{},"injectables/MercadopagoService.html":{},"injectables/PasswordResetService.html":{},"controllers/PaymentController.html":{},"injectables/PaymentService.html":{},"controllers/PhotoController.html":{},"injectables/PhotoService.html":{},"controllers/PhotographerOrdersController.html":{},"injectables/PhotographerOrdersService.html":{},"guards/RolesGuard.html":{},"injectables/SeedService.html":{},"controllers/SubscriptionController.html":{},"injectables/SubscriptionService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["parsedbody",{"_index":1651,"title":{},"body":{"controllers/MercadopagoController.html":{},"injectables/MercadopagoService.html":{}}}],["parsefloat(approvedraw?.income",{"_index":321,"title":{},"body":{"injectables/AdminOrderService.html":{}}}],["parsefloat(newstorage",{"_index":2118,"title":{},"body":{"injectables/PhotoService.html":{}}}],["parsefloat(newstorage.tofixed(2",{"_index":2072,"title":{},"body":{"injectables/PhotoService.html":{}}}],["parsefloat(pendingraw?.income",{"_index":323,"title":{},"body":{"injectables/AdminOrderService.html":{}}}],["parsefloat(req.body.totalsizemb",{"_index":2025,"title":{},"body":{"controllers/PhotoController.html":{}}}],["parseint(p.approvedorders",{"_index":454,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["parseint(p.pendingorders",{"_index":453,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["parseint(p.totalorders",{"_index":452,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["parseint(raw?.albumswithorders",{"_index":164,"title":{},"body":{"injectables/AdminAlbumService.html":{}}}],["part",{"_index":2756,"title":{},"body":{"index.html":{}}}],["partial",{"_index":2553,"title":{},"body":{"injectables/UserService.html":{}}}],["partialtype",{"_index":2460,"title":{},"body":{"classes/UpdateAdminDto.html":{},"classes/UpdateAlbumDto.html":{},"classes/UpdateLeadDto.html":{},"classes/UpdateMercadopagoDto.html":{},"classes/UpdateOrderDto.html":{},"classes/UpdatePaymentDto.html":{},"classes/UpdatePhotoDto.html":{},"classes/UpdateSeedDto.html":{},"classes/UpdateSubscriptionDto.html":{},"classes/UpdateUserDto.html":{}}}],["partialtype(baseuserdto",{"_index":2496,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["partialtype(createadmindto",{"_index":2459,"title":{},"body":{"classes/UpdateAdminDto.html":{}}}],["partialtype(createalbumdto",{"_index":2465,"title":{},"body":{"classes/UpdateAlbumDto.html":{}}}],["partialtype(createleaddto",{"_index":2470,"title":{},"body":{"classes/UpdateLeadDto.html":{}}}],["partialtype(createmercadopagodto",{"_index":2473,"title":{},"body":{"classes/UpdateMercadopagoDto.html":{}}}],["partialtype(createorderdto",{"_index":2477,"title":{},"body":{"classes/UpdateOrderDto.html":{}}}],["partialtype(createpaymentaccountdto",{"_index":2480,"title":{},"body":{"classes/UpdatePaymentDto.html":{}}}],["partialtype(createphotodto",{"_index":2484,"title":{},"body":{"classes/UpdatePhotoDto.html":{}}}],["partialtype(createseeddto",{"_index":2488,"title":{},"body":{"classes/UpdateSeedDto.html":{}}}],["partialtype(createsubscriptiondto",{"_index":2492,"title":{},"body":{"classes/UpdateSubscriptionDto.html":{}}}],["passport",{"_index":2635,"title":{},"body":{"dependencies.html":{}}}],["passthrough",{"_index":871,"title":{},"body":{"controllers/AuthController.html":{}}}],["password",{"_index":406,"title":{},"body":{"injectables/AdminUserService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseUserDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"injectables/SeedService.html":{},"entities/User.html":{},"injectables/UserService.html":{}}}],["password?token=${token",{"_index":1864,"title":{},"body":{"injectables/PasswordResetService.html":{}}}],["passwordevent",{"_index":570,"title":{},"body":{"controllers/AlbumAccessController.html":{},"injectables/AlbumAccessService.html":{},"classes/CreateAlbumDto.html":{},"classes/PriceOptionDto.html":{}}}],["passwordeventhash",{"_index":482,"title":{},"body":{"entities/Album.html":{},"injectables/AlbumService.html":{}}}],["passwordresetrequestedat",{"_index":408,"title":{},"body":{"injectables/AdminUserService.html":{},"entities/User.html":{},"injectables/UserService.html":{}}}],["passwordresetservice",{"_index":867,"title":{"injectables/PasswordResetService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/PasswordResetService.html":{},"coverage.html":{},"overview.html":{}}}],["passwordresettoken",{"_index":952,"title":{"entities/PasswordResetToken.html":{}},"body":{"modules/AuthModule.html":{},"injectables/PasswordResetService.html":{},"entities/PasswordResetToken.html":{},"entities/User.html":{},"coverage.html":{}}}],["patch",{"_index":654,"title":{},"body":{"controllers/AlbumController.html":{},"controllers/PhotographerOrdersController.html":{},"controllers/SubscriptionController.html":{},"controllers/UserController.html":{}}}],["patch(':id",{"_index":670,"title":{},"body":{"controllers/AlbumController.html":{}}}],["patch(':id/delivery",{"_index":2168,"title":{},"body":{"controllers/PhotographerOrdersController.html":{}}}],["patch('change",{"_index":2337,"title":{},"body":{"controllers/SubscriptionController.html":{}}}],["patch('me",{"_index":2540,"title":{},"body":{"controllers/UserController.html":{}}}],["path",{"_index":896,"title":{},"body":{"controllers/AuthController.html":{},"dependencies.html":{}}}],["payer",{"_index":1232,"title":{},"body":{"injectables/BuyerOrdersService.html":{},"injectables/SubscriptionService.html":{}}}],["payload",{"_index":931,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/BuyerOrdersService.html":{},"injectables/SubscriptionService.html":{}}}],["payload.exp",{"_index":935,"title":{},"body":{"guards/AuthGuard.html":{}}}],["payload.iat",{"_index":933,"title":{},"body":{"guards/AuthGuard.html":{}}}],["payload.isactive",{"_index":939,"title":{},"body":{"guards/AuthGuard.html":{}}}],["payment",{"_index":1063,"title":{},"body":{"controllers/BuyerOrdersController.html":{},"injectables/MercadopagoService.html":{},"controllers/PaymentController.html":{}}}],["payment.controller",{"_index":1921,"title":{},"body":{"modules/PaymentModule.html":{}}}],["payment.dto",{"_index":2481,"title":{},"body":{"classes/UpdatePaymentDto.html":{}}}],["payment.dto.ts",{"_index":1379,"title":{},"body":{"classes/CreatePaymentAccountDto.html":{},"classes/UpdatePaymentDto.html":{},"coverage.html":{}}}],["payment.dto.ts:12",{"_index":1388,"title":{},"body":{"classes/CreatePaymentAccountDto.html":{}}}],["payment.dto.ts:15",{"_index":1389,"title":{},"body":{"classes/CreatePaymentAccountDto.html":{}}}],["payment.dto.ts:18",{"_index":1387,"title":{},"body":{"classes/CreatePaymentAccountDto.html":{}}}],["payment.dto.ts:6",{"_index":1386,"title":{},"body":{"classes/CreatePaymentAccountDto.html":{}}}],["payment.dto.ts:9",{"_index":1384,"title":{},"body":{"classes/CreatePaymentAccountDto.html":{}}}],["payment.service",{"_index":1911,"title":{},"body":{"controllers/PaymentController.html":{},"modules/PaymentModule.html":{}}}],["payment/payment.module",{"_index":805,"title":{},"body":{"modules/AppModule.html":{}}}],["payment_methods",{"_index":1239,"title":{},"body":{"injectables/BuyerOrdersService.html":{}}}],["paymentaccount",{"_index":1888,"title":{"entities/PaymentAccount.html":{}},"body":{"entities/PaymentAccount.html":{},"modules/PaymentModule.html":{},"injectables/PaymentService.html":{},"entities/User.html":{},"coverage.html":{}}}],["paymentaccountrepo",{"_index":1930,"title":{},"body":{"injectables/PaymentService.html":{}}}],["paymentaccounts",{"_index":403,"title":{},"body":{"injectables/AdminUserService.html":{},"entities/User.html":{},"injectables/UserService.html":{}}}],["paymentcontroller",{"_index":1904,"title":{"controllers/PaymentController.html":{}},"body":{"controllers/PaymentController.html":{},"modules/PaymentModule.html":{},"coverage.html":{}}}],["paymentdata",{"_index":1696,"title":{},"body":{"injectables/MercadopagoService.html":{}}}],["paymentdata.external_reference",{"_index":1701,"title":{},"body":{"injectables/MercadopagoService.html":{}}}],["paymentmodule",{"_index":789,"title":{"modules/PaymentModule.html":{}},"body":{"modules/AppModule.html":{},"modules/OrdersModule.html":{},"modules/PaymentModule.html":{},"modules.html":{},"overview.html":{}}}],["paymentservice",{"_index":1107,"title":{"injectables/PaymentService.html":{}},"body":{"injectables/BuyerOrdersService.html":{},"controllers/PaymentController.html":{},"modules/PaymentModule.html":{},"injectables/PaymentService.html":{},"coverage.html":{},"overview.html":{}}}],["pedido",{"_index":1291,"title":{},"body":{"injectables/BuyerOrdersService.html":{},"injectables/MailService.html":{}}}],["pendiente",{"_index":1086,"title":{},"body":{"controllers/BuyerOrdersController.html":{},"injectables/SubscriptionService.html":{}}}],["pendientes",{"_index":1190,"title":{},"body":{"injectables/BuyerOrdersService.html":{}}}],["pending",{"_index":297,"title":{},"body":{"injectables/AdminOrderService.html":{},"injectables/AdminUserService.html":{},"injectables/BuyerOrdersService.html":{},"entities/Order.html":{},"entities/SubscriptionOrder.html":{},"injectables/SubscriptionService.html":{},"miscellaneous/typealiases.html":{}}}],["pendingcount",{"_index":296,"title":{},"body":{"injectables/AdminOrderService.html":{}}}],["pendingorders",{"_index":180,"title":{},"body":{"interfaces/AdminAlbumSummaryDto.html":{},"interfaces/AdminPhotographerByIdDto.html":{},"injectables/AdminUserService.html":{}}}],["pendingraw",{"_index":319,"title":{},"body":{"injectables/AdminOrderService.html":{}}}],["permisos",{"_index":2208,"title":{},"body":{"guards/RolesGuard.html":{}}}],["permiten",{"_index":1439,"title":{},"body":{"controllers/FilesController.html":{},"injectables/PhotoService.html":{}}}],["permitido",{"_index":1476,"title":{},"body":{"injectables/FilesService.html":{}}}],["pero",{"_index":273,"title":{},"body":{"injectables/AdminOrderService.html":{},"entities/OrderItem.html":{}}}],["persistir",{"_index":1273,"title":{},"body":{"injectables/BuyerOrdersService.html":{}}}],["pertenece",{"_index":742,"title":{},"body":{"injectables/AlbumService.html":{}}}],["pertenecen",{"_index":1155,"title":{},"body":{"injectables/BuyerOrdersService.html":{}}}],["pertenezca",{"_index":2185,"title":{},"body":{"injectables/PhotographerOrdersService.html":{}}}],["peso",{"_index":1513,"title":{},"body":{"injectables/FilesService.html":{}}}],["pg",{"_index":2638,"title":{},"body":{"dependencies.html":{}}}],["phone",{"_index":966,"title":{},"body":{"injectables/AuthService.html":{},"classes/BaseUserDto.html":{},"entities/User.html":{}}}],["photo",{"_index":513,"title":{"entities/Photo.html":{}},"body":{"entities/Album.html":{},"classes/AlbumSummaryDto.html":{},"injectables/BuyerOrdersService.html":{},"entities/OrderItem.html":{},"classes/OrderItemResponseDto.html":{},"classes/OrderResponseDto.html":{},"modules/OrdersModule.html":{},"entities/Photo.html":{},"controllers/PhotoController.html":{},"modules/PhotoModule.html":{},"injectables/PhotoService.html":{},"coverage.html":{}}}],["photo.album",{"_index":514,"title":{},"body":{"entities/Album.html":{}}}],["photo.album.photographer",{"_index":2126,"title":{},"body":{"injectables/PhotoService.html":{}}}],["photo.controller",{"_index":2042,"title":{},"body":{"modules/PhotoModule.html":{}}}],["photo.dto",{"_index":2485,"title":{},"body":{"classes/UpdatePhotoDto.html":{}}}],["photo.dto.ts",{"_index":1392,"title":{},"body":{"classes/CreatePhotoDto.html":{},"classes/UpdatePhotoDto.html":{},"coverage.html":{}}}],["photo.dto.ts:6",{"_index":1394,"title":{},"body":{"classes/CreatePhotoDto.html":{}}}],["photo.dto.ts:9",{"_index":1393,"title":{},"body":{"classes/CreatePhotoDto.html":{}}}],["photo.id",{"_index":421,"title":{},"body":{"injectables/AdminUserService.html":{},"injectables/AlbumAccessService.html":{},"injectables/BuyerOrdersService.html":{},"injectables/UserService.html":{}}}],["photo.name",{"_index":2574,"title":{},"body":{"injectables/UserService.html":{}}}],["photo.service",{"_index":2010,"title":{},"body":{"controllers/PhotoController.html":{},"modules/PhotoModule.html":{}}}],["photo.sizemb",{"_index":2130,"title":{},"body":{"injectables/PhotoService.html":{}}}],["photo.url",{"_index":422,"title":{},"body":{"injectables/AdminUserService.html":{},"injectables/AlbumAccessService.html":{},"injectables/BuyerOrdersService.html":{},"injectables/UserService.html":{}}}],["photo.urlthumbnail",{"_index":626,"title":{},"body":{"injectables/AlbumAccessService.html":{},"injectables/BuyerOrdersService.html":{}}}],["photo.urlweb",{"_index":624,"title":{},"body":{"injectables/AlbumAccessService.html":{},"injectables/BuyerOrdersService.html":{}}}],["photo/photo.module",{"_index":806,"title":{},"body":{"modules/AppModule.html":{}}}],["photocontroller",{"_index":1987,"title":{"controllers/PhotoController.html":{}},"body":{"controllers/PhotoController.html":{},"modules/PhotoModule.html":{},"coverage.html":{}}}],["photographer",{"_index":92,"title":{},"body":{"classes/AdminAlbumDto.html":{},"injectables/AdminOrderService.html":{},"classes/AdminUserDto.html":{},"injectables/AdminUserService.html":{},"entities/Album.html":{},"injectables/AlbumAccessService.html":{},"injectables/AlbumService.html":{},"classes/BaseUserDto.html":{},"injectables/BuyerOrdersService.html":{},"injectables/MailService.html":{},"modules/OrdersModule.html":{},"injectables/PhotoService.html":{},"controllers/PhotographerOrdersController.html":{},"injectables/PhotographerOrdersService.html":{},"entities/User.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["photographer.id",{"_index":1197,"title":{},"body":{"injectables/BuyerOrdersService.html":{}}}],["photographer.role",{"_index":716,"title":{},"body":{"injectables/AlbumService.html":{},"injectables/PhotoService.html":{}}}],["photographer.storageusedmb",{"_index":2071,"title":{},"body":{"injectables/PhotoService.html":{}}}],["photographer/orders",{"_index":2148,"title":{},"body":{"controllers/PhotographerOrdersController.html":{}}}],["photographer1@test.com",{"_index":2243,"title":{},"body":{"injectables/SeedService.html":{}}}],["photographer2@test.com",{"_index":2246,"title":{},"body":{"injectables/SeedService.html":{}}}],["photographer3@test.com",{"_index":2247,"title":{},"body":{"injectables/SeedService.html":{}}}],["photographer4@test.com",{"_index":2248,"title":{},"body":{"injectables/SeedService.html":{}}}],["photographer5@test.com",{"_index":2250,"title":{},"body":{"injectables/SeedService.html":{}}}],["photographeraccount",{"_index":1195,"title":{},"body":{"injectables/BuyerOrdersService.html":{}}}],["photographeraccount.accesstoken",{"_index":1198,"title":{},"body":{"injectables/BuyerOrdersService.html":{}}}],["photographeraccount.provideruserid",{"_index":1199,"title":{},"body":{"injectables/BuyerOrdersService.html":{}}}],["photographeremail",{"_index":1582,"title":{},"body":{"injectables/MailService.html":{}}}],["photographerid",{"_index":221,"title":{},"body":{"controllers/AdminOrderController.html":{},"injectables/AdminOrderService.html":{},"entities/Album.html":{},"injectables/AlbumService.html":{},"controllers/PhotographerOrdersController.html":{},"injectables/PhotographerOrdersService.html":{}}}],["photographerorderscontroller",{"_index":1830,"title":{"controllers/PhotographerOrdersController.html":{}},"body":{"modules/OrdersModule.html":{},"controllers/PhotographerOrdersController.html":{},"coverage.html":{}}}],["photographerordersservice",{"_index":1828,"title":{"injectables/PhotographerOrdersService.html":{}},"body":{"modules/OrdersModule.html":{},"controllers/PhotographerOrdersController.html":{},"injectables/PhotographerOrdersService.html":{},"coverage.html":{},"overview.html":{}}}],["photographers",{"_index":429,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["photographers.map((p",{"_index":447,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["photoid",{"_index":1375,"title":{},"body":{"classes/CreateOrderDto.html":{},"classes/OrderItemDto.html":{},"injectables/PhotoService.html":{}}}],["photoids",{"_index":1144,"title":{},"body":{"injectables/BuyerOrdersService.html":{}}}],["photomodule",{"_index":684,"title":{"modules/PhotoModule.html":{}},"body":{"modules/AlbumModule.html":{},"modules/AppModule.html":{},"modules/PhotoModule.html":{},"modules.html":{},"overview.html":{}}}],["photorepository",{"_index":1105,"title":{},"body":{"injectables/BuyerOrdersService.html":{},"injectables/PhotoService.html":{}}}],["photos",{"_index":75,"title":{},"body":{"classes/AdminAlbumDto.html":{},"classes/AdminUserDto.html":{},"injectables/AdminUserService.html":{},"entities/Album.html":{},"injectables/AlbumAccessService.html":{},"injectables/AlbumService.html":{},"injectables/BuyerOrdersService.html":{},"injectables/PhotoService.html":{},"injectables/UserService.html":{}}}],["photos.find((p",{"_index":1158,"title":{},"body":{"injectables/BuyerOrdersService.html":{}}}],["photos.length",{"_index":1153,"title":{},"body":{"injectables/BuyerOrdersService.html":{},"injectables/PhotoService.html":{}}}],["photos.map((p",{"_index":2141,"title":{},"body":{"injectables/PhotoService.html":{}}}],["photos.reduce((sum",{"_index":2138,"title":{},"body":{"injectables/PhotoService.html":{}}}],["photoscount",{"_index":483,"title":{},"body":{"entities/Album.html":{},"injectables/AlbumService.html":{}}}],["photoservice",{"_index":692,"title":{"injectables/PhotoService.html":{}},"body":{"injectables/AlbumService.html":{},"controllers/PhotoController.html":{},"modules/PhotoModule.html":{},"injectables/PhotoService.html":{},"coverage.html":{},"overview.html":{}}}],["photostosave",{"_index":2102,"title":{},"body":{"injectables/PhotoService.html":{}}}],["photothumbnailurl",{"_index":1164,"title":{},"body":{"injectables/BuyerOrdersService.html":{},"entities/OrderItem.html":{}}}],["photourl",{"_index":1162,"title":{},"body":{"injectables/BuyerOrdersService.html":{},"entities/OrderItem.html":{}}}],["photoweburl",{"_index":1163,"title":{},"body":{"injectables/BuyerOrdersService.html":{},"entities/OrderItem.html":{}}}],["picture_url",{"_index":1205,"title":{},"body":{"injectables/BuyerOrdersService.html":{}}}],["ping",{"_index":1642,"title":{},"body":{"controllers/MercadopagoController.html":{}}}],["plainuser",{"_index":2565,"title":{},"body":{"injectables/UserService.html":{}}}],["plainuser.accessiblealbums",{"_index":2571,"title":{},"body":{"injectables/UserService.html":{}}}],["plainuser.accessiblealbums.map",{"_index":2572,"title":{},"body":{"injectables/UserService.html":{}}}],["plainuser.createdat",{"_index":2569,"title":{},"body":{"injectables/UserService.html":{}}}],["plainuser.password",{"_index":2566,"title":{},"body":{"injectables/UserService.html":{}}}],["plainuser.passwordresetrequestedat",{"_index":2568,"title":{},"body":{"injectables/UserService.html":{}}}],["plainuser.provider",{"_index":2567,"title":{},"body":{"injectables/UserService.html":{}}}],["plainuser.updatedat",{"_index":2570,"title":{},"body":{"injectables/UserService.html":{}}}],["plan",{"_index":2269,"title":{},"body":{"injectables/SeedService.html":{},"entities/Subscription.html":{},"entities/SubscriptionOrder.html":{},"injectables/SubscriptionService.html":{}}}],["plan.durationmonths",{"_index":2288,"title":{},"body":{"injectables/SeedService.html":{},"injectables/SubscriptionService.html":{}}}],["plan.name",{"_index":2287,"title":{},"body":{"injectables/SeedService.html":{},"injectables/SubscriptionService.html":{}}}],["plan.price",{"_index":2422,"title":{},"body":{"injectables/SubscriptionService.html":{}}}],["plandata",{"_index":2280,"title":{},"body":{"injectables/SeedService.html":{}}}],["plandata.durationmonths",{"_index":2283,"title":{},"body":{"injectables/SeedService.html":{}}}],["plandata.name",{"_index":2282,"title":{},"body":{"injectables/SeedService.html":{}}}],["planes",{"_index":2289,"title":{},"body":{"injectables/SeedService.html":{},"injectables/SubscriptionService.html":{}}}],["planid",{"_index":1403,"title":{},"body":{"classes/CreateSubscriptionOrderDto.html":{},"controllers/SubscriptionController.html":{},"injectables/SubscriptionService.html":{}}}],["planname",{"_index":2820,"title":{},"body":{"miscellaneous/variables.html":{}}}],["planrepo",{"_index":2235,"title":{},"body":{"injectables/SeedService.html":{},"injectables/SubscriptionService.html":{}}}],["plans",{"_index":2267,"title":{},"body":{"injectables/SeedService.html":{}}}],["plantilla",{"_index":1724,"title":{},"body":{"injectables/MercadopagoService.html":{}}}],["platform",{"_index":2712,"title":{},"body":{"index.html":{}}}],["please",{"_index":2740,"title":{},"body":{"index.html":{}}}],["podés",{"_index":1480,"title":{},"body":{"injectables/FilesService.html":{}}}],["por",{"_index":538,"title":{},"body":{"entities/Album.html":{},"guards/AuthGuard.html":{},"injectables/PaymentService.html":{},"injectables/PhotoService.html":{}}}],["porcentaje",{"_index":1216,"title":{},"body":{"injectables/BuyerOrdersService.html":{},"miscellaneous/variables.html":{}}}],["portada",{"_index":24,"title":{},"body":{"classes/AdminAlbumByIdDto.html":{},"interfaces/AdminAlbumSummaryDto.html":{},"interfaces/AdminPhotographerByIdDto.html":{},"injectables/AdminUserService.html":{}}}],["possible",{"_index":2704,"title":{},"body":{"index.html":{}}}],["post",{"_index":352,"title":{},"body":{"controllers/AdminUserController.html":{},"controllers/AlbumAccessController.html":{},"controllers/AlbumController.html":{},"controllers/AuthController.html":{},"controllers/BuyerOrdersController.html":{},"controllers/FilesController.html":{},"controllers/LeadController.html":{},"controllers/MercadopagoController.html":{},"controllers/PhotoController.html":{},"controllers/SeedController.html":{},"controllers/SubscriptionController.html":{}}}],["post('/grant",{"_index":569,"title":{},"body":{"controllers/AlbumAccessController.html":{}}}],["post(':id/pay",{"_index":1054,"title":{},"body":{"controllers/BuyerOrdersController.html":{}}}],["post('create",{"_index":2331,"title":{},"body":{"controllers/SubscriptionController.html":{}}}],["post('login",{"_index":849,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('orders",{"_index":2343,"title":{},"body":{"controllers/SubscriptionController.html":{}}}],["post('orders/:id/pay",{"_index":2349,"title":{},"body":{"controllers/SubscriptionController.html":{}}}],["post('plans",{"_index":2216,"title":{},"body":{"controllers/SeedController.html":{}}}],["post('register",{"_index":853,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('request",{"_index":856,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('reset",{"_index":860,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('upload",{"_index":1429,"title":{},"body":{"controllers/FilesController.html":{},"controllers/PhotoController.html":{}}}],["post('upload/:albumid",{"_index":2012,"title":{},"body":{"controllers/PhotoController.html":{}}}],["post('users",{"_index":2218,"title":{},"body":{"controllers/SeedController.html":{}}}],["post('users/:id/activate",{"_index":368,"title":{},"body":{"controllers/AdminUserController.html":{}}}],["post('users/:id/activate')@roles(validroles.super_admin",{"_index":335,"title":{},"body":{"controllers/AdminUserController.html":{}}}],["post('users/:id/deactivate",{"_index":371,"title":{},"body":{"controllers/AdminUserController.html":{}}}],["post('users/:id/deactivate')@roles(validroles.super_admin",{"_index":338,"title":{},"body":{"controllers/AdminUserController.html":{}}}],["post('webhook",{"_index":1628,"title":{},"body":{"controllers/MercadopagoController.html":{}}}],["postgres",{"_index":813,"title":{},"body":{"modules/AppModule.html":{}}}],["precision",{"_index":1762,"title":{},"body":{"entities/Order.html":{},"entities/OrderItem.html":{},"entities/SubscriptionOrder.html":{}}}],["preference",{"_index":1249,"title":{},"body":{"injectables/BuyerOrdersService.html":{},"injectables/SubscriptionService.html":{}}}],["preferenceid",{"_index":1263,"title":{},"body":{"injectables/BuyerOrdersService.html":{},"injectables/SubscriptionService.html":{}}}],["preferencepayload",{"_index":1231,"title":{},"body":{"injectables/BuyerOrdersService.html":{},"injectables/SubscriptionService.html":{}}}],["preferencia",{"_index":1094,"title":{},"body":{"controllers/BuyerOrdersController.html":{},"injectables/BuyerOrdersService.html":{},"injectables/SubscriptionService.html":{}}}],["prefix",{"_index":53,"title":{},"body":{"controllers/AdminAlbumController.html":{},"controllers/AdminOrderController.html":{},"controllers/AdminUserController.html":{},"controllers/AlbumAccessController.html":{},"controllers/AlbumController.html":{},"controllers/AuthController.html":{},"controllers/BuyerOrdersController.html":{},"controllers/FilesController.html":{},"controllers/LeadController.html":{},"controllers/MercadopagoController.html":{},"controllers/PaymentController.html":{},"controllers/PhotoController.html":{},"controllers/PhotographerOrdersController.html":{},"controllers/SeedController.html":{},"controllers/SubscriptionController.html":{},"controllers/UserController.html":{}}}],["preparando",{"_index":1779,"title":{},"body":{"entities/Order.html":{}}}],["previas",{"_index":2442,"title":{},"body":{"injectables/SubscriptionService.html":{}}}],["price",{"_index":45,"title":{},"body":{"classes/AdminAlbumByIdDto.html":{},"classes/AdminAlbumDto.html":{},"classes/AdminUserDto.html":{},"entities/Album.html":{},"classes/AlbumSummaryDto.html":{},"classes/CreateAlbumDto.html":{},"classes/OrderItemResponseDto.html":{},"classes/OrderResponseDto.html":{},"classes/PriceOptionDto.html":{},"injectables/SeedService.html":{},"entities/SubscriptionPlan.html":{}}}],["pricedigital",{"_index":76,"title":{},"body":{"classes/AdminAlbumDto.html":{},"classes/AdminUserDto.html":{},"injectables/AdminUserService.html":{},"entities/Album.html":{},"injectables/AlbumAccessService.html":{},"classes/AlbumSummaryDto.html":{},"injectables/BuyerOrdersService.html":{},"classes/CreateAlbumDto.html":{},"classes/OrderItemResponseDto.html":{},"classes/OrderResponseDto.html":{},"classes/PriceOptionDto.html":{},"injectables/UserService.html":{}}}],["priceoptiondto",{"_index":1337,"title":{"classes/PriceOptionDto.html":{}},"body":{"classes/CreateAlbumDto.html":{},"classes/PriceOptionDto.html":{},"coverage.html":{}}}],["prices",{"_index":25,"title":{},"body":{"classes/AdminAlbumByIdDto.html":{},"classes/AdminAlbumDto.html":{},"classes/AdminUserDto.html":{},"injectables/AdminUserService.html":{},"entities/Album.html":{},"injectables/AlbumAccessService.html":{},"classes/AlbumSummaryDto.html":{},"injectables/BuyerOrdersService.html":{},"classes/CreateAlbumDto.html":{},"classes/OrderItemResponseDto.html":{},"classes/OrderResponseDto.html":{},"classes/PriceOptionDto.html":{},"injectables/UserService.html":{}}}],["priceschoolsports",{"_index":77,"title":{},"body":{"classes/AdminAlbumDto.html":{},"classes/AdminUserDto.html":{},"injectables/AdminUserService.html":{},"entities/Album.html":{},"injectables/AlbumAccessService.html":{},"classes/AlbumSummaryDto.html":{},"injectables/BuyerOrdersService.html":{},"classes/CreateAlbumDto.html":{},"classes/OrderItemResponseDto.html":{},"classes/OrderResponseDto.html":{},"classes/PriceOptionDto.html":{},"injectables/UserService.html":{}}}],["primarygeneratedcolumn",{"_index":532,"title":{},"body":{"entities/Album.html":{},"entities/Lead.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"entities/PasswordResetToken.html":{},"entities/PaymentAccount.html":{},"entities/Photo.html":{},"entities/Subscription.html":{},"entities/SubscriptionOrder.html":{},"entities/SubscriptionPlan.html":{},"entities/User.html":{}}}],["primarygeneratedcolumn('uuid",{"_index":500,"title":{},"body":{"entities/Album.html":{},"entities/Lead.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"entities/PasswordResetToken.html":{},"entities/PaymentAccount.html":{},"entities/Photo.html":{},"entities/Subscription.html":{},"entities/SubscriptionOrder.html":{},"entities/SubscriptionPlan.html":{},"entities/User.html":{}}}],["primera",{"_index":175,"title":{},"body":{"interfaces/AdminAlbumSummaryDto.html":{},"interfaces/AdminPhotographerByIdDto.html":{}}}],["printsize",{"_index":1351,"title":{},"body":{"classes/CreateAlbumDto.html":{},"classes/PriceOptionDto.html":{},"miscellaneous/enumerations.html":{}}}],["privado",{"_index":1297,"title":{},"body":{"injectables/BuyerOrdersService.html":{},"injectables/SubscriptionService.html":{}}}],["private",{"_index":114,"title":{},"body":{"injectables/AdminAlbumService.html":{},"injectables/AdminOrderService.html":{},"controllers/AdminUserController.html":{},"injectables/AdminUserService.html":{},"injectables/AlbumAccessService.html":{},"injectables/AlbumService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/BuyerOrdersService.html":{},"injectables/LeadService.html":{},"injectables/MailService.html":{},"injectables/MercadopagoService.html":{},"injectables/PasswordResetService.html":{},"injectables/PaymentService.html":{},"injectables/PhotoService.html":{},"injectables/PhotographerOrdersService.html":{},"injectables/SeedService.html":{},"injectables/SubscriptionService.html":{},"injectables/UserService.html":{}}}],["pro",{"_index":1619,"title":{},"body":{"injectables/MailService.html":{},"injectables/SeedService.html":{},"entities/SubscriptionPlan.html":{},"miscellaneous/variables.html":{}}}],["procesamos",{"_index":1646,"title":{},"body":{"controllers/MercadopagoController.html":{}}}],["process",{"_index":1711,"title":{},"body":{"injectables/MercadopagoService.html":{}}}],["process.env.backend_url}/mercadopago/webhook",{"_index":1245,"title":{},"body":{"injectables/BuyerOrdersService.html":{},"injectables/SubscriptionService.html":{}}}],["process.env.cloudinary_api_key",{"_index":1464,"title":{},"body":{"injectables/FilesService.html":{}}}],["process.env.cloudinary_api_secret",{"_index":1466,"title":{},"body":{"injectables/FilesService.html":{}}}],["process.env.cloudinary_cloud_name",{"_index":1462,"title":{},"body":{"injectables/FilesService.html":{}}}],["process.env.frontend_url}/dashboard/subscription/failure",{"_index":2430,"title":{},"body":{"injectables/SubscriptionService.html":{}}}],["process.env.frontend_url}/dashboard/subscription/success",{"_index":2429,"title":{},"body":{"injectables/SubscriptionService.html":{}}}],["process.env.frontend_url}/payment/failure",{"_index":1237,"title":{},"body":{"injectables/BuyerOrdersService.html":{}}}],["process.env.frontend_url}/payment/success",{"_index":1235,"title":{},"body":{"injectables/BuyerOrdersService.html":{}}}],["process.env.jwt_secret",{"_index":836,"title":{},"body":{"modules/AppModule.html":{},"guards/AuthGuard.html":{}}}],["process.env.mp_client_id",{"_index":1952,"title":{},"body":{"injectables/PaymentService.html":{}}}],["process.env.mp_client_secret",{"_index":1950,"title":{},"body":{"injectables/PaymentService.html":{}}}],["process.env.mp_marketplace_access_token",{"_index":2431,"title":{},"body":{"injectables/SubscriptionService.html":{}}}],["process.env.mp_redirect_uri",{"_index":1956,"title":{},"body":{"injectables/PaymentService.html":{}}}],["process.env.node_env",{"_index":823,"title":{},"body":{"modules/AppModule.html":{}}}],["process.env.postgres_url",{"_index":814,"title":{},"body":{"modules/AppModule.html":{}}}],["processnotification",{"_index":1672,"title":{},"body":{"injectables/MercadopagoService.html":{}}}],["processnotification(rawbody",{"_index":1680,"title":{},"body":{"injectables/MercadopagoService.html":{}}}],["production",{"_index":824,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["progressive",{"_index":2664,"title":{},"body":{"index.html":{}}}],["project",{"_index":2676,"title":{},"body":{"index.html":{}}}],["promise",{"_index":387,"title":{},"body":{"injectables/AdminUserService.html":{},"injectables/AlbumService.html":{},"guards/AuthGuard.html":{},"injectables/BuyerOrdersService.html":{},"injectables/FilesService.html":{},"injectables/PasswordResetService.html":{},"injectables/PaymentService.html":{},"injectables/SubscriptionService.html":{},"injectables/UserService.html":{}}}],["promise((resolve",{"_index":1491,"title":{},"body":{"injectables/FilesService.html":{}}}],["promise.all",{"_index":2098,"title":{},"body":{"injectables/PhotoService.html":{}}}],["properties",{"_index":16,"title":{"properties.html":{}},"body":{"classes/AdminAlbumByIdDto.html":{},"classes/AdminAlbumDto.html":{},"interfaces/AdminAlbumSummaryDto.html":{},"interfaces/AdminPhotographerByIdDto.html":{},"classes/AdminUserDto.html":{},"entities/Album.html":{},"classes/AlbumSummaryDto.html":{},"classes/BaseUserDto.html":{},"injectables/BuyerOrdersService.html":{},"classes/CreateAlbumDto.html":{},"classes/CreateLeadDto.html":{},"classes/CreateOrderDto.html":{},"classes/CreatePaymentAccountDto.html":{},"classes/CreatePhotoDto.html":{},"classes/CreateSubscriptionOrderDto.html":{},"classes/CreateUserDto.html":{},"entities/Lead.html":{},"classes/LoginDto.html":{},"injectables/MailService.html":{},"injectables/MercadopagoService.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"classes/OrderItemDto.html":{},"classes/OrderItemResponseDto.html":{},"classes/OrderResponseDto.html":{},"classes/PaginationDto.html":{},"entities/PasswordResetToken.html":{},"entities/PaymentAccount.html":{},"entities/Photo.html":{},"classes/PriceOptionDto.html":{},"entities/Subscription.html":{},"entities/SubscriptionOrder.html":{},"entities/SubscriptionPlan.html":{},"classes/UpdateDeliveryStatusDto.html":{},"entities/User.html":{},"properties.html":{}}}],["provider",{"_index":407,"title":{},"body":{"injectables/AdminUserService.html":{},"injectables/AuthService.html":{},"classes/CreatePaymentAccountDto.html":{},"entities/PaymentAccount.html":{},"injectables/PaymentService.html":{},"injectables/SeedService.html":{},"entities/User.html":{},"injectables/UserService.html":{}}}],["providers",{"_index":190,"title":{},"body":{"modules/AdminModule.html":{},"modules/AlbumModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/FilesModule.html":{},"modules/LeadModule.html":{},"modules/MailModule.html":{},"modules/MercadopagoModule.html":{},"modules/OrdersModule.html":{},"modules/PaymentModule.html":{},"modules/PhotoModule.html":{},"modules/SeedModule.html":{},"modules/SubscriptionModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["provideruserid",{"_index":1381,"title":{},"body":{"classes/CreatePaymentAccountDto.html":{},"entities/PaymentAccount.html":{}}}],["prt",{"_index":2517,"title":{},"body":{"entities/User.html":{}}}],["prt.user",{"_index":2518,"title":{},"body":{"entities/User.html":{}}}],["public_id",{"_index":1495,"title":{},"body":{"injectables/FilesService.html":{},"injectables/PhotoService.html":{}}}],["publicid",{"_index":1454,"title":{},"body":{"injectables/FilesService.html":{},"entities/Photo.html":{},"injectables/PhotoService.html":{}}}],["published",{"_index":139,"title":{},"body":{"injectables/AdminAlbumService.html":{}}}],["pudo",{"_index":2136,"title":{},"body":{"injectables/PhotoService.html":{}}}],["puede",{"_index":719,"title":{},"body":{"injectables/AlbumService.html":{},"controllers/AuthController.html":{},"injectables/PhotographerOrdersService.html":{}}}],["pueden",{"_index":547,"title":{},"body":{"entities/Album.html":{},"injectables/BuyerOrdersService.html":{}}}],["puedes",{"_index":2065,"title":{},"body":{"injectables/PhotoService.html":{}}}],["quality",{"_index":1501,"title":{},"body":{"injectables/FilesService.html":{}}}],["quantity",{"_index":776,"title":{},"body":{"classes/AlbumSummaryDto.html":{},"injectables/BuyerOrdersService.html":{},"classes/CreateOrderDto.html":{},"entities/OrderItem.html":{},"classes/OrderItemDto.html":{},"classes/OrderItemResponseDto.html":{},"classes/OrderResponseDto.html":{},"injectables/SubscriptionService.html":{}}}],["que",{"_index":148,"title":{},"body":{"injectables/AdminAlbumService.html":{},"injectables/AdminOrderService.html":{},"entities/Album.html":{},"guards/AuthGuard.html":{},"controllers/BuyerOrdersController.html":{},"controllers/FilesController.html":{},"entities/Photo.html":{},"injectables/PhotographerOrdersService.html":{}}}],["query",{"_index":236,"title":{},"body":{"controllers/AdminOrderController.html":{},"controllers/AlbumController.html":{},"controllers/AuthController.html":{},"controllers/PaymentController.html":{}}}],["query('clientid",{"_index":251,"title":{},"body":{"controllers/AdminOrderController.html":{}}}],["query('limit",{"_index":253,"title":{},"body":{"controllers/AdminOrderController.html":{}}}],["query('page",{"_index":252,"title":{},"body":{"controllers/AdminOrderController.html":{}}}],["query('photographerid",{"_index":250,"title":{},"body":{"controllers/AdminOrderController.html":{}}}],["query('status",{"_index":249,"title":{},"body":{"controllers/AdminOrderController.html":{}}}],["querés",{"_index":1776,"title":{},"body":{"entities/Order.html":{}}}],["questions",{"_index":2738,"title":{},"body":{"index.html":{}}}],["randomuuid",{"_index":1458,"title":{},"body":{"injectables/FilesService.html":{}}}],["randomuuid().replace",{"_index":1486,"title":{},"body":{"injectables/FilesService.html":{}}}],["raw",{"_index":157,"title":{},"body":{"injectables/AdminAlbumService.html":{}}}],["rawbody",{"_index":1648,"title":{},"body":{"controllers/MercadopagoController.html":{},"injectables/MercadopagoService.html":{}}}],["rdenes",{"_index":1074,"title":{},"body":{"controllers/BuyerOrdersController.html":{},"injectables/BuyerOrdersService.html":{},"injectables/PhotographerOrdersService.html":{},"injectables/SubscriptionService.html":{}}}],["read",{"_index":2779,"title":{},"body":{"index.html":{}}}],["readme",{"_index":2663,"title":{"index.html":{}},"body":{}}],["readonly",{"_index":70,"title":{},"body":{"controllers/AdminAlbumController.html":{},"injectables/AdminAlbumService.html":{},"controllers/AdminOrderController.html":{},"injectables/AdminOrderService.html":{},"controllers/AdminUserController.html":{},"injectables/AdminUserService.html":{},"controllers/AlbumAccessController.html":{},"injectables/AlbumAccessService.html":{},"controllers/AlbumController.html":{},"injectables/AlbumService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"controllers/BuyerOrdersController.html":{},"injectables/BuyerOrdersService.html":{},"controllers/FilesController.html":{},"injectables/FilesService.html":{},"controllers/LeadController.html":{},"injectables/LeadService.html":{},"injectables/MailService.html":{},"controllers/MercadopagoController.html":{},"injectables/MercadopagoService.html":{},"controllers/PaymentController.html":{},"injectables/PaymentService.html":{},"controllers/PhotoController.html":{},"injectables/PhotoService.html":{},"controllers/PhotographerOrdersController.html":{},"injectables/PhotographerOrdersService.html":{},"controllers/SeedController.html":{},"injectables/SeedService.html":{},"controllers/SubscriptionController.html":{},"controllers/UserController.html":{}}}],["ready",{"_index":2695,"title":{},"body":{"index.html":{}}}],["real",{"_index":604,"title":{},"body":{"injectables/AlbumAccessService.html":{},"injectables/BuyerOrdersService.html":{},"index.html":{}}}],["rechazado",{"_index":2188,"title":{},"body":{"injectables/PhotographerOrdersService.html":{}}}],["recibida",{"_index":1736,"title":{},"body":{"injectables/MercadopagoService.html":{}}}],["recibido",{"_index":668,"title":{},"body":{"controllers/AlbumController.html":{},"injectables/MailService.html":{},"injectables/MercadopagoService.html":{},"injectables/PhotoService.html":{}}}],["reconocido",{"_index":1747,"title":{},"body":{"injectables/MercadopagoService.html":{}}}],["recupera",{"_index":1618,"title":{},"body":{"injectables/MailService.html":{}}}],["recuperar",{"_index":2580,"title":{},"body":{"injectables/UserService.html":{}}}],["redirect_uri",{"_index":1955,"title":{},"body":{"injectables/PaymentService.html":{}}}],["reducir",{"_index":2131,"title":{},"body":{"injectables/PhotoService.html":{}}}],["referencia",{"_index":1804,"title":{},"body":{"entities/OrderItem.html":{}}}],["reflect",{"_index":2640,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":2196,"title":{},"body":{"guards/RolesGuard.html":{}}}],["refresca",{"_index":1944,"title":{},"body":{"injectables/PaymentService.html":{}}}],["refrescar",{"_index":1974,"title":{},"body":{"injectables/PaymentService.html":{}}}],["refresh_token",{"_index":1971,"title":{},"body":{"injectables/PaymentService.html":{}}}],["refreshtoken",{"_index":1382,"title":{},"body":{"classes/CreatePaymentAccountDto.html":{},"entities/PaymentAccount.html":{},"injectables/PaymentService.html":{}}}],["refreshtoken(account",{"_index":1942,"title":{},"body":{"injectables/PaymentService.html":{}}}],["refunded",{"_index":1770,"title":{},"body":{"entities/Order.html":{},"entities/SubscriptionOrder.html":{},"miscellaneous/typealiases.html":{}}}],["register",{"_index":842,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["register(dto",{"_index":851,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["registr",{"_index":1003,"title":{},"body":{"injectables/AuthService.html":{}}}],["registrada",{"_index":2418,"title":{},"body":{"injectables/SubscriptionService.html":{}}}],["registrado",{"_index":1000,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LeadService.html":{}}}],["registrar",{"_index":990,"title":{},"body":{"injectables/AuthService.html":{}}}],["registro",{"_index":873,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["registroid",{"_index":1700,"title":{},"body":{"injectables/MercadopagoService.html":{}}}],["reintentos",{"_index":1657,"title":{},"body":{"controllers/MercadopagoController.html":{}}}],["reject",{"_index":1492,"title":{},"body":{"injectables/FilesService.html":{}}}],["reject(error",{"_index":1503,"title":{},"body":{"injectables/FilesService.html":{}}}],["rejected",{"_index":301,"title":{},"body":{"injectables/AdminOrderService.html":{},"injectables/AdminUserService.html":{},"injectables/MercadopagoService.html":{},"entities/Order.html":{},"injectables/PhotographerOrdersService.html":{},"entities/SubscriptionOrder.html":{},"miscellaneous/typealiases.html":{}}}],["rejectedcount",{"_index":300,"title":{},"body":{"injectables/AdminOrderService.html":{}}}],["rejectedorders",{"_index":182,"title":{},"body":{"interfaces/AdminAlbumSummaryDto.html":{},"interfaces/AdminPhotographerByIdDto.html":{},"injectables/AdminUserService.html":{}}}],["rejectunauthorized",{"_index":825,"title":{},"body":{"modules/AppModule.html":{}}}],["relaciones",{"_index":1781,"title":{},"body":{"entities/Order.html":{},"entities/PasswordResetToken.html":{},"entities/PaymentAccount.html":{},"entities/User.html":{}}}],["relación",{"_index":1799,"title":{},"body":{"entities/OrderItem.html":{}}}],["relations",{"_index":281,"title":{},"body":{"injectables/AdminOrderService.html":{},"injectables/AdminUserService.html":{},"injectables/AlbumAccessService.html":{},"injectables/AlbumService.html":{},"injectables/BuyerOrdersService.html":{},"injectables/PasswordResetService.html":{},"injectables/PaymentService.html":{},"injectables/PhotoService.html":{},"injectables/PhotographerOrdersService.html":{},"injectables/SubscriptionService.html":{},"injectables/UserService.html":{}}}],["remove",{"_index":690,"title":{},"body":{"injectables/AlbumService.html":{}}}],["remove(id",{"_index":701,"title":{},"body":{"injectables/AlbumService.html":{}}}],["removeallbyalbum",{"_index":2045,"title":{},"body":{"injectables/PhotoService.html":{}}}],["removeallbyalbum(albumid",{"_index":2052,"title":{},"body":{"injectables/PhotoService.html":{}}}],["removebyid",{"_index":2046,"title":{},"body":{"injectables/PhotoService.html":{}}}],["removebyid(photoid",{"_index":2054,"title":{},"body":{"injectables/PhotoService.html":{}}}],["repository",{"_index":101,"title":{},"body":{"injectables/AdminAlbumService.html":{},"injectables/AdminOrderService.html":{},"injectables/AdminUserService.html":{},"injectables/AlbumAccessService.html":{},"injectables/AlbumService.html":{},"injectables/BuyerOrdersService.html":{},"injectables/LeadService.html":{},"injectables/PasswordResetService.html":{},"injectables/PaymentService.html":{},"injectables/PhotoService.html":{},"injectables/PhotographerOrdersService.html":{},"injectables/SeedService.html":{},"injectables/SubscriptionService.html":{},"injectables/UserService.html":{},"index.html":{}}}],["req",{"_index":557,"title":{},"body":{"controllers/AlbumAccessController.html":{},"controllers/AlbumController.html":{},"controllers/AuthController.html":{},"controllers/BuyerOrdersController.html":{},"controllers/FilesController.html":{},"controllers/MercadopagoController.html":{},"controllers/PaymentController.html":{},"controllers/PhotoController.html":{},"controllers/PhotographerOrdersController.html":{},"controllers/SubscriptionController.html":{},"controllers/UserController.html":{}}}],["req.body",{"_index":1637,"title":{},"body":{"controllers/MercadopagoController.html":{}}}],["req.body.length",{"_index":1639,"title":{},"body":{"controllers/MercadopagoController.html":{}}}],["req.body.tostring('utf",{"_index":1649,"title":{},"body":{"controllers/MercadopagoController.html":{}}}],["req.user.id",{"_index":2033,"title":{},"body":{"controllers/PhotoController.html":{}}}],["req.user.sub",{"_index":571,"title":{},"body":{"controllers/AlbumAccessController.html":{},"controllers/AlbumController.html":{},"controllers/BuyerOrdersController.html":{},"controllers/FilesController.html":{},"controllers/PaymentController.html":{},"controllers/PhotoController.html":{},"controllers/PhotographerOrdersController.html":{},"controllers/SubscriptionController.html":{},"controllers/UserController.html":{}}}],["request",{"_index":564,"title":{},"body":{"controllers/AlbumAccessController.html":{},"guards/AuthGuard.html":{},"controllers/MercadopagoController.html":{},"injectables/MercadopagoService.html":{},"injectables/PhotoService.html":{},"guards/RolesGuard.html":{}}}],["request.headers['authorization']?.split",{"_index":929,"title":{},"body":{"guards/AuthGuard.html":{}}}],["request.user",{"_index":942,"title":{},"body":{"guards/AuthGuard.html":{},"guards/RolesGuard.html":{}}}],["requestid",{"_index":1627,"title":{},"body":{"controllers/MercadopagoController.html":{},"injectables/MercadopagoService.html":{}}}],["requestpasswordreset",{"_index":843,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/PasswordResetService.html":{}}}],["requestpasswordreset(@body('email",{"_index":880,"title":{},"body":{"controllers/AuthController.html":{}}}],["requestpasswordreset(email",{"_index":855,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/PasswordResetService.html":{}}}],["requiredroles",{"_index":2202,"title":{},"body":{"guards/RolesGuard.html":{}}}],["requiredroles.includes(user.role",{"_index":2206,"title":{},"body":{"guards/RolesGuard.html":{}}}],["requiring",{"_index":2720,"title":{},"body":{"index.html":{}}}],["res",{"_index":847,"title":{},"body":{"controllers/AuthController.html":{},"controllers/MercadopagoController.html":{}}}],["res.status(200).send('ok",{"_index":1653,"title":{},"body":{"controllers/MercadopagoController.html":{}}}],["res.status(200).send('webhook",{"_index":1643,"title":{},"body":{"controllers/MercadopagoController.html":{}}}],["resend",{"_index":1567,"title":{},"body":{"injectables/MailService.html":{},"dependencies.html":{}}}],["resend(process.env.resend_api_key",{"_index":1606,"title":{},"body":{"injectables/MailService.html":{}}}],["reset",{"_index":197,"title":{},"body":{"modules/AdminModule.html":{},"modules/AlbumModule.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"modules/FilesModule.html":{},"modules/LeadModule.html":{},"modules/MailModule.html":{},"modules/MercadopagoModule.html":{},"modules/OrdersModule.html":{},"injectables/PasswordResetService.html":{},"entities/PasswordResetToken.html":{},"modules/PaymentModule.html":{},"modules/PhotoModule.html":{},"modules/SeedModule.html":{},"modules/SubscriptionModule.html":{},"entities/User.html":{},"modules/UserModule.html":{},"coverage.html":{},"overview.html":{}}}],["reset.service",{"_index":868,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["reset.service.ts",{"_index":1844,"title":{},"body":{"injectables/PasswordResetService.html":{},"coverage.html":{}}}],["reset.service.ts:18",{"_index":1848,"title":{},"body":{"injectables/PasswordResetService.html":{}}}],["reset.service.ts:27",{"_index":1855,"title":{},"body":{"injectables/PasswordResetService.html":{}}}],["reset.service.ts:40",{"_index":1854,"title":{},"body":{"injectables/PasswordResetService.html":{}}}],["reset.service.ts:51",{"_index":1851,"title":{},"body":{"injectables/PasswordResetService.html":{}}}],["resetear",{"_index":2144,"title":{},"body":{"injectables/PhotoService.html":{}}}],["reseteo",{"_index":882,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["resetlink",{"_index":1586,"title":{},"body":{"injectables/MailService.html":{},"miscellaneous/functions.html":{}}}],["resetpassword",{"_index":844,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["resetpassword(token",{"_index":858,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["resetrepo",{"_index":1849,"title":{},"body":{"injectables/PasswordResetService.html":{}}}],["resetservice",{"_index":870,"title":{},"body":{"controllers/AuthController.html":{}}}],["resettokens",{"_index":2498,"title":{},"body":{"entities/User.html":{}}}],["resolve(result",{"_index":1504,"title":{},"body":{"injectables/FilesService.html":{}}}],["resource_type",{"_index":1498,"title":{},"body":{"injectables/FilesService.html":{}}}],["resources",{"_index":2732,"title":{},"body":{"index.html":{}}}],["response",{"_index":848,"title":{},"body":{"controllers/AuthController.html":{},"controllers/MercadopagoController.html":{}}}],["result",{"_index":1490,"title":{},"body":{"injectables/FilesService.html":{}}}],["result.public_id",{"_index":1511,"title":{},"body":{"injectables/FilesService.html":{}}}],["result.secure_url",{"_index":1510,"title":{},"body":{"injectables/FilesService.html":{}}}],["results",{"_index":9,"title":{},"body":{"classes/Admin.html":{},"classes/AdminAlbumByIdDto.html":{},"controllers/AdminAlbumController.html":{},"classes/AdminAlbumDto.html":{},"injectables/AdminAlbumService.html":{},"interfaces/AdminAlbumSummaryDto.html":{},"modules/AdminModule.html":{},"controllers/AdminOrderController.html":{},"injectables/AdminOrderService.html":{},"interfaces/AdminPhotographerByIdDto.html":{},"controllers/AdminUserController.html":{},"classes/AdminUserDto.html":{},"injectables/AdminUserService.html":{},"entities/Album.html":{},"controllers/AlbumAccessController.html":{},"injectables/AlbumAccessService.html":{},"controllers/AlbumController.html":{},"modules/AlbumModule.html":{},"injectables/AlbumService.html":{},"classes/AlbumSummaryDto.html":{},"modules/AppModule.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseUserDto.html":{},"controllers/BuyerOrdersController.html":{},"injectables/BuyerOrdersService.html":{},"modules/CommonModule.html":{},"classes/CreateAdminDto.html":{},"classes/CreateAlbumDto.html":{},"classes/CreateLeadDto.html":{},"classes/CreateMercadopagoDto.html":{},"classes/CreateOrderDto.html":{},"classes/CreatePaymentAccountDto.html":{},"classes/CreatePhotoDto.html":{},"classes/CreateSeedDto.html":{},"classes/CreateSubscriptionDto.html":{},"classes/CreateSubscriptionOrderDto.html":{},"classes/CreateUserDto.html":{},"controllers/FilesController.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"entities/Lead.html":{},"controllers/LeadController.html":{},"modules/LeadModule.html":{},"injectables/LeadService.html":{},"classes/LoginDto.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"classes/Mercadopago.html":{},"controllers/MercadopagoController.html":{},"modules/MercadopagoModule.html":{},"injectables/MercadopagoService.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"classes/OrderItemDto.html":{},"classes/OrderItemResponseDto.html":{},"classes/OrderResponseDto.html":{},"modules/OrdersModule.html":{},"classes/PaginationDto.html":{},"injectables/PasswordResetService.html":{},"entities/PasswordResetToken.html":{},"entities/PaymentAccount.html":{},"controllers/PaymentController.html":{},"modules/PaymentModule.html":{},"injectables/PaymentService.html":{},"entities/Photo.html":{},"controllers/PhotoController.html":{},"modules/PhotoModule.html":{},"injectables/PhotoService.html":{},"controllers/PhotographerOrdersController.html":{},"injectables/PhotographerOrdersService.html":{},"classes/PriceOptionDto.html":{},"guards/RolesGuard.html":{},"classes/Seed.html":{},"controllers/SeedController.html":{},"modules/SeedModule.html":{},"injectables/SeedService.html":{},"entities/Subscription.html":{},"controllers/SubscriptionController.html":{},"modules/SubscriptionModule.html":{},"entities/SubscriptionOrder.html":{},"entities/SubscriptionPlan.html":{},"injectables/SubscriptionService.html":{},"classes/UpdateAdminDto.html":{},"classes/UpdateAlbumDto.html":{},"classes/UpdateDeliveryStatusDto.html":{},"classes/UpdateLeadDto.html":{},"classes/UpdateMercadopagoDto.html":{},"classes/UpdateOrderDto.html":{},"classes/UpdatePaymentDto.html":{},"classes/UpdatePhotoDto.html":{},"classes/UpdateSeedDto.html":{},"classes/UpdateSubscriptionDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"routes.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["retornamos",{"_index":876,"title":{},"body":{"controllers/AuthController.html":{}}}],["retryattempts",{"_index":815,"title":{},"body":{"modules/AppModule.html":{}}}],["retrydelay",{"_index":816,"title":{},"body":{"modules/AppModule.html":{}}}],["return",{"_index":71,"title":{},"body":{"controllers/AdminAlbumController.html":{},"injectables/AdminAlbumService.html":{},"controllers/AdminOrderController.html":{},"injectables/AdminOrderService.html":{},"controllers/AdminUserController.html":{},"injectables/AdminUserService.html":{},"controllers/AlbumAccessController.html":{},"injectables/AlbumAccessService.html":{},"controllers/AlbumController.html":{},"injectables/AlbumService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"controllers/BuyerOrdersController.html":{},"injectables/BuyerOrdersService.html":{},"controllers/FilesController.html":{},"injectables/FilesService.html":{},"controllers/LeadController.html":{},"injectables/LeadService.html":{},"injectables/MailService.html":{},"controllers/MercadopagoController.html":{},"injectables/MercadopagoService.html":{},"injectables/PasswordResetService.html":{},"controllers/PaymentController.html":{},"injectables/PaymentService.html":{},"controllers/PhotoController.html":{},"injectables/PhotoService.html":{},"controllers/PhotographerOrdersController.html":{},"injectables/PhotographerOrdersService.html":{},"guards/RolesGuard.html":{},"controllers/SeedController.html":{},"injectables/SeedService.html":{},"controllers/SubscriptionController.html":{},"injectables/SubscriptionService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":61,"title":{},"body":{"controllers/AdminAlbumController.html":{},"injectables/AdminAlbumService.html":{},"controllers/AdminOrderController.html":{},"injectables/AdminOrderService.html":{},"controllers/AdminUserController.html":{},"injectables/AdminUserService.html":{},"controllers/AlbumAccessController.html":{},"injectables/AlbumAccessService.html":{},"controllers/AlbumController.html":{},"injectables/AlbumService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"controllers/BuyerOrdersController.html":{},"injectables/BuyerOrdersService.html":{},"controllers/FilesController.html":{},"injectables/FilesService.html":{},"controllers/LeadController.html":{},"injectables/LeadService.html":{},"injectables/MailService.html":{},"controllers/MercadopagoController.html":{},"injectables/MercadopagoService.html":{},"injectables/PasswordResetService.html":{},"controllers/PaymentController.html":{},"injectables/PaymentService.html":{},"controllers/PhotoController.html":{},"injectables/PhotoService.html":{},"controllers/PhotographerOrdersController.html":{},"injectables/PhotographerOrdersService.html":{},"guards/RolesGuard.html":{},"controllers/SeedController.html":{},"injectables/SeedService.html":{},"controllers/SubscriptionController.html":{},"injectables/SubscriptionService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["role",{"_index":90,"title":{},"body":{"classes/AdminAlbumDto.html":{},"interfaces/AdminAlbumSummaryDto.html":{},"interfaces/AdminPhotographerByIdDto.html":{},"classes/AdminUserDto.html":{},"injectables/AdminUserService.html":{},"injectables/AuthService.html":{},"classes/BaseUserDto.html":{},"classes/CreateUserDto.html":{},"injectables/MailService.html":{},"injectables/PhotographerOrdersService.html":{},"injectables/SeedService.html":{},"entities/User.html":{}}}],["roles",{"_index":240,"title":{},"body":{"controllers/AdminOrderController.html":{},"controllers/AdminUserController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["roles(validroles.super_admin",{"_index":248,"title":{},"body":{"controllers/AdminOrderController.html":{},"controllers/AdminUserController.html":{}}}],["roles_key",{"_index":2200,"title":{},"body":{"guards/RolesGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["rolesguard",{"_index":244,"title":{"guards/RolesGuard.html":{}},"body":{"controllers/AdminOrderController.html":{},"controllers/AdminUserController.html":{},"guards/RolesGuard.html":{},"coverage.html":{}}}],["romper",{"_index":129,"title":{},"body":{"injectables/AdminAlbumService.html":{}}}],["routes",{"_index":2801,"title":{"routes.html":{}},"body":{"routes.html":{}}}],["run",{"_index":2681,"title":{},"body":{"index.html":{}}}],["runs",{"_index":2702,"title":{},"body":{"index.html":{}}}],["ruta",{"_index":2209,"title":{},"body":{"guards/RolesGuard.html":{}}}],["rxjs",{"_index":916,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/MercadopagoService.html":{},"dependencies.html":{}}}],["s",{"_index":1353,"title":{},"body":{"classes/CreateAlbumDto.html":{},"classes/PriceOptionDto.html":{},"miscellaneous/enumerations.html":{}}}],["safeuser",{"_index":411,"title":{},"body":{"injectables/AdminUserService.html":{},"injectables/UserService.html":{}}}],["samesite",{"_index":894,"title":{},"body":{"controllers/AuthController.html":{}}}],["save",{"_index":691,"title":{},"body":{"injectables/AlbumService.html":{}}}],["save(album",{"_index":703,"title":{},"body":{"injectables/AlbumService.html":{}}}],["savedalbum",{"_index":728,"title":{},"body":{"injectables/AlbumService.html":{}}}],["savedalbum.id",{"_index":732,"title":{},"body":{"injectables/AlbumService.html":{}}}],["savedorder",{"_index":1173,"title":{},"body":{"injectables/BuyerOrdersService.html":{}}}],["savedphoto",{"_index":2068,"title":{},"body":{"injectables/PhotoService.html":{}}}],["savedphoto.id",{"_index":2077,"title":{},"body":{"injectables/PhotoService.html":{}}}],["savedphoto.publicid",{"_index":2079,"title":{},"body":{"injectables/PhotoService.html":{}}}],["savedphoto.sizemb",{"_index":2080,"title":{},"body":{"injectables/PhotoService.html":{}}}],["savedphoto.url",{"_index":2078,"title":{},"body":{"injectables/PhotoService.html":{}}}],["savedphoto.urlthumbnail",{"_index":2082,"title":{},"body":{"injectables/PhotoService.html":{}}}],["savedphoto.urlweb",{"_index":2081,"title":{},"body":{"injectables/PhotoService.html":{}}}],["savedphotos",{"_index":2109,"title":{},"body":{"injectables/PhotoService.html":{}}}],["savedphotos.length",{"_index":2119,"title":{},"body":{"injectables/PhotoService.html":{}}}],["savedphotos.map((p",{"_index":2120,"title":{},"body":{"injectables/PhotoService.html":{}}}],["saveduser",{"_index":2578,"title":{},"body":{"injectables/UserService.html":{}}}],["scalable",{"_index":2669,"title":{},"body":{"index.html":{}}}],["scale",{"_index":1763,"title":{},"body":{"entities/Order.html":{},"entities/OrderItem.html":{},"entities/SubscriptionOrder.html":{}}}],["se",{"_index":926,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/BuyerOrdersService.html":{},"controllers/FilesController.html":{},"entities/Photo.html":{},"injectables/PhotoService.html":{},"injectables/PhotographerOrdersService.html":{}}}],["sea",{"_index":1091,"title":{},"body":{"controllers/BuyerOrdersController.html":{},"controllers/FilesController.html":{}}}],["secret",{"_index":835,"title":{},"body":{"modules/AppModule.html":{},"guards/AuthGuard.html":{},"injectables/MercadopagoService.html":{}}}],["secure",{"_index":893,"title":{},"body":{"controllers/AuthController.html":{}}}],["seed",{"_index":2210,"title":{"classes/Seed.html":{}},"body":{"classes/Seed.html":{},"controllers/SeedController.html":{},"injectables/SeedService.html":{},"coverage.html":{}}}],["seed.controller",{"_index":2229,"title":{},"body":{"modules/SeedModule.html":{}}}],["seed.dto",{"_index":2489,"title":{},"body":{"classes/UpdateSeedDto.html":{}}}],["seed.dto.ts",{"_index":1397,"title":{},"body":{"classes/CreateSeedDto.html":{},"classes/UpdateSeedDto.html":{},"coverage.html":{}}}],["seed.service",{"_index":2221,"title":{},"body":{"controllers/SeedController.html":{},"modules/SeedModule.html":{}}}],["seed/seed.module",{"_index":809,"title":{},"body":{"modules/AppModule.html":{}}}],["seedcontroller",{"_index":2212,"title":{"controllers/SeedController.html":{}},"body":{"controllers/SeedController.html":{},"modules/SeedModule.html":{},"coverage.html":{}}}],["seedmodule",{"_index":790,"title":{"modules/SeedModule.html":{}},"body":{"modules/AppModule.html":{},"modules/SeedModule.html":{},"modules.html":{},"overview.html":{}}}],["seedplans",{"_index":2214,"title":{},"body":{"controllers/SeedController.html":{}}}],["seedservice",{"_index":2220,"title":{"injectables/SeedService.html":{}},"body":{"controllers/SeedController.html":{},"modules/SeedModule.html":{},"injectables/SeedService.html":{},"coverage.html":{},"overview.html":{}}}],["seedsubscriptionplans",{"_index":2234,"title":{},"body":{"injectables/SeedService.html":{}}}],["seedusers",{"_index":2215,"title":{},"body":{"controllers/SeedController.html":{},"injectables/SeedService.html":{}}}],["segundos",{"_index":819,"title":{},"body":{"modules/AppModule.html":{}}}],["segura",{"_index":2075,"title":{},"body":{"injectables/PhotoService.html":{}}}],["según",{"_index":313,"title":{},"body":{"injectables/AdminOrderService.html":{},"controllers/PhotoController.html":{}}}],["select('coalesce(sum(order.total",{"_index":316,"title":{},"body":{"injectables/AdminOrderService.html":{}}}],["select('count(distinct",{"_index":160,"title":{},"body":{"injectables/AdminAlbumService.html":{}}}],["select(['user.id",{"_index":433,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["sendmail",{"_index":1568,"title":{},"body":{"injectables/MailService.html":{}}}],["sendmail(to",{"_index":1575,"title":{},"body":{"injectables/MailService.html":{}}}],["sendnewordernotification",{"_index":1569,"title":{},"body":{"injectables/MailService.html":{}}}],["sendnewordernotification(photographeremail",{"_index":1579,"title":{},"body":{"injectables/MailService.html":{}}}],["sendorderpaymentemail",{"_index":1570,"title":{},"body":{"injectables/MailService.html":{}}}],["sendorderpaymentemail(to",{"_index":1583,"title":{},"body":{"injectables/MailService.html":{}}}],["sendpasswordresetemail",{"_index":1571,"title":{},"body":{"injectables/MailService.html":{}}}],["sendpasswordresetemail(to",{"_index":1585,"title":{},"body":{"injectables/MailService.html":{}}}],["sendprowelcomeemail",{"_index":1572,"title":{},"body":{"injectables/MailService.html":{}}}],["sendprowelcomeemail(to",{"_index":1588,"title":{},"body":{"injectables/MailService.html":{}}}],["sendwelcomeemail",{"_index":1573,"title":{},"body":{"injectables/MailService.html":{}}}],["sendwelcomeemail(to",{"_index":1590,"title":{},"body":{"injectables/MailService.html":{}}}],["ser",{"_index":878,"title":{},"body":{"controllers/AuthController.html":{}}}],["server",{"_index":2670,"title":{},"body":{"index.html":{}}}],["service",{"_index":2162,"title":{},"body":{"controllers/PhotographerOrdersController.html":{}}}],["setactivestatus",{"_index":382,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["setactivestatus(userid",{"_index":394,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["seteamos",{"_index":888,"title":{},"body":{"controllers/AuthController.html":{}}}],["setmetadata(roles_key",{"_index":2809,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setup",{"_index":2677,"title":{},"body":{"index.html":{}}}],["si",{"_index":124,"title":{},"body":{"injectables/AdminAlbumService.html":{},"injectables/AlbumAccessService.html":{},"injectables/BuyerOrdersService.html":{},"controllers/MercadopagoController.html":{},"entities/Order.html":{},"injectables/PaymentService.html":{},"injectables/PhotographerOrdersService.html":{},"injectables/SubscriptionService.html":{},"miscellaneous/variables.html":{}}}],["side",{"_index":2671,"title":{},"body":{"index.html":{}}}],["signature",{"_index":1626,"title":{},"body":{"controllers/MercadopagoController.html":{},"injectables/MercadopagoService.html":{}}}],["signature.split(',').find((p",{"_index":1717,"title":{},"body":{"injectables/MercadopagoService.html":{}}}],["signoptions",{"_index":830,"title":{},"body":{"modules/AppModule.html":{}}}],["simple",{"_index":2722,"title":{},"body":{"index.html":{}}}],["sin",{"_index":1703,"title":{},"body":{"injectables/MercadopagoService.html":{},"entities/OrderItem.html":{},"injectables/SubscriptionService.html":{}}}],["sirve",{"_index":1983,"title":{},"body":{"entities/Photo.html":{}}}],["size",{"_index":44,"title":{},"body":{"classes/AdminAlbumByIdDto.html":{},"classes/AdminAlbumDto.html":{},"classes/AdminUserDto.html":{},"entities/Album.html":{},"classes/AlbumSummaryDto.html":{},"injectables/BuyerOrdersService.html":{},"classes/CreateAlbumDto.html":{},"classes/CreateOrderDto.html":{},"entities/OrderItem.html":{},"classes/OrderItemDto.html":{},"classes/OrderItemResponseDto.html":{},"classes/OrderResponseDto.html":{},"classes/PriceOptionDto.html":{}}}],["sizemb",{"_index":1512,"title":{},"body":{"injectables/FilesService.html":{},"entities/Photo.html":{},"injectables/PhotoService.html":{}}}],["skip",{"_index":286,"title":{},"body":{"injectables/AdminOrderService.html":{},"injectables/AlbumService.html":{}}}],["small",{"_index":1352,"title":{},"body":{"classes/CreateAlbumDto.html":{},"classes/PriceOptionDto.html":{},"miscellaneous/enumerations.html":{}}}],["snapshot",{"_index":1802,"title":{},"body":{"entities/OrderItem.html":{}}}],["soft",{"_index":760,"title":{},"body":{"injectables/AlbumService.html":{}}}],["solicitar",{"_index":1011,"title":{},"body":{"injectables/AuthService.html":{}}}],["solo",{"_index":1188,"title":{},"body":{"injectables/BuyerOrdersService.html":{},"controllers/FilesController.html":{},"controllers/MercadopagoController.html":{},"injectables/PhotoService.html":{},"injectables/PhotographerOrdersService.html":{},"injectables/SubscriptionService.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/Admin.html":{},"classes/AdminAlbumByIdDto.html":{},"controllers/AdminAlbumController.html":{},"classes/AdminAlbumDto.html":{},"injectables/AdminAlbumService.html":{},"interfaces/AdminAlbumSummaryDto.html":{},"modules/AdminModule.html":{},"controllers/AdminOrderController.html":{},"injectables/AdminOrderService.html":{},"interfaces/AdminPhotographerByIdDto.html":{},"controllers/AdminUserController.html":{},"classes/AdminUserDto.html":{},"injectables/AdminUserService.html":{},"entities/Album.html":{},"controllers/AlbumAccessController.html":{},"injectables/AlbumAccessService.html":{},"controllers/AlbumController.html":{},"modules/AlbumModule.html":{},"injectables/AlbumService.html":{},"classes/AlbumSummaryDto.html":{},"modules/AppModule.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseUserDto.html":{},"controllers/BuyerOrdersController.html":{},"injectables/BuyerOrdersService.html":{},"modules/CommonModule.html":{},"classes/CreateAdminDto.html":{},"classes/CreateAlbumDto.html":{},"classes/CreateLeadDto.html":{},"classes/CreateMercadopagoDto.html":{},"classes/CreateOrderDto.html":{},"classes/CreatePaymentAccountDto.html":{},"classes/CreatePhotoDto.html":{},"classes/CreateSeedDto.html":{},"classes/CreateSubscriptionDto.html":{},"classes/CreateSubscriptionOrderDto.html":{},"classes/CreateUserDto.html":{},"controllers/FilesController.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"entities/Lead.html":{},"controllers/LeadController.html":{},"modules/LeadModule.html":{},"injectables/LeadService.html":{},"classes/LoginDto.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"classes/Mercadopago.html":{},"controllers/MercadopagoController.html":{},"modules/MercadopagoModule.html":{},"injectables/MercadopagoService.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"classes/OrderItemDto.html":{},"classes/OrderItemResponseDto.html":{},"classes/OrderResponseDto.html":{},"modules/OrdersModule.html":{},"classes/PaginationDto.html":{},"injectables/PasswordResetService.html":{},"entities/PasswordResetToken.html":{},"entities/PaymentAccount.html":{},"controllers/PaymentController.html":{},"modules/PaymentModule.html":{},"injectables/PaymentService.html":{},"entities/Photo.html":{},"controllers/PhotoController.html":{},"modules/PhotoModule.html":{},"injectables/PhotoService.html":{},"controllers/PhotographerOrdersController.html":{},"injectables/PhotographerOrdersService.html":{},"classes/PriceOptionDto.html":{},"guards/RolesGuard.html":{},"classes/Seed.html":{},"controllers/SeedController.html":{},"modules/SeedModule.html":{},"injectables/SeedService.html":{},"entities/Subscription.html":{},"controllers/SubscriptionController.html":{},"modules/SubscriptionModule.html":{},"entities/SubscriptionOrder.html":{},"entities/SubscriptionPlan.html":{},"injectables/SubscriptionService.html":{},"classes/UpdateAdminDto.html":{},"classes/UpdateAlbumDto.html":{},"classes/UpdateDeliveryStatusDto.html":{},"classes/UpdateLeadDto.html":{},"classes/UpdateMercadopagoDto.html":{},"classes/UpdateOrderDto.html":{},"classes/UpdatePaymentDto.html":{},"classes/UpdatePhotoDto.html":{},"classes/UpdateSeedDto.html":{},"classes/UpdateSubscriptionDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"index.html":{}}}],["split",{"_index":928,"title":{},"body":{"guards/AuthGuard.html":{}}}],["sponsor_id",{"_index":1243,"title":{},"body":{"injectables/BuyerOrdersService.html":{}}}],["sponsors",{"_index":2774,"title":{},"body":{"index.html":{}}}],["src/.../base",{"_index":2649,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../create",{"_index":2648,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../main.ts",{"_index":2653,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../order.entity.ts",{"_index":2804,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../roles.decorator.ts",{"_index":2807,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../roles.enum.ts",{"_index":2650,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../subscription",{"_index":2805,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../user.helpers.ts",{"_index":2808,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/admin/admin.controller.ts",{"_index":326,"title":{},"body":{"controllers/AdminUserController.html":{},"coverage.html":{}}}],["src/admin/admin.controller.ts:22",{"_index":346,"title":{},"body":{"controllers/AdminUserController.html":{}}}],["src/admin/admin.controller.ts:28",{"_index":344,"title":{},"body":{"controllers/AdminUserController.html":{}}}],["src/admin/admin.controller.ts:38",{"_index":351,"title":{},"body":{"controllers/AdminUserController.html":{}}}],["src/admin/admin.controller.ts:44",{"_index":349,"title":{},"body":{"controllers/AdminUserController.html":{}}}],["src/admin/admin.controller.ts:50",{"_index":342,"title":{},"body":{"controllers/AdminUserController.html":{}}}],["src/admin/admin.controller.ts:56",{"_index":336,"title":{},"body":{"controllers/AdminUserController.html":{}}}],["src/admin/admin.controller.ts:62",{"_index":339,"title":{},"body":{"controllers/AdminUserController.html":{}}}],["src/admin/admin.module.ts",{"_index":199,"title":{},"body":{"modules/AdminModule.html":{}}}],["src/admin/admin.service.ts",{"_index":379,"title":{},"body":{"injectables/AdminUserService.html":{},"coverage.html":{}}}],["src/admin/admin.service.ts:108",{"_index":392,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["src/admin/admin.service.ts:11",{"_index":384,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["src/admin/admin.service.ts:162",{"_index":389,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["src/admin/admin.service.ts:20",{"_index":386,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["src/admin/admin.service.ts:60",{"_index":396,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["src/admin/admin.service.ts:68",{"_index":393,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["src/admin/admin.service.ts:78",{"_index":391,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["src/admin/adminalbum.controller.ts",{"_index":52,"title":{},"body":{"controllers/AdminAlbumController.html":{},"coverage.html":{}}}],["src/admin/adminalbum.controller.ts:10",{"_index":60,"title":{},"body":{"controllers/AdminAlbumController.html":{}}}],["src/admin/adminalbum.service.ts",{"_index":97,"title":{},"body":{"injectables/AdminAlbumService.html":{},"coverage.html":{}}}],["src/admin/adminalbum.service.ts:17",{"_index":106,"title":{},"body":{"injectables/AdminAlbumService.html":{}}}],["src/admin/adminalbum.service.ts:9",{"_index":103,"title":{},"body":{"injectables/AdminAlbumService.html":{}}}],["src/admin/adminorder.controller.ts",{"_index":215,"title":{},"body":{"controllers/AdminOrderController.html":{},"coverage.html":{}}}],["src/admin/adminorder.controller.ts:15",{"_index":226,"title":{},"body":{"controllers/AdminOrderController.html":{}}}],["src/admin/adminorder.controller.ts:33",{"_index":232,"title":{},"body":{"controllers/AdminOrderController.html":{}}}],["src/admin/adminorder.controller.ts:39",{"_index":234,"title":{},"body":{"controllers/AdminOrderController.html":{}}}],["src/admin/adminorder.service.ts",{"_index":260,"title":{},"body":{"injectables/AdminOrderService.html":{},"coverage.html":{}}}],["src/admin/adminorder.service.ts:15",{"_index":266,"title":{},"body":{"injectables/AdminOrderService.html":{}}}],["src/admin/adminorder.service.ts:45",{"_index":268,"title":{},"body":{"injectables/AdminOrderService.html":{}}}],["src/admin/adminorder.service.ts:62",{"_index":269,"title":{},"body":{"injectables/AdminOrderService.html":{}}}],["src/admin/adminorder.service.ts:8",{"_index":264,"title":{},"body":{"injectables/AdminOrderService.html":{}}}],["src/admin/dto/admin",{"_index":12,"title":{},"body":{"classes/AdminAlbumByIdDto.html":{},"classes/AdminAlbumDto.html":{},"interfaces/AdminAlbumSummaryDto.html":{},"interfaces/AdminPhotographerByIdDto.html":{},"classes/AdminUserDto.html":{},"coverage.html":{}}}],["src/admin/dto/create",{"_index":1321,"title":{},"body":{"classes/CreateAdminDto.html":{},"coverage.html":{}}}],["src/admin/dto/update",{"_index":2457,"title":{},"body":{"classes/UpdateAdminDto.html":{},"coverage.html":{}}}],["src/admin/entities/admin.entity.ts",{"_index":6,"title":{},"body":{"classes/Admin.html":{},"coverage.html":{}}}],["src/album/album",{"_index":551,"title":{},"body":{"controllers/AlbumAccessController.html":{},"injectables/AlbumAccessService.html":{},"coverage.html":{}}}],["src/album/album.controller.ts",{"_index":629,"title":{},"body":{"controllers/AlbumController.html":{},"coverage.html":{}}}],["src/album/album.controller.ts:25",{"_index":637,"title":{},"body":{"controllers/AlbumController.html":{}}}],["src/album/album.controller.ts:32",{"_index":644,"title":{},"body":{"controllers/AlbumController.html":{}}}],["src/album/album.controller.ts:39",{"_index":647,"title":{},"body":{"controllers/AlbumController.html":{}}}],["src/album/album.controller.ts:48",{"_index":652,"title":{},"body":{"controllers/AlbumController.html":{}}}],["src/album/album.controller.ts:59",{"_index":640,"title":{},"body":{"controllers/AlbumController.html":{}}}],["src/album/album.module",{"_index":212,"title":{},"body":{"modules/AdminModule.html":{},"modules/PhotoModule.html":{}}}],["src/album/album.module.ts",{"_index":681,"title":{},"body":{"modules/AlbumModule.html":{}}}],["src/album/album.service",{"_index":2059,"title":{},"body":{"injectables/PhotoService.html":{}}}],["src/album/album.service.ts",{"_index":688,"title":{},"body":{"injectables/AlbumService.html":{},"coverage.html":{}}}],["src/album/album.service.ts:111",{"_index":698,"title":{},"body":{"injectables/AlbumService.html":{}}}],["src/album/album.service.ts:125",{"_index":705,"title":{},"body":{"injectables/AlbumService.html":{}}}],["src/album/album.service.ts:164",{"_index":702,"title":{},"body":{"injectables/AlbumService.html":{}}}],["src/album/album.service.ts:21",{"_index":693,"title":{},"body":{"injectables/AlbumService.html":{}}}],["src/album/album.service.ts:32",{"_index":704,"title":{},"body":{"injectables/AlbumService.html":{}}}],["src/album/album.service.ts:37",{"_index":700,"title":{},"body":{"injectables/AlbumService.html":{}}}],["src/album/album.service.ts:41",{"_index":695,"title":{},"body":{"injectables/AlbumService.html":{}}}],["src/album/album.service.ts:84",{"_index":697,"title":{},"body":{"injectables/AlbumService.html":{}}}],["src/album/dto/create",{"_index":1323,"title":{},"body":{"classes/CreateAlbumDto.html":{},"classes/PriceOptionDto.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/album/dto/update",{"_index":2464,"title":{},"body":{"classes/UpdateAlbumDto.html":{},"coverage.html":{}}}],["src/album/entities/album.entity",{"_index":209,"title":{},"body":{"modules/AdminModule.html":{},"injectables/AdminUserService.html":{},"injectables/BuyerOrdersService.html":{},"modules/OrdersModule.html":{},"entities/Photo.html":{}}}],["src/album/entities/album.entity.ts",{"_index":479,"title":{},"body":{"entities/Album.html":{},"coverage.html":{}}}],["src/album/entities/album.entity.ts:22",{"_index":501,"title":{},"body":{"entities/Album.html":{}}}],["src/album/entities/album.entity.ts:25",{"_index":524,"title":{},"body":{"entities/Album.html":{}}}],["src/album/entities/album.entity.ts:28",{"_index":527,"title":{},"body":{"entities/Album.html":{}}}],["src/album/entities/album.entity.ts:31",{"_index":508,"title":{},"body":{"entities/Album.html":{}}}],["src/album/entities/album.entity.ts:34",{"_index":521,"title":{},"body":{"entities/Album.html":{}}}],["src/album/entities/album.entity.ts:37",{"_index":519,"title":{},"body":{"entities/Album.html":{}}}],["src/album/entities/album.entity.ts:40",{"_index":522,"title":{},"body":{"entities/Album.html":{}}}],["src/album/entities/album.entity.ts:43",{"_index":499,"title":{},"body":{"entities/Album.html":{}}}],["src/album/entities/album.entity.ts:46",{"_index":489,"title":{},"body":{"entities/Album.html":{}}}],["src/album/entities/album.entity.ts:49",{"_index":490,"title":{},"body":{"entities/Album.html":{}}}],["src/album/entities/album.entity.ts:52",{"_index":498,"title":{},"body":{"entities/Album.html":{}}}],["src/album/entities/album.entity.ts:55",{"_index":503,"title":{},"body":{"entities/Album.html":{}}}],["src/album/entities/album.entity.ts:58",{"_index":496,"title":{},"body":{"entities/Album.html":{}}}],["src/album/entities/album.entity.ts:61",{"_index":512,"title":{},"body":{"entities/Album.html":{}}}],["src/album/entities/album.entity.ts:64",{"_index":517,"title":{},"body":{"entities/Album.html":{}}}],["src/album/entities/album.entity.ts:68",{"_index":511,"title":{},"body":{"entities/Album.html":{}}}],["src/album/entities/album.entity.ts:73",{"_index":487,"title":{},"body":{"entities/Album.html":{}}}],["src/album/entities/album.entity.ts:76",{"_index":515,"title":{},"body":{"entities/Album.html":{}}}],["src/album/entities/album.entity.ts:79",{"_index":507,"title":{},"body":{"entities/Album.html":{}}}],["src/album/entities/album.entity.ts:82",{"_index":492,"title":{},"body":{"entities/Album.html":{}}}],["src/album/entities/album.entity.ts:85",{"_index":526,"title":{},"body":{"entities/Album.html":{}}}],["src/app.module.ts",{"_index":792,"title":{},"body":{"modules/AppModule.html":{}}}],["src/auth/auth.controller.ts",{"_index":840,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:27",{"_index":854,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:37",{"_index":850,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:48",{"_index":857,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:54",{"_index":861,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module.ts",{"_index":948,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":957,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:130",{"_index":970,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:148",{"_index":964,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:16",{"_index":962,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:27",{"_index":968,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:64",{"_index":967,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:96",{"_index":969,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/dto/create",{"_index":1405,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/auth/dto/login.dto.ts",{"_index":1555,"title":{},"body":{"classes/LoginDto.html":{},"coverage.html":{}}}],["src/auth/dto/login.dto.ts:11",{"_index":1556,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/auth/dto/login.dto.ts:16",{"_index":1559,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/auth/dto/login.dto.ts:20",{"_index":1558,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/auth/dto/login.dto.ts:24",{"_index":1557,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/auth/entities/auth.entity.ts",{"_index":838,"title":{},"body":{"classes/Auth.html":{},"coverage.html":{}}}],["src/auth/entities/password",{"_index":1878,"title":{},"body":{"entities/PasswordResetToken.html":{},"entities/User.html":{},"coverage.html":{}}}],["src/auth/password",{"_index":1843,"title":{},"body":{"injectables/PasswordResetService.html":{},"coverage.html":{}}}],["src/common/common.module.ts",{"_index":1319,"title":{},"body":{"modules/CommonModule.html":{}}}],["src/common/decorators/roles.decorator",{"_index":2201,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/common/decorators/roles.decorator.ts",{"_index":2604,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/dtos/pagination.dto.ts",{"_index":1835,"title":{},"body":{"classes/PaginationDto.html":{},"coverage.html":{}}}],["src/common/dtos/pagination.dto.ts:13",{"_index":1839,"title":{},"body":{"classes/PaginationDto.html":{}}}],["src/common/dtos/pagination.dto.ts:8",{"_index":1837,"title":{},"body":{"classes/PaginationDto.html":{}}}],["src/common/enums/roles.enum.ts",{"_index":2651,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/common/guards/auth.guard",{"_index":565,"title":{},"body":{"controllers/AlbumAccessController.html":{},"controllers/AuthController.html":{},"controllers/BuyerOrdersController.html":{},"controllers/PaymentController.html":{},"controllers/PhotoController.html":{},"controllers/PhotographerOrdersController.html":{},"controllers/SubscriptionController.html":{}}}],["src/common/guards/auth.guard.ts",{"_index":906,"title":{},"body":{"guards/AuthGuard.html":{},"coverage.html":{}}}],["src/common/guards/auth.guard.ts:11",{"_index":910,"title":{},"body":{"guards/AuthGuard.html":{}}}],["src/common/guards/auth.guard.ts:14",{"_index":913,"title":{},"body":{"guards/AuthGuard.html":{}}}],["src/common/guards/roles.guard",{"_index":353,"title":{},"body":{"controllers/AdminUserController.html":{}}}],["src/common/guards/roles.guard.ts",{"_index":2194,"title":{},"body":{"guards/RolesGuard.html":{},"coverage.html":{}}}],["src/common/guards/roles.guard.ts:12",{"_index":2197,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/common/guards/roles.guard.ts:15",{"_index":2198,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/files/files.controller.ts",{"_index":1415,"title":{},"body":{"controllers/FilesController.html":{},"coverage.html":{}}}],["src/files/files.controller.ts:21",{"_index":1421,"title":{},"body":{"controllers/FilesController.html":{}}}],["src/files/files.module",{"_index":2040,"title":{},"body":{"modules/PhotoModule.html":{}}}],["src/files/files.module.ts",{"_index":1446,"title":{},"body":{"modules/FilesModule.html":{}}}],["src/files/files.service",{"_index":2060,"title":{},"body":{"injectables/PhotoService.html":{}}}],["src/files/files.service.ts",{"_index":1448,"title":{},"body":{"injectables/FilesService.html":{},"coverage.html":{}}}],["src/files/files.service.ts:12",{"_index":1451,"title":{},"body":{"injectables/FilesService.html":{}}}],["src/files/files.service.ts:21",{"_index":1456,"title":{},"body":{"injectables/FilesService.html":{}}}],["src/files/files.service.ts:89",{"_index":1453,"title":{},"body":{"injectables/FilesService.html":{}}}],["src/lead/dto/create",{"_index":1361,"title":{},"body":{"classes/CreateLeadDto.html":{},"coverage.html":{}}}],["src/lead/dto/update",{"_index":2469,"title":{},"body":{"classes/UpdateLeadDto.html":{},"coverage.html":{}}}],["src/lead/entities/lead.entity.ts",{"_index":1519,"title":{},"body":{"entities/Lead.html":{},"coverage.html":{}}}],["src/lead/entities/lead.entity.ts:11",{"_index":1522,"title":{},"body":{"entities/Lead.html":{}}}],["src/lead/entities/lead.entity.ts:14",{"_index":1521,"title":{},"body":{"entities/Lead.html":{}}}],["src/lead/entities/lead.entity.ts:17",{"_index":1520,"title":{},"body":{"entities/Lead.html":{}}}],["src/lead/lead.controller.ts",{"_index":1524,"title":{},"body":{"controllers/LeadController.html":{},"coverage.html":{}}}],["src/lead/lead.controller.ts:11",{"_index":1526,"title":{},"body":{"controllers/LeadController.html":{}}}],["src/lead/lead.controller.ts:16",{"_index":1527,"title":{},"body":{"controllers/LeadController.html":{}}}],["src/lead/lead.module.ts",{"_index":1536,"title":{},"body":{"modules/LeadModule.html":{}}}],["src/lead/lead.service.ts",{"_index":1540,"title":{},"body":{"injectables/LeadService.html":{},"coverage.html":{}}}],["src/lead/lead.service.ts:15",{"_index":1544,"title":{},"body":{"injectables/LeadService.html":{}}}],["src/lead/lead.service.ts:25",{"_index":1545,"title":{},"body":{"injectables/LeadService.html":{}}}],["src/lead/lead.service.ts:9",{"_index":1542,"title":{},"body":{"injectables/LeadService.html":{}}}],["src/mail/mail.module",{"_index":1833,"title":{},"body":{"modules/OrdersModule.html":{},"modules/SubscriptionModule.html":{}}}],["src/mail/mail.module.ts",{"_index":1563,"title":{},"body":{"modules/MailModule.html":{}}}],["src/mail/mail.service",{"_index":1136,"title":{},"body":{"injectables/BuyerOrdersService.html":{},"injectables/PasswordResetService.html":{},"injectables/SubscriptionService.html":{}}}],["src/mail/mail.service.ts",{"_index":1565,"title":{},"body":{"injectables/MailService.html":{},"coverage.html":{}}}],["src/mail/mail.service.ts:15",{"_index":1593,"title":{},"body":{"injectables/MailService.html":{}}}],["src/mail/mail.service.ts:16",{"_index":1574,"title":{},"body":{"injectables/MailService.html":{}}}],["src/mail/mail.service.ts:22",{"_index":1578,"title":{},"body":{"injectables/MailService.html":{}}}],["src/mail/mail.service.ts:42",{"_index":1591,"title":{},"body":{"injectables/MailService.html":{}}}],["src/mail/mail.service.ts:56",{"_index":1587,"title":{},"body":{"injectables/MailService.html":{}}}],["src/mail/mail.service.ts:61",{"_index":1589,"title":{},"body":{"injectables/MailService.html":{}}}],["src/mail/mail.service.ts:66",{"_index":1584,"title":{},"body":{"injectables/MailService.html":{}}}],["src/mail/mail.service.ts:84",{"_index":1581,"title":{},"body":{"injectables/MailService.html":{}}}],["src/main.ts",{"_index":2607,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/mercadopago/dto/create",{"_index":1365,"title":{},"body":{"classes/CreateMercadopagoDto.html":{},"coverage.html":{}}}],["src/mercadopago/dto/update",{"_index":2472,"title":{},"body":{"classes/UpdateMercadopagoDto.html":{},"coverage.html":{}}}],["src/mercadopago/entities/mercadopago.entity.ts",{"_index":1621,"title":{},"body":{"classes/Mercadopago.html":{},"coverage.html":{}}}],["src/mercadopago/mercadopago.controller.ts",{"_index":1623,"title":{},"body":{"controllers/MercadopagoController.html":{},"coverage.html":{}}}],["src/mercadopago/mercadopago.controller.ts:10",{"_index":1629,"title":{},"body":{"controllers/MercadopagoController.html":{}}}],["src/mercadopago/mercadopago.module.ts",{"_index":1663,"title":{},"body":{"modules/MercadopagoModule.html":{}}}],["src/mercadopago/mercadopago.service.ts",{"_index":1669,"title":{},"body":{"injectables/MercadopagoService.html":{},"coverage.html":{}}}],["src/mercadopago/mercadopago.service.ts:110",{"_index":1677,"title":{},"body":{"injectables/MercadopagoService.html":{}}}],["src/mercadopago/mercadopago.service.ts:16",{"_index":1675,"title":{},"body":{"injectables/MercadopagoService.html":{}}}],["src/mercadopago/mercadopago.service.ts:29",{"_index":1681,"title":{},"body":{"injectables/MercadopagoService.html":{}}}],["src/mercadopago/mercadopago.service.ts:76",{"_index":1679,"title":{},"body":{"injectables/MercadopagoService.html":{}}}],["src/order/buyer",{"_index":1040,"title":{},"body":{"controllers/BuyerOrdersController.html":{},"injectables/BuyerOrdersService.html":{},"injectables/MercadopagoService.html":{},"coverage.html":{}}}],["src/order/dto/create",{"_index":1367,"title":{},"body":{"classes/CreateOrderDto.html":{},"classes/OrderItemDto.html":{},"coverage.html":{}}}],["src/order/dto/order",{"_index":766,"title":{},"body":{"classes/AlbumSummaryDto.html":{},"classes/OrderItemResponseDto.html":{},"classes/OrderResponseDto.html":{},"coverage.html":{}}}],["src/order/dto/up",{"_index":2466,"title":{},"body":{"classes/UpdateDeliveryStatusDto.html":{},"coverage.html":{}}}],["src/order/dto/update",{"_index":2476,"title":{},"body":{"classes/UpdateOrderDto.html":{},"coverage.html":{}}}],["src/order/entities/order",{"_index":1782,"title":{},"body":{"entities/OrderItem.html":{},"coverage.html":{}}}],["src/order/entities/order.entity",{"_index":206,"title":{},"body":{"modules/AdminModule.html":{}}}],["src/order/entities/order.entity.ts",{"_index":1748,"title":{},"body":{"entities/Order.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/order/entities/order.entity.ts:34",{"_index":1756,"title":{},"body":{"entities/Order.html":{}}}],["src/order/entities/order.entity.ts:37",{"_index":1764,"title":{},"body":{"entities/Order.html":{}}}],["src/order/entities/order.entity.ts:54",{"_index":1760,"title":{},"body":{"entities/Order.html":{}}}],["src/order/entities/order.entity.ts:62",{"_index":1755,"title":{},"body":{"entities/Order.html":{}}}],["src/order/entities/order.entity.ts:65",{"_index":1754,"title":{},"body":{"entities/Order.html":{}}}],["src/order/entities/order.entity.ts:68",{"_index":1765,"title":{},"body":{"entities/Order.html":{}}}],["src/order/entities/order.entity.ts:72",{"_index":1753,"title":{},"body":{"entities/Order.html":{}}}],["src/order/entities/order.entity.ts:75",{"_index":1751,"title":{},"body":{"entities/Order.html":{}}}],["src/order/entities/order.entity.ts:81",{"_index":1759,"title":{},"body":{"entities/Order.html":{}}}],["src/order/order.module",{"_index":1667,"title":{},"body":{"modules/MercadopagoModule.html":{}}}],["src/order/order.module.ts",{"_index":1829,"title":{},"body":{"modules/OrdersModule.html":{}}}],["src/order/photographer",{"_index":2147,"title":{},"body":{"controllers/PhotographerOrdersController.html":{},"injectables/PhotographerOrdersService.html":{},"coverage.html":{}}}],["src/payment/dto/create",{"_index":1378,"title":{},"body":{"classes/CreatePaymentAccountDto.html":{},"coverage.html":{}}}],["src/payment/dto/update",{"_index":2479,"title":{},"body":{"classes/UpdatePaymentDto.html":{},"coverage.html":{}}}],["src/payment/entities/payment.entity",{"_index":2526,"title":{},"body":{"entities/User.html":{}}}],["src/payment/entities/payment.entity.ts",{"_index":1889,"title":{},"body":{"entities/PaymentAccount.html":{},"coverage.html":{}}}],["src/payment/entities/payment.entity.ts:14",{"_index":1893,"title":{},"body":{"entities/PaymentAccount.html":{}}}],["src/payment/entities/payment.entity.ts:21",{"_index":1895,"title":{},"body":{"entities/PaymentAccount.html":{}}}],["src/payment/entities/payment.entity.ts:24",{"_index":1897,"title":{},"body":{"entities/PaymentAccount.html":{}}}],["src/payment/entities/payment.entity.ts:27",{"_index":1891,"title":{},"body":{"entities/PaymentAccount.html":{}}}],["src/payment/entities/payment.entity.ts:30",{"_index":1898,"title":{},"body":{"entities/PaymentAccount.html":{}}}],["src/payment/entities/payment.entity.ts:33",{"_index":1899,"title":{},"body":{"entities/PaymentAccount.html":{}}}],["src/payment/entities/payment.entity.ts:36",{"_index":1892,"title":{},"body":{"entities/PaymentAccount.html":{}}}],["src/payment/entities/payment.entity.ts:39",{"_index":1900,"title":{},"body":{"entities/PaymentAccount.html":{}}}],["src/payment/entities/payment.entity.ts:45",{"_index":1902,"title":{},"body":{"entities/PaymentAccount.html":{}}}],["src/payment/payment.controller.ts",{"_index":1905,"title":{},"body":{"controllers/PaymentController.html":{},"coverage.html":{}}}],["src/payment/payment.controller.ts:12",{"_index":1909,"title":{},"body":{"controllers/PaymentController.html":{}}}],["src/payment/payment.module",{"_index":1832,"title":{},"body":{"modules/OrdersModule.html":{}}}],["src/payment/payment.module.ts",{"_index":1920,"title":{},"body":{"modules/PaymentModule.html":{}}}],["src/payment/payment.service",{"_index":1134,"title":{},"body":{"injectables/BuyerOrdersService.html":{}}}],["src/payment/payment.service.ts",{"_index":1924,"title":{},"body":{"injectables/PaymentService.html":{},"coverage.html":{}}}],["src/payment/payment.service.ts:106",{"_index":1936,"title":{},"body":{"injectables/PaymentService.html":{}}}],["src/payment/payment.service.ts:15",{"_index":1929,"title":{},"body":{"injectables/PaymentService.html":{}}}],["src/payment/payment.service.ts:27",{"_index":1938,"title":{},"body":{"injectables/PaymentService.html":{}}}],["src/payment/payment.service.ts:68",{"_index":1943,"title":{},"body":{"injectables/PaymentService.html":{}}}],["src/payment/payment.service.ts:91",{"_index":1932,"title":{},"body":{"injectables/PaymentService.html":{}}}],["src/photo/dto/create",{"_index":1391,"title":{},"body":{"classes/CreatePhotoDto.html":{},"coverage.html":{}}}],["src/photo/dto/update",{"_index":2483,"title":{},"body":{"classes/UpdatePhotoDto.html":{},"coverage.html":{}}}],["src/photo/entities/photo.entity",{"_index":533,"title":{},"body":{"entities/Album.html":{},"injectables/BuyerOrdersService.html":{},"modules/OrdersModule.html":{}}}],["src/photo/entities/photo.entity.ts",{"_index":1975,"title":{},"body":{"entities/Photo.html":{},"coverage.html":{}}}],["src/photo/entities/photo.entity.ts:10",{"_index":1980,"title":{},"body":{"entities/Photo.html":{}}}],["src/photo/entities/photo.entity.ts:13",{"_index":1979,"title":{},"body":{"entities/Photo.html":{}}}],["src/photo/entities/photo.entity.ts:16",{"_index":1978,"title":{},"body":{"entities/Photo.html":{}}}],["src/photo/entities/photo.entity.ts:19",{"_index":1982,"title":{},"body":{"entities/Photo.html":{}}}],["src/photo/entities/photo.entity.ts:22",{"_index":1981,"title":{},"body":{"entities/Photo.html":{}}}],["src/photo/entities/photo.entity.ts:28",{"_index":1976,"title":{},"body":{"entities/Photo.html":{}}}],["src/photo/entities/photo.entity.ts:7",{"_index":1977,"title":{},"body":{"entities/Photo.html":{}}}],["src/photo/photo.controller.ts",{"_index":1988,"title":{},"body":{"controllers/PhotoController.html":{},"coverage.html":{}}}],["src/photo/photo.controller.ts:26",{"_index":2007,"title":{},"body":{"controllers/PhotoController.html":{}}}],["src/photo/photo.controller.ts:41",{"_index":2004,"title":{},"body":{"controllers/PhotoController.html":{}}}],["src/photo/photo.controller.ts:61",{"_index":2000,"title":{},"body":{"controllers/PhotoController.html":{}}}],["src/photo/photo.controller.ts:68",{"_index":1998,"title":{},"body":{"controllers/PhotoController.html":{}}}],["src/photo/photo.controller.ts:75",{"_index":1996,"title":{},"body":{"controllers/PhotoController.html":{}}}],["src/photo/photo.module",{"_index":685,"title":{},"body":{"modules/AlbumModule.html":{}}}],["src/photo/photo.module.ts",{"_index":2039,"title":{},"body":{"modules/PhotoModule.html":{}}}],["src/photo/photo.service",{"_index":707,"title":{},"body":{"injectables/AlbumService.html":{}}}],["src/photo/photo.service.ts",{"_index":2044,"title":{},"body":{"injectables/PhotoService.html":{},"coverage.html":{}}}],["src/photo/photo.service.ts:178",{"_index":2051,"title":{},"body":{"injectables/PhotoService.html":{}}}],["src/photo/photo.service.ts:18",{"_index":2049,"title":{},"body":{"injectables/PhotoService.html":{}}}],["src/photo/photo.service.ts:191",{"_index":2055,"title":{},"body":{"injectables/PhotoService.html":{}}}],["src/photo/photo.service.ts:224",{"_index":2053,"title":{},"body":{"injectables/PhotoService.html":{}}}],["src/photo/photo.service.ts:31",{"_index":2057,"title":{},"body":{"injectables/PhotoService.html":{}}}],["src/photo/photo.service.ts:89",{"_index":2058,"title":{},"body":{"injectables/PhotoService.html":{}}}],["src/seed/dto/create",{"_index":1396,"title":{},"body":{"classes/CreateSeedDto.html":{},"coverage.html":{}}}],["src/seed/dto/update",{"_index":2487,"title":{},"body":{"classes/UpdateSeedDto.html":{},"coverage.html":{}}}],["src/seed/entities/seed.entity.ts",{"_index":2211,"title":{},"body":{"classes/Seed.html":{},"coverage.html":{}}}],["src/seed/seed.controller.ts",{"_index":2213,"title":{},"body":{"controllers/SeedController.html":{},"coverage.html":{}}}],["src/seed/seed.controller.ts:14",{"_index":2217,"title":{},"body":{"controllers/SeedController.html":{}}}],["src/seed/seed.controller.ts:9",{"_index":2219,"title":{},"body":{"controllers/SeedController.html":{}}}],["src/seed/seed.module.ts",{"_index":2228,"title":{},"body":{"modules/SeedModule.html":{}}}],["src/seed/seed.service.ts",{"_index":2233,"title":{},"body":{"injectables/SeedService.html":{},"coverage.html":{}}}],["src/seed/seed.service.ts:10",{"_index":2236,"title":{},"body":{"injectables/SeedService.html":{}}}],["src/seed/seed.service.ts:103",{"_index":2237,"title":{},"body":{"injectables/SeedService.html":{}}}],["src/seed/seed.service.ts:18",{"_index":2238,"title":{},"body":{"injectables/SeedService.html":{}}}],["src/subscription/dto/create",{"_index":1399,"title":{},"body":{"classes/CreateSubscriptionDto.html":{},"classes/CreateSubscriptionOrderDto.html":{},"coverage.html":{}}}],["src/subscription/dto/update",{"_index":2491,"title":{},"body":{"classes/UpdateSubscriptionDto.html":{},"coverage.html":{}}}],["src/subscription/entities/subscription",{"_index":2363,"title":{},"body":{"entities/SubscriptionOrder.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/subscription/entities/subscription.entity",{"_index":2527,"title":{},"body":{"entities/User.html":{}}}],["src/subscription/entities/subscription.entity.ts",{"_index":2290,"title":{},"body":{"entities/Subscription.html":{},"coverage.html":{}}}],["src/subscription/entities/subscription.entity.ts:15",{"_index":2295,"title":{},"body":{"entities/Subscription.html":{}}}],["src/subscription/entities/subscription.entity.ts:18",{"_index":2298,"title":{},"body":{"entities/Subscription.html":{}}}],["src/subscription/entities/subscription.entity.ts:21",{"_index":2294,"title":{},"body":{"entities/Subscription.html":{}}}],["src/subscription/entities/subscription.entity.ts:24",{"_index":2296,"title":{},"body":{"entities/Subscription.html":{}}}],["src/subscription/entities/subscription.entity.ts:27",{"_index":2301,"title":{},"body":{"entities/Subscription.html":{}}}],["src/subscription/entities/subscription.entity.ts:30",{"_index":2297,"title":{},"body":{"entities/Subscription.html":{}}}],["src/subscription/entities/subscription.entity.ts:33",{"_index":2293,"title":{},"body":{"entities/Subscription.html":{}}}],["src/subscription/entities/subscription.entity.ts:36",{"_index":2299,"title":{},"body":{"entities/Subscription.html":{}}}],["src/subscription/entities/subscriptionplan.entity",{"_index":2231,"title":{},"body":{"modules/SeedModule.html":{},"injectables/SeedService.html":{}}}],["src/subscription/entities/subscriptionplan.entity.ts",{"_index":2373,"title":{},"body":{"entities/SubscriptionPlan.html":{},"coverage.html":{}}}],["src/subscription/entities/subscriptionplan.entity.ts:12",{"_index":2374,"title":{},"body":{"entities/SubscriptionPlan.html":{}}}],["src/subscription/entities/subscriptionplan.entity.ts:15",{"_index":2377,"title":{},"body":{"entities/SubscriptionPlan.html":{}}}],["src/subscription/entities/subscriptionplan.entity.ts:18",{"_index":2380,"title":{},"body":{"entities/SubscriptionPlan.html":{}}}],["src/subscription/entities/subscriptionplan.entity.ts:21",{"_index":2376,"title":{},"body":{"entities/SubscriptionPlan.html":{}}}],["src/subscription/entities/subscriptionplan.entity.ts:6",{"_index":2378,"title":{},"body":{"entities/SubscriptionPlan.html":{}}}],["src/subscription/entities/subscriptionplan.entity.ts:9",{"_index":2379,"title":{},"body":{"entities/SubscriptionPlan.html":{}}}],["src/subscription/subscription.controller.ts",{"_index":2304,"title":{},"body":{"controllers/SubscriptionController.html":{},"coverage.html":{}}}],["src/subscription/subscription.controller.ts:21",{"_index":2315,"title":{},"body":{"controllers/SubscriptionController.html":{}}}],["src/subscription/subscription.controller.ts:28",{"_index":2324,"title":{},"body":{"controllers/SubscriptionController.html":{}}}],["src/subscription/subscription.controller.ts:34",{"_index":2311,"title":{},"body":{"controllers/SubscriptionController.html":{}}}],["src/subscription/subscription.controller.ts:39",{"_index":2328,"title":{},"body":{"controllers/SubscriptionController.html":{}}}],["src/subscription/subscription.controller.ts:46",{"_index":2318,"title":{},"body":{"controllers/SubscriptionController.html":{}}}],["src/subscription/subscription.controller.ts:55",{"_index":2326,"title":{},"body":{"controllers/SubscriptionController.html":{}}}],["src/subscription/subscription.controller.ts:61",{"_index":2321,"title":{},"body":{"controllers/SubscriptionController.html":{}}}],["src/subscription/subscription.module",{"_index":951,"title":{},"body":{"modules/AuthModule.html":{},"modules/MercadopagoModule.html":{}}}],["src/subscription/subscription.module.ts",{"_index":2356,"title":{},"body":{"modules/SubscriptionModule.html":{}}}],["src/subscription/subscription.service",{"_index":974,"title":{},"body":{"injectables/AuthService.html":{},"injectables/MercadopagoService.html":{}}}],["src/subscription/subscription.service.ts",{"_index":2381,"title":{},"body":{"injectables/SubscriptionService.html":{},"coverage.html":{}}}],["src/subscription/subscription.service.ts:108",{"_index":2401,"title":{},"body":{"injectables/SubscriptionService.html":{}}}],["src/subscription/subscription.service.ts:161",{"_index":2408,"title":{},"body":{"injectables/SubscriptionService.html":{}}}],["src/subscription/subscription.service.ts:189",{"_index":2406,"title":{},"body":{"injectables/SubscriptionService.html":{}}}],["src/subscription/subscription.service.ts:19",{"_index":2389,"title":{},"body":{"injectables/SubscriptionService.html":{}}}],["src/subscription/subscription.service.ts:202",{"_index":2392,"title":{},"body":{"injectables/SubscriptionService.html":{}}}],["src/subscription/subscription.service.ts:39",{"_index":2396,"title":{},"body":{"injectables/SubscriptionService.html":{}}}],["src/subscription/subscription.service.ts:50",{"_index":2394,"title":{},"body":{"injectables/SubscriptionService.html":{}}}],["src/subscription/subscription.service.ts:61",{"_index":2403,"title":{},"body":{"injectables/SubscriptionService.html":{}}}],["src/subscription/subscription.service.ts:82",{"_index":2404,"title":{},"body":{"injectables/SubscriptionService.html":{}}}],["src/subscription/subscription.service.ts:91",{"_index":2399,"title":{},"body":{"injectables/SubscriptionService.html":{}}}],["src/user/dto/base",{"_index":1021,"title":{},"body":{"classes/BaseUserDto.html":{},"classes/CreateUserDto.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/user/dto/update",{"_index":2495,"title":{},"body":{"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["src/user/entities/user.entity",{"_index":955,"title":{},"body":{"modules/AuthModule.html":{},"injectables/BuyerOrdersService.html":{},"modules/OrdersModule.html":{},"injectables/PasswordResetService.html":{},"entities/PasswordResetToken.html":{},"entities/PaymentAccount.html":{},"injectables/PhotographerOrdersService.html":{},"entities/Subscription.html":{},"entities/SubscriptionOrder.html":{}}}],["src/user/entities/user.entity.ts",{"_index":2497,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["src/user/entities/user.entity.ts:20",{"_index":2504,"title":{},"body":{"entities/User.html":{}}}],["src/user/entities/user.entity.ts:23",{"_index":2503,"title":{},"body":{"entities/User.html":{}}}],["src/user/entities/user.entity.ts:26",{"_index":2510,"title":{},"body":{"entities/User.html":{}}}],["src/user/entities/user.entity.ts:33",{"_index":2516,"title":{},"body":{"entities/User.html":{}}}],["src/user/entities/user.entity.ts:36",{"_index":2520,"title":{},"body":{"entities/User.html":{}}}],["src/user/entities/user.entity.ts:39",{"_index":2507,"title":{},"body":{"entities/User.html":{}}}],["src/user/entities/user.entity.ts:42",{"_index":2505,"title":{},"body":{"entities/User.html":{}}}],["src/user/entities/user.entity.ts:45",{"_index":2515,"title":{},"body":{"entities/User.html":{}}}],["src/user/entities/user.entity.ts:48",{"_index":2511,"title":{},"body":{"entities/User.html":{}}}],["src/user/entities/user.entity.ts:51",{"_index":2522,"title":{},"body":{"entities/User.html":{}}}],["src/user/entities/user.entity.ts:54",{"_index":2506,"title":{},"body":{"entities/User.html":{}}}],["src/user/entities/user.entity.ts:57",{"_index":2502,"title":{},"body":{"entities/User.html":{}}}],["src/user/entities/user.entity.ts:60",{"_index":2525,"title":{},"body":{"entities/User.html":{}}}],["src/user/entities/user.entity.ts:64",{"_index":2501,"title":{},"body":{"entities/User.html":{}}}],["src/user/entities/user.entity.ts:67",{"_index":2500,"title":{},"body":{"entities/User.html":{}}}],["src/user/entities/user.entity.ts:70",{"_index":2509,"title":{},"body":{"entities/User.html":{}}}],["src/user/entities/user.entity.ts:75",{"_index":2524,"title":{},"body":{"entities/User.html":{}}}],["src/user/entities/user.entity.ts:78",{"_index":2514,"title":{},"body":{"entities/User.html":{}}}],["src/user/entities/user.entity.ts:81",{"_index":2519,"title":{},"body":{"entities/User.html":{}}}],["src/user/helpers/user.helpers",{"_index":709,"title":{},"body":{"injectables/AlbumService.html":{},"injectables/BuyerOrdersService.html":{},"injectables/FilesService.html":{},"injectables/PhotoService.html":{}}}],["src/user/helpers/user.helpers.ts",{"_index":2613,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/user/user.controller.ts",{"_index":2529,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{}}}],["src/user/user.controller.ts:12",{"_index":2533,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:20",{"_index":2536,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.module",{"_index":683,"title":{},"body":{"modules/AlbumModule.html":{},"modules/PaymentModule.html":{},"modules/PhotoModule.html":{},"modules/SubscriptionModule.html":{}}}],["src/user/user.module.ts",{"_index":2545,"title":{},"body":{"modules/UserModule.html":{}}}],["src/user/user.service",{"_index":589,"title":{},"body":{"injectables/AlbumAccessService.html":{},"injectables/AlbumService.html":{},"injectables/PaymentService.html":{},"injectables/PhotoService.html":{}}}],["src/user/user.service.ts",{"_index":2548,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/user/user.service.ts:109",{"_index":2562,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:15",{"_index":2556,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:26",{"_index":2557,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:70",{"_index":2554,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:75",{"_index":2560,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:9",{"_index":2551,"title":{},"body":{"injectables/UserService.html":{}}}],["ssl",{"_index":822,"title":{},"body":{"modules/AppModule.html":{}}}],["start",{"_index":2683,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":2686,"title":{},"body":{"index.html":{}}}],["start:prodrun",{"_index":2687,"title":{},"body":{"index.html":{}}}],["startdate",{"_index":2292,"title":{},"body":{"entities/Subscription.html":{},"injectables/SubscriptionService.html":{}}}],["starter",{"_index":2675,"title":{},"body":{"index.html":{}}}],["statements",{"_index":2585,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":46,"title":{},"body":{"classes/AdminAlbumByIdDto.html":{},"controllers/AdminOrderController.html":{},"injectables/AdminOrderService.html":{},"injectables/AdminUserService.html":{},"classes/AlbumSummaryDto.html":{},"injectables/BuyerOrdersService.html":{},"injectables/MercadopagoService.html":{},"entities/Order.html":{},"classes/OrderItemResponseDto.html":{},"classes/OrderResponseDto.html":{},"controllers/PhotographerOrdersController.html":{},"entities/SubscriptionOrder.html":{},"injectables/SubscriptionService.html":{}}}],["stay",{"_index":2759,"title":{},"body":{"index.html":{}}}],["steps",{"_index":2700,"title":{},"body":{"index.html":{}}}],["storageusedmb",{"_index":410,"title":{},"body":{"injectables/AdminUserService.html":{},"classes/BaseUserDto.html":{},"injectables/FilesService.html":{},"injectables/PhotoService.html":{},"entities/User.html":{},"injectables/UserService.html":{}}}],["straightforward",{"_index":2718,"title":{},"body":{"index.html":{}}}],["string",{"_index":29,"title":{},"body":{"classes/AdminAlbumByIdDto.html":{},"classes/AdminAlbumDto.html":{},"interfaces/AdminAlbumSummaryDto.html":{},"controllers/AdminOrderController.html":{},"injectables/AdminOrderService.html":{},"interfaces/AdminPhotographerByIdDto.html":{},"controllers/AdminUserController.html":{},"classes/AdminUserDto.html":{},"injectables/AdminUserService.html":{},"entities/Album.html":{},"controllers/AlbumAccessController.html":{},"injectables/AlbumAccessService.html":{},"controllers/AlbumController.html":{},"injectables/AlbumService.html":{},"classes/AlbumSummaryDto.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BaseUserDto.html":{},"controllers/BuyerOrdersController.html":{},"injectables/BuyerOrdersService.html":{},"classes/CreateAlbumDto.html":{},"classes/CreateLeadDto.html":{},"classes/CreateOrderDto.html":{},"classes/CreatePaymentAccountDto.html":{},"classes/CreatePhotoDto.html":{},"classes/CreateSubscriptionOrderDto.html":{},"classes/CreateUserDto.html":{},"injectables/FilesService.html":{},"entities/Lead.html":{},"classes/LoginDto.html":{},"injectables/MailService.html":{},"controllers/MercadopagoController.html":{},"injectables/MercadopagoService.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"classes/OrderItemDto.html":{},"classes/OrderItemResponseDto.html":{},"classes/OrderResponseDto.html":{},"injectables/PasswordResetService.html":{},"entities/PasswordResetToken.html":{},"entities/PaymentAccount.html":{},"controllers/PaymentController.html":{},"injectables/PaymentService.html":{},"entities/Photo.html":{},"controllers/PhotoController.html":{},"injectables/PhotoService.html":{},"controllers/PhotographerOrdersController.html":{},"injectables/PhotographerOrdersService.html":{},"classes/PriceOptionDto.html":{},"entities/Subscription.html":{},"controllers/SubscriptionController.html":{},"entities/SubscriptionOrder.html":{},"entities/SubscriptionPlan.html":{},"injectables/SubscriptionService.html":{},"entities/User.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["string).tolowercase",{"_index":277,"title":{},"body":{"injectables/AdminOrderService.html":{}}}],["stripe",{"_index":1894,"title":{},"body":{"entities/PaymentAccount.html":{}}}],["sub",{"_index":2448,"title":{},"body":{"injectables/SubscriptionService.html":{}}}],["sub.enddate",{"_index":2450,"title":{},"body":{"injectables/SubscriptionService.html":{},"miscellaneous/variables.html":{}}}],["sub.isactive",{"_index":2449,"title":{},"body":{"injectables/SubscriptionService.html":{}}}],["subida",{"_index":2117,"title":{},"body":{"injectables/PhotoService.html":{}}}],["subir",{"_index":1481,"title":{},"body":{"injectables/FilesService.html":{},"injectables/PhotoService.html":{}}}],["subject",{"_index":1576,"title":{},"body":{"injectables/MailService.html":{}}}],["subscription",{"_index":1402,"title":{"entities/Subscription.html":{}},"body":{"classes/CreateSubscriptionOrderDto.html":{},"entities/Subscription.html":{},"controllers/SubscriptionController.html":{},"modules/SubscriptionModule.html":{},"injectables/SubscriptionService.html":{},"entities/User.html":{},"coverage.html":{}}}],["subscription.controller",{"_index":2357,"title":{},"body":{"modules/SubscriptionModule.html":{}}}],["subscription.dto",{"_index":2493,"title":{},"body":{"classes/UpdateSubscriptionDto.html":{}}}],["subscription.dto.ts",{"_index":1400,"title":{},"body":{"classes/CreateSubscriptionDto.html":{},"classes/UpdateSubscriptionDto.html":{},"coverage.html":{}}}],["subscription.service",{"_index":2329,"title":{},"body":{"controllers/SubscriptionController.html":{},"modules/SubscriptionModule.html":{}}}],["subscription.user",{"_index":2523,"title":{},"body":{"entities/User.html":{}}}],["subscription/subscription.module",{"_index":807,"title":{},"body":{"modules/AppModule.html":{}}}],["subscriptioncontroller",{"_index":2303,"title":{"controllers/SubscriptionController.html":{}},"body":{"controllers/SubscriptionController.html":{},"modules/SubscriptionModule.html":{},"coverage.html":{}}}],["subscriptionid",{"_index":1743,"title":{},"body":{"injectables/MercadopagoService.html":{}}}],["subscriptionmodule",{"_index":791,"title":{"modules/SubscriptionModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MercadopagoModule.html":{},"modules/SubscriptionModule.html":{},"modules.html":{},"overview.html":{}}}],["subscriptionorder",{"_index":2360,"title":{"entities/SubscriptionOrder.html":{}},"body":{"modules/SubscriptionModule.html":{},"entities/SubscriptionOrder.html":{},"injectables/SubscriptionService.html":{},"coverage.html":{}}}],["subscriptionorderstatus",{"_index":2369,"title":{},"body":{"entities/SubscriptionOrder.html":{},"injectables/SubscriptionService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["subscriptionplan",{"_index":2230,"title":{"entities/SubscriptionPlan.html":{}},"body":{"modules/SeedModule.html":{},"injectables/SeedService.html":{},"entities/Subscription.html":{},"modules/SubscriptionModule.html":{},"entities/SubscriptionOrder.html":{},"entities/SubscriptionPlan.html":{},"injectables/SubscriptionService.html":{},"coverage.html":{}}}],["subscriptionplan.entity",{"_index":2302,"title":{},"body":{"entities/Subscription.html":{},"entities/SubscriptionOrder.html":{}}}],["subscriptionrepo",{"_index":2390,"title":{},"body":{"injectables/SubscriptionService.html":{}}}],["subscriptions",{"_index":404,"title":{},"body":{"injectables/AdminUserService.html":{},"controllers/SubscriptionController.html":{},"entities/User.html":{}}}],["subscriptionservice",{"_index":960,"title":{"injectables/SubscriptionService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/MercadopagoService.html":{},"controllers/SubscriptionController.html":{},"modules/SubscriptionModule.html":{},"injectables/SubscriptionService.html":{},"coverage.html":{},"overview.html":{}}}],["substring(0",{"_index":1488,"title":{},"body":{"injectables/FilesService.html":{}}}],["subtotal",{"_index":778,"title":{},"body":{"classes/AlbumSummaryDto.html":{},"injectables/BuyerOrdersService.html":{},"entities/OrderItem.html":{},"classes/OrderItemResponseDto.html":{},"classes/OrderResponseDto.html":{}}}],["success",{"_index":618,"title":{},"body":{"injectables/AlbumAccessService.html":{},"injectables/BuyerOrdersService.html":{},"injectables/SubscriptionService.html":{}}}],["suficiente",{"_index":2094,"title":{},"body":{"injectables/PhotoService.html":{}}}],["sum",{"_index":1170,"title":{},"body":{"injectables/BuyerOrdersService.html":{},"injectables/PhotoService.html":{}}}],["sum(case",{"_index":441,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["sumando",{"_index":2111,"title":{},"body":{"injectables/PhotoService.html":{}}}],["sumatoria",{"_index":312,"title":{},"body":{"injectables/AdminOrderService.html":{}}}],["super_admin",{"_index":93,"title":{},"body":{"classes/AdminAlbumDto.html":{},"classes/AdminUserDto.html":{},"classes/BaseUserDto.html":{},"entities/User.html":{},"miscellaneous/enumerations.html":{}}}],["supera",{"_index":1482,"title":{},"body":{"injectables/FilesService.html":{}}}],["support",{"_index":2739,"title":{},"body":{"index.html":{},"modules.html":{}}}],["sus",{"_index":595,"title":{},"body":{"injectables/AlbumAccessService.html":{},"entities/Photo.html":{}}}],["suscripciones",{"_index":2397,"title":{},"body":{"injectables/SubscriptionService.html":{}}}],["suscripción",{"_index":991,"title":{},"body":{"injectables/AuthService.html":{},"injectables/MercadopagoService.html":{},"injectables/SeedService.html":{},"injectables/SubscriptionService.html":{},"miscellaneous/variables.html":{}}}],["svg",{"_index":2791,"title":{},"body":{"modules.html":{}}}],["switch",{"_index":2825,"title":{},"body":{"miscellaneous/variables.html":{}}}],["synchronize",{"_index":827,"title":{},"body":{"modules/AppModule.html":{}}}],["table",{"_index":2615,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":2614,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":287,"title":{},"body":{"injectables/AdminOrderService.html":{},"injectables/AlbumService.html":{},"index.html":{}}}],["tamaño",{"_index":1474,"title":{},"body":{"injectables/FilesService.html":{},"injectables/PhotoService.html":{}}}],["template",{"_index":1726,"title":{},"body":{"injectables/MercadopagoService.html":{}}}],["tenés",{"_index":2207,"title":{},"body":{"guards/RolesGuard.html":{}}}],["tenías",{"_index":272,"title":{},"body":{"injectables/AdminOrderService.html":{}}}],["term",{"_index":648,"title":{},"body":{"controllers/AlbumController.html":{},"injectables/AlbumService.html":{}}}],["test",{"_index":2690,"title":{},"body":{"index.html":{}}}],["test:covdeployment",{"_index":2693,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":2692,"title":{},"body":{"index.html":{}}}],["tests",{"_index":2688,"title":{},"body":{"index.html":{}}}],["text",{"_index":1890,"title":{},"body":{"entities/PaymentAccount.html":{},"entities/User.html":{}}}],["thanks",{"_index":2773,"title":{},"body":{"index.html":{}}}],["this.activatesubscription(order.user",{"_index":2438,"title":{},"body":{"injectables/SubscriptionService.html":{}}}],["this.activatesubscription(user",{"_index":2414,"title":{},"body":{"injectables/SubscriptionService.html":{}}}],["this.adminalbumservice.getstats",{"_index":72,"title":{},"body":{"controllers/AdminAlbumController.html":{},"controllers/AdminUserController.html":{}}}],["this.adminorderservice.findall",{"_index":254,"title":{},"body":{"controllers/AdminOrderController.html":{}}}],["this.adminorderservice.findbyid(id",{"_index":257,"title":{},"body":{"controllers/AdminOrderController.html":{}}}],["this.adminorderservice.getstats",{"_index":259,"title":{},"body":{"controllers/AdminOrderController.html":{},"controllers/AdminUserController.html":{}}}],["this.adminuserservice.findall",{"_index":356,"title":{},"body":{"controllers/AdminUserController.html":{}}}],["this.adminuserservice.getalbumbyidforadmin(id",{"_index":367,"title":{},"body":{"controllers/AdminUserController.html":{}}}],["this.adminuserservice.getallphotographers",{"_index":361,"title":{},"body":{"controllers/AdminUserController.html":{}}}],["this.adminuserservice.getphotographerbyid(id",{"_index":364,"title":{},"body":{"controllers/AdminUserController.html":{}}}],["this.adminuserservice.getstats",{"_index":359,"title":{},"body":{"controllers/AdminUserController.html":{}}}],["this.adminuserservice.setactivestatus(id",{"_index":370,"title":{},"body":{"controllers/AdminUserController.html":{}}}],["this.albumaccessservice.getalbumbyid(userid",{"_index":577,"title":{},"body":{"controllers/AlbumAccessController.html":{}}}],["this.albumaccessservice.grantaccess",{"_index":572,"title":{},"body":{"controllers/AlbumAccessController.html":{}}}],["this.albumrepo.count",{"_index":119,"title":{},"body":{"injectables/AdminAlbumService.html":{}}}],["this.albumrepo.create",{"_index":727,"title":{},"body":{"injectables/AlbumService.html":{}}}],["this.albumrepo.find",{"_index":737,"title":{},"body":{"injectables/AlbumService.html":{}}}],["this.albumrepo.findone",{"_index":467,"title":{},"body":{"injectables/AdminUserService.html":{},"injectables/AlbumAccessService.html":{},"injectables/AlbumService.html":{}}}],["this.albumrepo.increment",{"_index":715,"title":{},"body":{"injectables/AlbumService.html":{}}}],["this.albumrepo.merge(album",{"_index":746,"title":{},"body":{"injectables/AlbumService.html":{}}}],["this.albumrepo.save(album",{"_index":617,"title":{},"body":{"injectables/AlbumAccessService.html":{},"injectables/AlbumService.html":{}}}],["this.albumrepository.findonebyorfail",{"_index":1141,"title":{},"body":{"injectables/BuyerOrdersService.html":{}}}],["this.albumservice.create(createalbumdto",{"_index":662,"title":{},"body":{"controllers/AlbumController.html":{}}}],["this.albumservice.findall(paginationdto",{"_index":664,"title":{},"body":{"controllers/AlbumController.html":{}}}],["this.albumservice.findone(albumid",{"_index":2061,"title":{},"body":{"injectables/PhotoService.html":{}}}],["this.albumservice.findone(term",{"_index":669,"title":{},"body":{"controllers/AlbumController.html":{}}}],["this.albumservice.incrementphotoscount(album.id",{"_index":2076,"title":{},"body":{"injectables/PhotoService.html":{}}}],["this.albumservice.incrementphotoscount(albumid",{"_index":2145,"title":{},"body":{"injectables/PhotoService.html":{}}}],["this.albumservice.incrementphotoscount(photo.album.id",{"_index":2132,"title":{},"body":{"injectables/PhotoService.html":{}}}],["this.albumservice.remove(id",{"_index":675,"title":{},"body":{"controllers/AlbumController.html":{}}}],["this.albumservice.update(id",{"_index":672,"title":{},"body":{"controllers/AlbumController.html":{}}}],["this.authservice.login(dto",{"_index":875,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.register(dto",{"_index":872,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.buyerordersservice.updateorderstatus(orderid",{"_index":1741,"title":{},"body":{"injectables/MercadopagoService.html":{}}}],["this.configservice.get",{"_index":1698,"title":{},"body":{"injectables/MercadopagoService.html":{}}}],["this.configservice.get('mercadopago_provider_user_id",{"_index":1139,"title":{},"body":{"injectables/BuyerOrdersService.html":{}}}],["this.configservice.get('mp_webhook_secret",{"_index":1686,"title":{},"body":{"injectables/MercadopagoService.html":{}}}],["this.createtoken(user.id",{"_index":1860,"title":{},"body":{"injectables/PasswordResetService.html":{}}}],["this.filesservice.deleteimage(p.publicid",{"_index":2142,"title":{},"body":{"injectables/PhotoService.html":{}}}],["this.filesservice.deleteimage(photo.publicid",{"_index":2127,"title":{},"body":{"injectables/PhotoService.html":{}}}],["this.filesservice.uploadimage(file",{"_index":1441,"title":{},"body":{"controllers/FilesController.html":{},"injectables/PhotoService.html":{}}}],["this.generatetoken(newuser",{"_index":998,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.generatetoken(user",{"_index":1010,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.handlepaymentupdate(paymentdata",{"_index":1705,"title":{},"body":{"injectables/MercadopagoService.html":{}}}],["this.httpservice.get(url",{"_index":1697,"title":{},"body":{"injectables/MercadopagoService.html":{}}}],["this.isvalidsignature(rawbody",{"_index":1690,"title":{},"body":{"injectables/MercadopagoService.html":{}}}],["this.jwtservice.verify(token",{"_index":932,"title":{},"body":{"guards/AuthGuard.html":{}}}],["this.leadrepo.create(dto",{"_index":1552,"title":{},"body":{"injectables/LeadService.html":{}}}],["this.leadrepo.find",{"_index":1554,"title":{},"body":{"injectables/LeadService.html":{}}}],["this.leadrepo.findone",{"_index":1549,"title":{},"body":{"injectables/LeadService.html":{}}}],["this.leadrepo.save(lead",{"_index":1553,"title":{},"body":{"injectables/LeadService.html":{}}}],["this.leadservice.create(dto",{"_index":1532,"title":{},"body":{"controllers/LeadController.html":{}}}],["this.leadservice.findall",{"_index":1533,"title":{},"body":{"controllers/LeadController.html":{}}}],["this.logger.error",{"_index":1609,"title":{},"body":{"injectables/MailService.html":{}}}],["this.logger.log",{"_index":1610,"title":{},"body":{"injectables/MailService.html":{}}}],["this.logger.warn(`rol",{"_index":1614,"title":{},"body":{"injectables/MailService.html":{}}}],["this.mailservice.sendnewordernotification",{"_index":1293,"title":{},"body":{"injectables/BuyerOrdersService.html":{}}}],["this.mailservice.sendorderpaymentemail",{"_index":1289,"title":{},"body":{"injectables/BuyerOrdersService.html":{}}}],["this.mailservice.sendpasswordresetemail",{"_index":1862,"title":{},"body":{"injectables/PasswordResetService.html":{}}}],["this.mailservice.sendprowelcomeemail(user.email",{"_index":2455,"title":{},"body":{"injectables/SubscriptionService.html":{}}}],["this.mailservice.sendwelcomeemail(newuser.email",{"_index":996,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.maptodto(order",{"_index":1186,"title":{},"body":{"injectables/BuyerOrdersService.html":{}}}],["this.maptodto(savedorder",{"_index":1175,"title":{},"body":{"injectables/BuyerOrdersService.html":{}}}],["this.mercadopagoprovideruserid",{"_index":1138,"title":{},"body":{"injectables/BuyerOrdersService.html":{}}}],["this.mercadopagoservice.processnotification",{"_index":1654,"title":{},"body":{"controllers/MercadopagoController.html":{}}}],["this.orderrepo",{"_index":158,"title":{},"body":{"injectables/AdminAlbumService.html":{},"injectables/AdminOrderService.html":{}}}],["this.orderrepo.count",{"_index":295,"title":{},"body":{"injectables/AdminOrderService.html":{}}}],["this.orderrepo.create",{"_index":2421,"title":{},"body":{"injectables/SubscriptionService.html":{}}}],["this.orderrepo.find",{"_index":2440,"title":{},"body":{"injectables/SubscriptionService.html":{}}}],["this.orderrepo.findandcount",{"_index":280,"title":{},"body":{"injectables/AdminOrderService.html":{}}}],["this.orderrepo.findone",{"_index":288,"title":{},"body":{"injectables/AdminOrderService.html":{},"injectables/SubscriptionService.html":{}}}],["this.orderrepo.save(order",{"_index":2423,"title":{},"body":{"injectables/SubscriptionService.html":{}}}],["this.orderrepository.create",{"_index":1172,"title":{},"body":{"injectables/BuyerOrdersService.html":{}}}],["this.orderrepository.find",{"_index":1176,"title":{},"body":{"injectables/BuyerOrdersService.html":{},"injectables/PhotographerOrdersService.html":{}}}],["this.orderrepository.findone",{"_index":1178,"title":{},"body":{"injectables/BuyerOrdersService.html":{},"injectables/PhotographerOrdersService.html":{}}}],["this.orderrepository.manager.create(orderitem",{"_index":1161,"title":{},"body":{"injectables/BuyerOrdersService.html":{}}}],["this.orderrepository.remove(order",{"_index":1191,"title":{},"body":{"injectables/BuyerOrdersService.html":{}}}],["this.orderrepository.save(order",{"_index":1174,"title":{},"body":{"injectables/BuyerOrdersService.html":{},"injectables/PhotographerOrdersService.html":{}}}],["this.orderservice.cancelorder(id",{"_index":1088,"title":{},"body":{"controllers/BuyerOrdersController.html":{}}}],["this.orderservice.createorder(dto",{"_index":1072,"title":{},"body":{"controllers/BuyerOrdersController.html":{}}}],["this.orderservice.createpaymentpreference(orderid",{"_index":1096,"title":{},"body":{"controllers/BuyerOrdersController.html":{}}}],["this.orderservice.getorderbyid(id",{"_index":1082,"title":{},"body":{"controllers/BuyerOrdersController.html":{}}}],["this.orderservice.getorderbyid(orderid",{"_index":1092,"title":{},"body":{"controllers/BuyerOrdersController.html":{}}}],["this.orderservice.getordersbybuyer(buyerid",{"_index":1079,"title":{},"body":{"controllers/BuyerOrdersController.html":{}}}],["this.orderservice.verifypayment(orderid",{"_index":1085,"title":{},"body":{"controllers/BuyerOrdersController.html":{}}}],["this.paymentaccountrepo.create",{"_index":1961,"title":{},"body":{"injectables/PaymentService.html":{}}}],["this.paymentaccountrepo.findone",{"_index":1960,"title":{},"body":{"injectables/PaymentService.html":{}}}],["this.paymentaccountrepo.save(account",{"_index":1970,"title":{},"body":{"injectables/PaymentService.html":{}}}],["this.paymentservice.getaccount",{"_index":1196,"title":{},"body":{"injectables/BuyerOrdersService.html":{}}}],["this.paymentservice.linkmercadopago(userid",{"_index":1915,"title":{},"body":{"controllers/PaymentController.html":{}}}],["this.photorepository",{"_index":1147,"title":{},"body":{"injectables/BuyerOrdersService.html":{}}}],["this.photorepository.create",{"_index":2067,"title":{},"body":{"injectables/PhotoService.html":{}}}],["this.photorepository.delete(photo.id",{"_index":2128,"title":{},"body":{"injectables/PhotoService.html":{}}}],["this.photorepository.delete(photos.map((p",{"_index":2143,"title":{},"body":{"injectables/PhotoService.html":{}}}],["this.photorepository.find",{"_index":2123,"title":{},"body":{"injectables/PhotoService.html":{}}}],["this.photorepository.findone",{"_index":2124,"title":{},"body":{"injectables/PhotoService.html":{}}}],["this.photorepository.save(photo",{"_index":2069,"title":{},"body":{"injectables/PhotoService.html":{}}}],["this.photorepository.save(photostosave",{"_index":2110,"title":{},"body":{"injectables/PhotoService.html":{}}}],["this.photoservice.findall(userid",{"_index":2028,"title":{},"body":{"controllers/PhotoController.html":{}}}],["this.photoservice.removeallbyalbum(albumid",{"_index":2034,"title":{},"body":{"controllers/PhotoController.html":{}}}],["this.photoservice.removeallbyalbum(id",{"_index":759,"title":{},"body":{"injectables/AlbumService.html":{}}}],["this.photoservice.removebyid(id",{"_index":2030,"title":{},"body":{"controllers/PhotoController.html":{}}}],["this.photoservice.upload(file",{"_index":2018,"title":{},"body":{"controllers/PhotoController.html":{}}}],["this.photoservice.uploadmultiple",{"_index":2026,"title":{},"body":{"controllers/PhotoController.html":{}}}],["this.planrepo.create(plandata",{"_index":2284,"title":{},"body":{"injectables/SeedService.html":{}}}],["this.planrepo.find",{"_index":2420,"title":{},"body":{"injectables/SubscriptionService.html":{}}}],["this.planrepo.findone",{"_index":2281,"title":{},"body":{"injectables/SeedService.html":{},"injectables/SubscriptionService.html":{}}}],["this.planrepo.save(plan",{"_index":2285,"title":{},"body":{"injectables/SeedService.html":{}}}],["this.reflector.getallandoverride",{"_index":2203,"title":{},"body":{"guards/RolesGuard.html":{}}}],["this.resend",{"_index":1605,"title":{},"body":{"injectables/MailService.html":{}}}],["this.resend.emails.send",{"_index":1607,"title":{},"body":{"injectables/MailService.html":{}}}],["this.resetrepo.create",{"_index":1865,"title":{},"body":{"injectables/PasswordResetService.html":{}}}],["this.resetrepo.findone",{"_index":1873,"title":{},"body":{"injectables/PasswordResetService.html":{}}}],["this.resetrepo.save(token",{"_index":1868,"title":{},"body":{"injectables/PasswordResetService.html":{}}}],["this.resetservice.consumetoken(token",{"_index":886,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.resetservice.requestpasswordreset(email",{"_index":881,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.secret",{"_index":1689,"title":{},"body":{"injectables/MercadopagoService.html":{}}}],["this.seedservice.seedsubscriptionplans",{"_index":2224,"title":{},"body":{"controllers/SeedController.html":{}}}],["this.seedservice.seedusers",{"_index":2223,"title":{},"body":{"controllers/SeedController.html":{}}}],["this.sendmail",{"_index":1620,"title":{},"body":{"injectables/MailService.html":{}}}],["this.sendmail(to",{"_index":1616,"title":{},"body":{"injectables/MailService.html":{}}}],["this.service.getorderbyid(photographerid",{"_index":2167,"title":{},"body":{"controllers/PhotographerOrdersController.html":{}}}],["this.service.getordersforphotographer(photographerid",{"_index":2165,"title":{},"body":{"controllers/PhotographerOrdersController.html":{}}}],["this.service.updatedeliverystatus",{"_index":2169,"title":{},"body":{"controllers/PhotographerOrdersController.html":{}}}],["this.subscriptionrepo.create",{"_index":2453,"title":{},"body":{"injectables/SubscriptionService.html":{}}}],["this.subscriptionrepo.find",{"_index":2447,"title":{},"body":{"injectables/SubscriptionService.html":{}}}],["this.subscriptionrepo.findone",{"_index":2417,"title":{},"body":{"injectables/SubscriptionService.html":{}}}],["this.subscriptionrepo.save(sub",{"_index":2451,"title":{},"body":{"injectables/SubscriptionService.html":{}}}],["this.subscriptionrepo.save(subscription",{"_index":2454,"title":{},"body":{"injectables/SubscriptionService.html":{}}}],["this.subscriptionservice.changesubscription(req.user.sub",{"_index":2340,"title":{},"body":{"controllers/SubscriptionController.html":{}}}],["this.subscriptionservice.createinitialsubscription(newuser.id",{"_index":993,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.subscriptionservice.createinitialsubscription(userid",{"_index":2333,"title":{},"body":{"controllers/SubscriptionController.html":{}}}],["this.subscriptionservice.createsubscriptionorder",{"_index":2345,"title":{},"body":{"controllers/SubscriptionController.html":{}}}],["this.subscriptionservice.createsubscriptionpayment",{"_index":2351,"title":{},"body":{"controllers/SubscriptionController.html":{}}}],["this.subscriptionservice.getactivesubscription(req.user.sub",{"_index":2336,"title":{},"body":{"controllers/SubscriptionController.html":{}}}],["this.subscriptionservice.getplans",{"_index":2341,"title":{},"body":{"controllers/SubscriptionController.html":{}}}],["this.subscriptionservice.getuserorders(req.user.sub",{"_index":2348,"title":{},"body":{"controllers/SubscriptionController.html":{}}}],["this.subscriptionservice.updatesubscriptionorderstatus",{"_index":1745,"title":{},"body":{"injectables/MercadopagoService.html":{}}}],["this.userrepo",{"_index":431,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["this.userrepo.count",{"_index":428,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["this.userrepo.create(data",{"_index":2575,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepo.find",{"_index":402,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["this.userrepo.findone",{"_index":423,"title":{},"body":{"injectables/AdminUserService.html":{},"injectables/UserService.html":{}}}],["this.userrepo.findoneby",{"_index":1859,"title":{},"body":{"injectables/PasswordResetService.html":{}}}],["this.userrepo.preload",{"_index":2576,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepo.save(user",{"_index":426,"title":{},"body":{"injectables/AdminUserService.html":{},"injectables/UserService.html":{}}}],["this.userrepo.update(userid",{"_index":2581,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.findone",{"_index":2180,"title":{},"body":{"injectables/PhotographerOrdersService.html":{}}}],["this.userrepository.findonebyorfail",{"_index":1140,"title":{},"body":{"injectables/BuyerOrdersService.html":{}}}],["this.userservice.create",{"_index":982,"title":{},"body":{"injectables/AuthService.html":{},"injectables/SeedService.html":{}}}],["this.userservice.findbyemail(dto.email",{"_index":976,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservice.findbyemail(email",{"_index":1012,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservice.findbyemail(u.email",{"_index":2259,"title":{},"body":{"injectables/SeedService.html":{}}}],["this.userservice.findbyid(userid",{"_index":608,"title":{},"body":{"injectables/AlbumAccessService.html":{},"injectables/AlbumService.html":{},"injectables/FilesService.html":{},"injectables/PaymentService.html":{},"injectables/PhotoService.html":{},"injectables/SubscriptionService.html":{},"controllers/UserController.html":{}}}],["this.userservice.update(userid",{"_index":1508,"title":{},"body":{"injectables/FilesService.html":{},"injectables/PhotoService.html":{},"controllers/UserController.html":{}}}],["throw",{"_index":289,"title":{},"body":{"injectables/AdminOrderService.html":{},"injectables/AdminUserService.html":{},"injectables/AlbumAccessService.html":{},"injectables/AlbumService.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/BuyerOrdersService.html":{},"controllers/FilesController.html":{},"injectables/FilesService.html":{},"injectables/LeadService.html":{},"injectables/MercadopagoService.html":{},"injectables/PasswordResetService.html":{},"injectables/PaymentService.html":{},"injectables/PhotoService.html":{},"injectables/PhotographerOrdersService.html":{},"guards/RolesGuard.html":{},"injectables/SubscriptionService.html":{},"injectables/UserService.html":{}}}],["thumbnailurl",{"_index":1315,"title":{},"body":{"injectables/BuyerOrdersService.html":{}}}],["ticket",{"_index":1241,"title":{},"body":{"injectables/BuyerOrdersService.html":{}}}],["tiene",{"_index":135,"title":{},"body":{"injectables/AdminAlbumService.html":{},"injectables/BuyerOrdersService.html":{},"injectables/PhotographerOrdersService.html":{}}}],["tienes",{"_index":1183,"title":{},"body":{"injectables/BuyerOrdersService.html":{},"injectables/PhotoService.html":{},"injectables/PhotographerOrdersService.html":{}}}],["time",{"_index":2579,"title":{},"body":{"injectables/UserService.html":{},"index.html":{}}}],["timestamp",{"_index":494,"title":{},"body":{"entities/Album.html":{},"entities/PaymentAccount.html":{},"entities/Subscription.html":{},"entities/User.html":{}}}],["title",{"_index":26,"title":{},"body":{"classes/AdminAlbumByIdDto.html":{},"classes/AdminAlbumDto.html":{},"interfaces/AdminAlbumSummaryDto.html":{},"interfaces/AdminPhotographerByIdDto.html":{},"classes/AdminUserDto.html":{},"injectables/AdminUserService.html":{},"entities/Album.html":{},"injectables/AlbumAccessService.html":{},"injectables/AlbumService.html":{},"classes/AlbumSummaryDto.html":{},"injectables/BuyerOrdersService.html":{},"classes/CreateAlbumDto.html":{},"classes/OrderItemResponseDto.html":{},"classes/OrderResponseDto.html":{},"classes/PriceOptionDto.html":{},"injectables/SubscriptionService.html":{},"injectables/UserService.html":{}}}],["todas",{"_index":757,"title":{},"body":{"injectables/AlbumService.html":{},"controllers/BuyerOrdersController.html":{},"injectables/PhotoService.html":{}}}],["token",{"_index":862,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/BuyerOrdersService.html":{},"injectables/PasswordResetService.html":{},"entities/PasswordResetToken.html":{},"injectables/PaymentService.html":{},"injectables/SubscriptionService.html":{}}}],["token.entity",{"_index":954,"title":{},"body":{"modules/AuthModule.html":{},"injectables/PasswordResetService.html":{},"entities/User.html":{}}}],["token.entity.ts",{"_index":1879,"title":{},"body":{"entities/PasswordResetToken.html":{},"coverage.html":{}}}],["token.entity.ts:14",{"_index":1883,"title":{},"body":{"entities/PasswordResetToken.html":{}}}],["token.entity.ts:17",{"_index":1884,"title":{},"body":{"entities/PasswordResetToken.html":{}}}],["token.entity.ts:20",{"_index":1882,"title":{},"body":{"entities/PasswordResetToken.html":{}}}],["token.entity.ts:23",{"_index":1881,"title":{},"body":{"entities/PasswordResetToken.html":{}}}],["token.entity.ts:27",{"_index":1886,"title":{},"body":{"entities/PasswordResetToken.html":{}}}],["token.expiresat",{"_index":1877,"title":{},"body":{"injectables/PasswordResetService.html":{}}}],["token.id",{"_index":1869,"title":{},"body":{"injectables/PasswordResetService.html":{}}}],["token.used",{"_index":1874,"title":{},"body":{"injectables/PasswordResetService.html":{}}}],["tokenexpiresat",{"_index":1383,"title":{},"body":{"classes/CreatePaymentAccountDto.html":{},"entities/PaymentAccount.html":{}}}],["tokenid",{"_index":1852,"title":{},"body":{"injectables/PasswordResetService.html":{}}}],["tokens",{"_index":1941,"title":{},"body":{"injectables/PaymentService.html":{}}}],["total",{"_index":47,"title":{},"body":{"classes/AdminAlbumByIdDto.html":{},"injectables/AdminOrderService.html":{},"injectables/AdminUserService.html":{},"classes/AlbumSummaryDto.html":{},"injectables/BuyerOrdersService.html":{},"injectables/MailService.html":{},"entities/Order.html":{},"classes/OrderItemResponseDto.html":{},"classes/OrderResponseDto.html":{},"injectables/PhotoService.html":{},"miscellaneous/functions.html":{}}}],["totalalbums",{"_index":117,"title":{},"body":{"injectables/AdminAlbumService.html":{}}}],["totalmb",{"_index":2088,"title":{},"body":{"injectables/PhotoService.html":{}}}],["totalorders",{"_index":27,"title":{},"body":{"classes/AdminAlbumByIdDto.html":{},"interfaces/AdminAlbumSummaryDto.html":{},"injectables/AdminOrderService.html":{},"interfaces/AdminPhotographerByIdDto.html":{},"injectables/AdminUserService.html":{}}}],["totalsize",{"_index":2137,"title":{},"body":{"injectables/PhotoService.html":{}}}],["totalsizemb",{"_index":2023,"title":{},"body":{"controllers/PhotoController.html":{},"injectables/PhotoService.html":{}}}],["totalusers",{"_index":427,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["touch",{"_index":2781,"title":{},"body":{"index.html":{}}}],["tradicional",{"_index":1001,"title":{},"body":{"injectables/AuthService.html":{}}}],["transformation",{"_index":1500,"title":{},"body":{"injectables/FilesService.html":{}}}],["transformer",{"_index":1345,"title":{},"body":{"classes/CreateAlbumDto.html":{},"classes/CreateOrderDto.html":{},"classes/OrderItemDto.html":{},"classes/PaginationDto.html":{},"classes/PriceOptionDto.html":{},"dependencies.html":{}}}],["true",{"_index":142,"title":{},"body":{"injectables/AdminAlbumService.html":{},"controllers/AdminUserController.html":{},"injectables/AdminUserService.html":{},"entities/Album.html":{},"injectables/AlbumAccessService.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/BuyerOrdersService.html":{},"classes/CreateAlbumDto.html":{},"classes/CreateOrderDto.html":{},"entities/Lead.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"classes/OrderItemDto.html":{},"classes/PaginationDto.html":{},"entities/PaymentAccount.html":{},"classes/PriceOptionDto.html":{},"guards/RolesGuard.html":{},"entities/Subscription.html":{},"entities/SubscriptionOrder.html":{},"entities/SubscriptionPlan.html":{},"injectables/SubscriptionService.html":{},"entities/User.html":{}}}],["true})@type(undefined",{"_index":1339,"title":{},"body":{"classes/CreateAlbumDto.html":{},"classes/CreateOrderDto.html":{}}}],["try",{"_index":132,"title":{},"body":{"injectables/AdminAlbumService.html":{},"injectables/AlbumService.html":{},"guards/AuthGuard.html":{},"injectables/BuyerOrdersService.html":{},"injectables/MailService.html":{},"controllers/MercadopagoController.html":{},"injectables/MercadopagoService.html":{},"injectables/PhotoService.html":{},"injectables/SubscriptionService.html":{}}}],["ts",{"_index":1714,"title":{},"body":{"injectables/MercadopagoService.html":{}}}],["ts:${ts",{"_index":1730,"title":{},"body":{"injectables/MercadopagoService.html":{}}}],["tspart",{"_index":1716,"title":{},"body":{"injectables/MercadopagoService.html":{}}}],["tspart?.substring(3",{"_index":1721,"title":{},"body":{"injectables/MercadopagoService.html":{}}}],["tu",{"_index":134,"title":{},"body":{"injectables/AdminAlbumService.html":{},"injectables/BuyerOrdersService.html":{},"injectables/FilesService.html":{},"injectables/MailService.html":{},"controllers/PhotoController.html":{},"injectables/SubscriptionService.html":{}}}],["tuvieron",{"_index":149,"title":{},"body":{"injectables/AdminAlbumService.html":{}}}],["twitter",{"_index":2787,"title":{},"body":{"index.html":{}}}],["type",{"_index":28,"title":{},"body":{"classes/AdminAlbumByIdDto.html":{},"classes/AdminAlbumDto.html":{},"injectables/AdminAlbumService.html":{},"interfaces/AdminAlbumSummaryDto.html":{},"controllers/AdminOrderController.html":{},"injectables/AdminOrderService.html":{},"interfaces/AdminPhotographerByIdDto.html":{},"controllers/AdminUserController.html":{},"classes/AdminUserDto.html":{},"injectables/AdminUserService.html":{},"entities/Album.html":{},"controllers/AlbumAccessController.html":{},"injectables/AlbumAccessService.html":{},"controllers/AlbumController.html":{},"injectables/AlbumService.html":{},"classes/AlbumSummaryDto.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/BaseUserDto.html":{},"controllers/BuyerOrdersController.html":{},"injectables/BuyerOrdersService.html":{},"classes/CreateAlbumDto.html":{},"classes/CreateLeadDto.html":{},"classes/CreateOrderDto.html":{},"classes/CreatePaymentAccountDto.html":{},"classes/CreatePhotoDto.html":{},"classes/CreateSubscriptionOrderDto.html":{},"classes/CreateUserDto.html":{},"controllers/FilesController.html":{},"injectables/FilesService.html":{},"entities/Lead.html":{},"controllers/LeadController.html":{},"injectables/LeadService.html":{},"classes/LoginDto.html":{},"injectables/MailService.html":{},"controllers/MercadopagoController.html":{},"injectables/MercadopagoService.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"classes/OrderItemDto.html":{},"classes/OrderItemResponseDto.html":{},"classes/OrderResponseDto.html":{},"classes/PaginationDto.html":{},"injectables/PasswordResetService.html":{},"entities/PasswordResetToken.html":{},"entities/PaymentAccount.html":{},"controllers/PaymentController.html":{},"injectables/PaymentService.html":{},"entities/Photo.html":{},"controllers/PhotoController.html":{},"injectables/PhotoService.html":{},"controllers/PhotographerOrdersController.html":{},"injectables/PhotographerOrdersService.html":{},"classes/PriceOptionDto.html":{},"guards/RolesGuard.html":{},"injectables/SeedService.html":{},"entities/Subscription.html":{},"controllers/SubscriptionController.html":{},"entities/SubscriptionOrder.html":{},"entities/SubscriptionPlan.html":{},"injectables/SubscriptionService.html":{},"classes/UpdateDeliveryStatusDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":2802,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeorm",{"_index":109,"title":{},"body":{"injectables/AdminAlbumService.html":{},"injectables/AdminOrderService.html":{},"injectables/AdminUserService.html":{},"entities/Album.html":{},"injectables/AlbumAccessService.html":{},"injectables/AlbumService.html":{},"injectables/BuyerOrdersService.html":{},"entities/Lead.html":{},"injectables/LeadService.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"injectables/PasswordResetService.html":{},"entities/PasswordResetToken.html":{},"entities/PaymentAccount.html":{},"injectables/PaymentService.html":{},"entities/Photo.html":{},"injectables/PhotoService.html":{},"injectables/PhotographerOrdersService.html":{},"injectables/SeedService.html":{},"entities/Subscription.html":{},"entities/SubscriptionOrder.html":{},"entities/SubscriptionPlan.html":{},"injectables/SubscriptionService.html":{},"entities/User.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":202,"title":{},"body":{"modules/AdminModule.html":{},"modules/AlbumModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/LeadModule.html":{},"modules/OrdersModule.html":{},"modules/PaymentModule.html":{},"modules/PhotoModule.html":{},"modules/SeedModule.html":{},"modules/SubscriptionModule.html":{},"modules/UserModule.html":{}}}],["typeormmodule.forfeature",{"_index":2362,"title":{},"body":{"modules/SubscriptionModule.html":{}}}],["typeormmodule.forfeature([album",{"_index":687,"title":{},"body":{"modules/AlbumModule.html":{}}}],["typeormmodule.forfeature([auth",{"_index":956,"title":{},"body":{"modules/AuthModule.html":{}}}],["typeormmodule.forfeature([lead",{"_index":1539,"title":{},"body":{"modules/LeadModule.html":{}}}],["typeormmodule.forfeature([order",{"_index":1834,"title":{},"body":{"modules/OrdersModule.html":{}}}],["typeormmodule.forfeature([paymentaccount",{"_index":1923,"title":{},"body":{"modules/PaymentModule.html":{}}}],["typeormmodule.forfeature([photo",{"_index":2043,"title":{},"body":{"modules/PhotoModule.html":{}}}],["typeormmodule.forfeature([subscriptionplan",{"_index":2232,"title":{},"body":{"modules/SeedModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":214,"title":{},"body":{"modules/AdminModule.html":{},"modules/UserModule.html":{}}}],["typeormmodule.forroot",{"_index":812,"title":{},"body":{"modules/AppModule.html":{}}}],["types",{"_index":2462,"title":{},"body":{"classes/UpdateAdminDto.html":{},"classes/UpdateAlbumDto.html":{},"classes/UpdateLeadDto.html":{},"classes/UpdateMercadopagoDto.html":{},"classes/UpdateOrderDto.html":{},"classes/UpdatePaymentDto.html":{},"classes/UpdatePhotoDto.html":{},"classes/UpdateSeedDto.html":{},"classes/UpdateSubscriptionDto.html":{},"classes/UpdateUserDto.html":{},"dependencies.html":{}}}],["typescript",{"_index":2674,"title":{},"body":{"index.html":{}}}],["u",{"_index":2258,"title":{},"body":{"injectables/SeedService.html":{}}}],["u.email",{"_index":2262,"title":{},"body":{"injectables/SeedService.html":{}}}],["u.id",{"_index":614,"title":{},"body":{"injectables/AlbumAccessService.html":{}}}],["u.name",{"_index":2264,"title":{},"body":{"injectables/SeedService.html":{}}}],["u.role",{"_index":2263,"title":{},"body":{"injectables/SeedService.html":{}}}],["un",{"_index":714,"title":{},"body":{"injectables/AlbumService.html":{},"entities/OrderItem.html":{},"injectables/PaymentService.html":{},"entities/Photo.html":{},"injectables/PhotoService.html":{}}}],["una",{"_index":1080,"title":{},"body":{"controllers/BuyerOrdersController.html":{},"injectables/BuyerOrdersService.html":{},"controllers/MercadopagoController.html":{},"injectables/PhotoService.html":{},"injectables/PhotographerOrdersService.html":{},"injectables/SubscriptionService.html":{}}}],["unauthorizedexception",{"_index":587,"title":{},"body":{"injectables/AlbumAccessService.html":{},"guards/AuthGuard.html":{},"injectables/PaymentService.html":{}}}],["unauthorizedexception('bearer",{"_index":930,"title":{},"body":{"guards/AuthGuard.html":{}}}],["unauthorizedexception('cuenta",{"_index":1972,"title":{},"body":{"injectables/PaymentService.html":{}}}],["unauthorizedexception('invalid",{"_index":600,"title":{},"body":{"injectables/AlbumAccessService.html":{}}}],["unauthorizedexception('token",{"_index":943,"title":{},"body":{"guards/AuthGuard.html":{}}}],["unauthorizedexception('usuario",{"_index":940,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/PaymentService.html":{}}}],["undefined",{"_index":131,"title":{},"body":{"injectables/AdminAlbumService.html":{},"injectables/AdminUserService.html":{},"entities/Order.html":{},"entities/PaymentAccount.html":{},"entities/SubscriptionOrder.html":{},"entities/User.html":{}}}],["unique",{"_index":535,"title":{},"body":{"entities/Album.html":{},"entities/Lead.html":{},"entities/User.html":{}}}],["uniqueid",{"_index":1485,"title":{},"body":{"injectables/FilesService.html":{}}}],["unit",{"_index":2689,"title":{},"body":{"index.html":{}}}],["unit_price",{"_index":1208,"title":{},"body":{"injectables/BuyerOrdersService.html":{},"injectables/SubscriptionService.html":{}}}],["unitprice",{"_index":777,"title":{},"body":{"classes/AlbumSummaryDto.html":{},"injectables/BuyerOrdersService.html":{},"classes/CreateOrderDto.html":{},"entities/OrderItem.html":{},"classes/OrderItemDto.html":{},"classes/OrderItemResponseDto.html":{},"classes/OrderResponseDto.html":{}}}],["unknown",{"_index":62,"title":{},"body":{"controllers/AdminAlbumController.html":{},"injectables/AdminAlbumService.html":{},"controllers/AdminOrderController.html":{},"injectables/AdminOrderService.html":{},"controllers/AdminUserController.html":{},"injectables/AdminUserService.html":{},"controllers/AlbumAccessController.html":{},"injectables/AlbumAccessService.html":{},"controllers/AlbumController.html":{},"injectables/AlbumService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/BuyerOrdersController.html":{},"injectables/BuyerOrdersService.html":{},"classes/CreatePaymentAccountDto.html":{},"controllers/FilesController.html":{},"injectables/FilesService.html":{},"controllers/LeadController.html":{},"injectables/LeadService.html":{},"injectables/MailService.html":{},"controllers/MercadopagoController.html":{},"controllers/PaymentController.html":{},"injectables/PaymentService.html":{},"controllers/PhotoController.html":{},"injectables/PhotoService.html":{},"controllers/PhotographerOrdersController.html":{},"injectables/PhotographerOrdersService.html":{},"controllers/SeedController.html":{},"injectables/SeedService.html":{},"controllers/SubscriptionController.html":{},"injectables/SubscriptionService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["unlicensed",{"_index":2800,"title":{},"body":{"properties.html":{}}}],["update",{"_index":633,"title":{},"body":{"controllers/AlbumController.html":{},"injectables/AlbumService.html":{},"injectables/UserService.html":{}}}],["update(id",{"_index":649,"title":{},"body":{"controllers/AlbumController.html":{},"injectables/AlbumService.html":{}}}],["update(template",{"_index":1733,"title":{},"body":{"injectables/MercadopagoService.html":{}}}],["update(userid",{"_index":2558,"title":{},"body":{"injectables/UserService.html":{}}}],["updateadmindto",{"_index":2456,"title":{"classes/UpdateAdminDto.html":{}},"body":{"classes/UpdateAdminDto.html":{},"coverage.html":{}}}],["updatealbumdto",{"_index":650,"title":{"classes/UpdateAlbumDto.html":{}},"body":{"controllers/AlbumController.html":{},"injectables/AlbumService.html":{},"classes/UpdateAlbumDto.html":{},"coverage.html":{}}}],["updated",{"_index":1279,"title":{},"body":{"injectables/BuyerOrdersService.html":{},"injectables/SubscriptionService.html":{}}}],["updatedalbum",{"_index":747,"title":{},"body":{"injectables/AlbumService.html":{}}}],["updatedalbum.clientemail",{"_index":752,"title":{},"body":{"injectables/AlbumService.html":{}}}],["updatedalbum.clientphonenumber",{"_index":753,"title":{},"body":{"injectables/AlbumService.html":{}}}],["updatedalbum.description",{"_index":751,"title":{},"body":{"injectables/AlbumService.html":{}}}],["updatedalbum.id",{"_index":749,"title":{},"body":{"injectables/AlbumService.html":{}}}],["updatedalbum.isactivefolder",{"_index":754,"title":{},"body":{"injectables/AlbumService.html":{}}}],["updatedalbum.title",{"_index":750,"title":{},"body":{"injectables/AlbumService.html":{}}}],["updatedat",{"_index":409,"title":{},"body":{"injectables/AdminUserService.html":{},"entities/Album.html":{},"entities/Order.html":{},"entities/PaymentAccount.html":{},"entities/Subscription.html":{},"entities/SubscriptionOrder.html":{},"entities/User.html":{},"injectables/UserService.html":{}}}],["updatedata",{"_index":2559,"title":{},"body":{"injectables/UserService.html":{}}}],["updatedatecolumn",{"_index":525,"title":{},"body":{"entities/Album.html":{},"entities/Order.html":{},"entities/PaymentAccount.html":{},"entities/Subscription.html":{},"entities/SubscriptionOrder.html":{},"entities/User.html":{}}}],["updatedeliverystatus",{"_index":2150,"title":{},"body":{"controllers/PhotographerOrdersController.html":{},"injectables/PhotographerOrdersService.html":{}}}],["updatedeliverystatus(photographerid",{"_index":2178,"title":{},"body":{"injectables/PhotographerOrdersService.html":{}}}],["updatedeliverystatus(req",{"_index":2156,"title":{},"body":{"controllers/PhotographerOrdersController.html":{}}}],["updatedeliverystatusdto",{"_index":2157,"title":{"classes/UpdateDeliveryStatusDto.html":{}},"body":{"controllers/PhotographerOrdersController.html":{},"classes/UpdateDeliveryStatusDto.html":{},"coverage.html":{}}}],["updateleaddto",{"_index":2468,"title":{"classes/UpdateLeadDto.html":{}},"body":{"classes/UpdateLeadDto.html":{},"coverage.html":{}}}],["updateme",{"_index":2531,"title":{},"body":{"controllers/UserController.html":{}}}],["updateme(@req",{"_index":2541,"title":{},"body":{"controllers/UserController.html":{}}}],["updateme(req",{"_index":2534,"title":{},"body":{"controllers/UserController.html":{}}}],["updatemercadopagodto",{"_index":2471,"title":{"classes/UpdateMercadopagoDto.html":{}},"body":{"classes/UpdateMercadopagoDto.html":{},"coverage.html":{}}}],["updateorderdto",{"_index":2475,"title":{"classes/UpdateOrderDto.html":{}},"body":{"classes/UpdateOrderDto.html":{},"coverage.html":{}}}],["updateorderstatus",{"_index":1102,"title":{},"body":{"injectables/BuyerOrdersService.html":{}}}],["updateorderstatus(orderid",{"_index":1122,"title":{},"body":{"injectables/BuyerOrdersService.html":{}}}],["updatepasswordresetrequestedat",{"_index":2550,"title":{},"body":{"injectables/UserService.html":{}}}],["updatepasswordresetrequestedat(userid",{"_index":2561,"title":{},"body":{"injectables/UserService.html":{}}}],["updatepaymentdto",{"_index":2478,"title":{"classes/UpdatePaymentDto.html":{}},"body":{"classes/UpdatePaymentDto.html":{},"coverage.html":{}}}],["updatephotodto",{"_index":2482,"title":{"classes/UpdatePhotoDto.html":{}},"body":{"classes/UpdatePhotoDto.html":{},"coverage.html":{}}}],["updates",{"_index":2761,"title":{},"body":{"index.html":{}}}],["updateseeddto",{"_index":2486,"title":{"classes/UpdateSeedDto.html":{}},"body":{"classes/UpdateSeedDto.html":{},"coverage.html":{}}}],["updatesubscriptiondto",{"_index":2490,"title":{"classes/UpdateSubscriptionDto.html":{}},"body":{"classes/UpdateSubscriptionDto.html":{},"coverage.html":{}}}],["updatesubscriptionorderstatus",{"_index":2387,"title":{},"body":{"injectables/SubscriptionService.html":{}}}],["updatesubscriptionorderstatus(orderid",{"_index":2407,"title":{},"body":{"injectables/SubscriptionService.html":{}}}],["updateuserdto",{"_index":2494,"title":{"classes/UpdateUserDto.html":{}},"body":{"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["upload",{"_index":2047,"title":{},"body":{"injectables/PhotoService.html":{}}}],["upload(file",{"_index":2056,"title":{},"body":{"injectables/PhotoService.html":{}}}],["uploadedfile",{"_index":1422,"title":{},"body":{"controllers/FilesController.html":{},"controllers/PhotoController.html":{}}}],["uploadedfiles",{"_index":2008,"title":{},"body":{"controllers/PhotoController.html":{}}}],["uploadedtocloud",{"_index":2097,"title":{},"body":{"injectables/PhotoService.html":{}}}],["uploadedtocloud.map((p",{"_index":2103,"title":{},"body":{"injectables/PhotoService.html":{}}}],["uploadfile",{"_index":1417,"title":{},"body":{"controllers/FilesController.html":{}}}],["uploadfile(@uploadedfile",{"_index":1431,"title":{},"body":{"controllers/FilesController.html":{}}}],["uploadfile(file",{"_index":1418,"title":{},"body":{"controllers/FilesController.html":{}}}],["uploadimage",{"_index":1450,"title":{},"body":{"injectables/FilesService.html":{}}}],["uploadimage(file",{"_index":1455,"title":{},"body":{"injectables/FilesService.html":{}}}],["uploadmultiple",{"_index":1992,"title":{},"body":{"controllers/PhotoController.html":{},"injectables/PhotoService.html":{}}}],["uploadmultiple(files",{"_index":2001,"title":{},"body":{"controllers/PhotoController.html":{},"injectables/PhotoService.html":{}}}],["uploadphoto",{"_index":1993,"title":{},"body":{"controllers/PhotoController.html":{}}}],["uploadphoto(file",{"_index":2005,"title":{},"body":{"controllers/PhotoController.html":{}}}],["uploadstream",{"_index":1493,"title":{},"body":{"injectables/FilesService.html":{}}}],["uploadstream.end(file.buffer",{"_index":1505,"title":{},"body":{"injectables/FilesService.html":{}}}],["url",{"_index":86,"title":{},"body":{"classes/AdminAlbumDto.html":{},"classes/AdminUserDto.html":{},"injectables/AdminUserService.html":{},"injectables/AlbumAccessService.html":{},"classes/AlbumSummaryDto.html":{},"modules/AppModule.html":{},"injectables/BuyerOrdersService.html":{},"classes/CreatePhotoDto.html":{},"injectables/FilesService.html":{},"controllers/MercadopagoController.html":{},"injectables/MercadopagoService.html":{},"classes/OrderItemResponseDto.html":{},"classes/OrderResponseDto.html":{},"entities/Photo.html":{},"injectables/PhotoService.html":{},"injectables/UserService.html":{}}}],["urlthumbnail",{"_index":625,"title":{},"body":{"injectables/AlbumAccessService.html":{},"injectables/FilesService.html":{},"entities/Photo.html":{},"injectables/PhotoService.html":{}}}],["urlweb",{"_index":174,"title":{},"body":{"interfaces/AdminAlbumSummaryDto.html":{},"interfaces/AdminPhotographerByIdDto.html":{},"injectables/AlbumAccessService.html":{},"injectables/FilesService.html":{},"entities/Photo.html":{},"injectables/PhotoService.html":{}}}],["usa",{"_index":927,"title":{},"body":{"guards/AuthGuard.html":{}}}],["usado",{"_index":1876,"title":{},"body":{"injectables/PasswordResetService.html":{},"injectables/PhotoService.html":{}}}],["usamos",{"_index":1214,"title":{},"body":{"injectables/BuyerOrdersService.html":{}}}],["usando",{"_index":2087,"title":{},"body":{"injectables/PhotoService.html":{}}}],["usar",{"_index":1477,"title":{},"body":{"injectables/FilesService.html":{}}}],["used",{"_index":1880,"title":{},"body":{"entities/PasswordResetToken.html":{}}}],["useguards",{"_index":237,"title":{},"body":{"controllers/AdminOrderController.html":{},"controllers/AdminUserController.html":{},"controllers/AlbumAccessController.html":{},"controllers/AlbumController.html":{},"controllers/AuthController.html":{},"controllers/BuyerOrdersController.html":{},"controllers/FilesController.html":{},"controllers/PaymentController.html":{},"controllers/PhotoController.html":{},"controllers/PhotographerOrdersController.html":{},"controllers/SubscriptionController.html":{},"controllers/UserController.html":{}}}],["useguards(authguard",{"_index":247,"title":{},"body":{"controllers/AdminOrderController.html":{},"controllers/AdminUserController.html":{},"controllers/AlbumAccessController.html":{},"controllers/AlbumController.html":{},"controllers/BuyerOrdersController.html":{},"controllers/FilesController.html":{},"controllers/PaymentController.html":{},"controllers/PhotoController.html":{},"controllers/PhotographerOrdersController.html":{},"controllers/SubscriptionController.html":{},"controllers/UserController.html":{}}}],["useguards(authguard)@delete('/album/:albumid",{"_index":1995,"title":{},"body":{"controllers/PhotoController.html":{}}}],["useguards(authguard)@delete(':id",{"_index":639,"title":{},"body":{"controllers/AlbumController.html":{},"controllers/BuyerOrdersController.html":{},"controllers/PhotoController.html":{}}}],["useguards(authguard)@get",{"_index":643,"title":{},"body":{"controllers/AlbumController.html":{},"controllers/BuyerOrdersController.html":{},"controllers/PhotoController.html":{}}}],["useguards(authguard)@get('/:albumid",{"_index":558,"title":{},"body":{"controllers/AlbumAccessController.html":{}}}],["useguards(authguard)@get(':id",{"_index":1059,"title":{},"body":{"controllers/BuyerOrdersController.html":{},"controllers/PhotographerOrdersController.html":{}}}],["useguards(authguard)@get(':id/verify",{"_index":1062,"title":{},"body":{"controllers/BuyerOrdersController.html":{}}}],["useguards(authguard)@get(':term",{"_index":646,"title":{},"body":{"controllers/AlbumController.html":{}}}],["useguards(authguard)@get('me",{"_index":2323,"title":{},"body":{"controllers/SubscriptionController.html":{},"controllers/UserController.html":{}}}],["useguards(authguard)@get('mercadopago/callback",{"_index":1908,"title":{},"body":{"controllers/PaymentController.html":{}}}],["useguards(authguard)@get('my",{"_index":2154,"title":{},"body":{"controllers/PhotographerOrdersController.html":{}}}],["useguards(authguard)@get('orders",{"_index":2325,"title":{},"body":{"controllers/SubscriptionController.html":{}}}],["useguards(authguard)@patch(':id",{"_index":651,"title":{},"body":{"controllers/AlbumController.html":{}}}],["useguards(authguard)@patch(':id/delivery",{"_index":2158,"title":{},"body":{"controllers/PhotographerOrdersController.html":{}}}],["useguards(authguard)@patch('change",{"_index":2310,"title":{},"body":{"controllers/SubscriptionController.html":{}}}],["useguards(authguard)@patch('me",{"_index":2535,"title":{},"body":{"controllers/UserController.html":{}}}],["useguards(authguard)@post",{"_index":636,"title":{},"body":{"controllers/AlbumController.html":{},"controllers/BuyerOrdersController.html":{}}}],["useguards(authguard)@post('/grant",{"_index":561,"title":{},"body":{"controllers/AlbumAccessController.html":{}}}],["useguards(authguard)@post('create",{"_index":2313,"title":{},"body":{"controllers/SubscriptionController.html":{}}}],["useguards(authguard)@post('orders",{"_index":2317,"title":{},"body":{"controllers/SubscriptionController.html":{}}}],["useguards(authguard)@post('orders/:id/pay",{"_index":2320,"title":{},"body":{"controllers/SubscriptionController.html":{}}}],["useguards(authguard)@post('upload",{"_index":2002,"title":{},"body":{"controllers/PhotoController.html":{}}}],["useguards(authguard)@post('upload')@useinterceptors(undefined",{"_index":1420,"title":{},"body":{"controllers/FilesController.html":{}}}],["useguards(authguard)@post('upload/:albumid')@useinterceptors(undefined",{"_index":2006,"title":{},"body":{"controllers/PhotoController.html":{}}}],["useinterceptors",{"_index":1423,"title":{},"body":{"controllers/FilesController.html":{},"controllers/PhotoController.html":{}}}],["useinterceptors(fileinterceptor('file",{"_index":1430,"title":{},"body":{"controllers/FilesController.html":{}}}],["user",{"_index":170,"title":{"entities/User.html":{}},"body":{"interfaces/AdminAlbumSummaryDto.html":{},"modules/AdminModule.html":{},"interfaces/AdminPhotographerByIdDto.html":{},"injectables/AdminUserService.html":{},"entities/Album.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BuyerOrdersService.html":{},"injectables/FilesService.html":{},"entities/Order.html":{},"modules/OrdersModule.html":{},"injectables/PasswordResetService.html":{},"entities/PasswordResetToken.html":{},"entities/PaymentAccount.html":{},"injectables/PaymentService.html":{},"injectables/PhotographerOrdersService.html":{},"guards/RolesGuard.html":{},"entities/Subscription.html":{},"entities/SubscriptionOrder.html":{},"injectables/SubscriptionService.html":{},"entities/User.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["user.accessiblealbums",{"_index":549,"title":{},"body":{"entities/Album.html":{}}}],["user.accessiblealbums)@jointable",{"_index":486,"title":{},"body":{"entities/Album.html":{}}}],["user.albums",{"_index":510,"title":{},"body":{"entities/Album.html":{}}}],["user.albums.foreach((album",{"_index":456,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["user.albums.map((album",{"_index":462,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["user.albums?.length",{"_index":2828,"title":{},"body":{"miscellaneous/variables.html":{}}}],["user.controller",{"_index":2547,"title":{},"body":{"modules/UserModule.html":{}}}],["user.dto",{"_index":399,"title":{},"body":{"injectables/AdminUserService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/SeedService.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["user.dto.ts",{"_index":74,"title":{},"body":{"classes/AdminAlbumDto.html":{},"classes/AdminUserDto.html":{},"classes/BaseUserDto.html":{},"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["user.dto.ts:10",{"_index":81,"title":{},"body":{"classes/AdminAlbumDto.html":{}}}],["user.dto.ts:13",{"_index":1406,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:14",{"_index":376,"title":{},"body":{"classes/AdminUserDto.html":{}}}],["user.dto.ts:15",{"_index":375,"title":{},"body":{"classes/AdminUserDto.html":{}}}],["user.dto.ts:16",{"_index":377,"title":{},"body":{"classes/AdminUserDto.html":{}}}],["user.dto.ts:17",{"_index":378,"title":{},"body":{"classes/AdminUserDto.html":{},"classes/BaseUserDto.html":{}}}],["user.dto.ts:18",{"_index":374,"title":{},"body":{"classes/AdminUserDto.html":{},"classes/CreateUserDto.html":{}}}],["user.dto.ts:21",{"_index":1026,"title":{},"body":{"classes/BaseUserDto.html":{},"classes/CreateUserDto.html":{}}}],["user.dto.ts:24",{"_index":1030,"title":{},"body":{"classes/BaseUserDto.html":{}}}],["user.dto.ts:25",{"_index":1409,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:28",{"_index":1025,"title":{},"body":{"classes/BaseUserDto.html":{}}}],["user.dto.ts:29",{"_index":1408,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:3",{"_index":80,"title":{},"body":{"classes/AdminAlbumDto.html":{}}}],["user.dto.ts:32",{"_index":1024,"title":{},"body":{"classes/BaseUserDto.html":{}}}],["user.dto.ts:36",{"_index":1027,"title":{},"body":{"classes/BaseUserDto.html":{}}}],["user.dto.ts:4",{"_index":85,"title":{},"body":{"classes/AdminAlbumDto.html":{}}}],["user.dto.ts:40",{"_index":1032,"title":{},"body":{"classes/BaseUserDto.html":{}}}],["user.dto.ts:5",{"_index":78,"title":{},"body":{"classes/AdminAlbumDto.html":{}}}],["user.dto.ts:6",{"_index":83,"title":{},"body":{"classes/AdminAlbumDto.html":{}}}],["user.dto.ts:7",{"_index":82,"title":{},"body":{"classes/AdminAlbumDto.html":{}}}],["user.dto.ts:8",{"_index":84,"title":{},"body":{"classes/AdminAlbumDto.html":{}}}],["user.dto.ts:9",{"_index":79,"title":{},"body":{"classes/AdminAlbumDto.html":{}}}],["user.email",{"_index":435,"title":{},"body":{"injectables/AdminUserService.html":{},"injectables/PasswordResetService.html":{}}}],["user.id",{"_index":465,"title":{},"body":{"injectables/AdminUserService.html":{},"injectables/SubscriptionService.html":{}}}],["user.image",{"_index":436,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["user.isactive",{"_index":425,"title":{},"body":{"injectables/AdminUserService.html":{},"injectables/AuthService.html":{}}}],["user.name",{"_index":434,"title":{},"body":{"injectables/AdminUserService.html":{},"injectables/SubscriptionService.html":{}}}],["user.orders",{"_index":1752,"title":{},"body":{"entities/Order.html":{}}}],["user.password",{"_index":1006,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.passwordresetrequestedat",{"_index":1016,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.passwordresetrequestedat.gettime",{"_index":1019,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.paymentaccounts",{"_index":1901,"title":{},"body":{"entities/PaymentAccount.html":{}}}],["user.provider",{"_index":1002,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.resettokens",{"_index":1885,"title":{},"body":{"entities/PasswordResetToken.html":{}}}],["user.role",{"_index":466,"title":{},"body":{"injectables/AdminUserService.html":{},"miscellaneous/variables.html":{}}}],["user.service",{"_index":2537,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["user.storageusedmb",{"_index":1509,"title":{},"body":{"injectables/FilesService.html":{}}}],["user.subscriptions",{"_index":2300,"title":{},"body":{"entities/Subscription.html":{}}}],["user.subscriptions.find((sub",{"_index":2814,"title":{},"body":{"miscellaneous/variables.html":{}}}],["user.subscriptions?.length",{"_index":2812,"title":{},"body":{"miscellaneous/variables.html":{}}}],["user/dto/base",{"_index":2239,"title":{},"body":{"injectables/SeedService.html":{}}}],["user/entities/user.entity",{"_index":203,"title":{},"body":{"modules/AdminModule.html":{},"injectables/AdminUserService.html":{},"entities/Album.html":{},"entities/Order.html":{}}}],["user/user.module",{"_index":800,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/FilesModule.html":{},"modules/SeedModule.html":{}}}],["user/user.service",{"_index":973,"title":{},"body":{"injectables/AuthService.html":{},"injectables/FilesService.html":{},"injectables/SeedService.html":{},"injectables/SubscriptionService.html":{}}}],["usercontroller",{"_index":2528,"title":{"controllers/UserController.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["userevent",{"_index":484,"title":{},"body":{"entities/Album.html":{},"controllers/AlbumAccessController.html":{},"injectables/AlbumAccessService.html":{},"injectables/AlbumService.html":{},"classes/CreateAlbumDto.html":{},"classes/PriceOptionDto.html":{}}}],["userhelpers",{"_index":708,"title":{},"body":{"injectables/AlbumService.html":{},"injectables/BuyerOrdersService.html":{},"injectables/FilesService.html":{},"injectables/PhotoService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userhelpers.cancreatealbum(photographer",{"_index":717,"title":{},"body":{"injectables/AlbumService.html":{}}}],["userhelpers.canupload(user",{"_index":1479,"title":{},"body":{"injectables/FilesService.html":{}}}],["userhelpers.getactivesubscription(user",{"_index":2819,"title":{},"body":{"miscellaneous/variables.html":{}}}],["userhelpers.getfeepercentage(photographer",{"_index":1219,"title":{},"body":{"injectables/BuyerOrdersService.html":{}}}],["userhelpers.getmaxphotosperalbum(photographer",{"_index":2063,"title":{},"body":{"injectables/PhotoService.html":{}}}],["userhelpers.getmaxstoragemb",{"_index":1484,"title":{},"body":{"injectables/FilesService.html":{}}}],["userhelpers.getmaxstoragemb(photographer",{"_index":2093,"title":{},"body":{"injectables/PhotoService.html":{}}}],["userid",{"_index":397,"title":{},"body":{"injectables/AdminUserService.html":{},"controllers/AlbumAccessController.html":{},"injectables/AlbumAccessService.html":{},"controllers/AlbumController.html":{},"injectables/AlbumService.html":{},"controllers/FilesController.html":{},"injectables/FilesService.html":{},"injectables/PasswordResetService.html":{},"controllers/PaymentController.html":{},"injectables/PaymentService.html":{},"controllers/PhotoController.html":{},"injectables/PhotoService.html":{},"controllers/SubscriptionController.html":{},"injectables/SubscriptionService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["usermodule",{"_index":680,"title":{"modules/UserModule.html":{}},"body":{"modules/AlbumModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/FilesModule.html":{},"modules/PaymentModule.html":{},"modules/PhotoModule.html":{},"modules/SeedModule.html":{},"modules/SubscriptionModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["userrepo",{"_index":385,"title":{},"body":{"injectables/AdminUserService.html":{},"injectables/PasswordResetService.html":{},"injectables/UserService.html":{}}}],["userrepository",{"_index":1110,"title":{},"body":{"injectables/BuyerOrdersService.html":{},"injectables/PhotographerOrdersService.html":{}}}],["userrole",{"_index":1028,"title":{},"body":{"classes/BaseUserDto.html":{},"classes/CreateUserDto.html":{},"injectables/SeedService.html":{},"miscellaneous/enumerations.html":{}}}],["userrole.buyer",{"_index":2253,"title":{},"body":{"injectables/SeedService.html":{}}}],["userrole.photographer",{"_index":2244,"title":{},"body":{"injectables/SeedService.html":{}}}],["users",{"_index":358,"title":{},"body":{"controllers/AdminUserController.html":{},"injectables/AdminUserService.html":{},"controllers/UserController.html":{}}}],["users.map((user",{"_index":405,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["userservice",{"_index":579,"title":{"injectables/UserService.html":{}},"body":{"injectables/AlbumAccessService.html":{},"injectables/AlbumService.html":{},"injectables/AuthService.html":{},"injectables/FilesService.html":{},"injectables/PaymentService.html":{},"injectables/PhotoService.html":{},"injectables/SeedService.html":{},"injectables/SubscriptionService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["userstocreate",{"_index":2241,"title":{},"body":{"injectables/SeedService.html":{}}}],["using",{"_index":2753,"title":{},"body":{"index.html":{}}}],["usuario",{"_index":540,"title":{},"body":{"entities/Album.html":{},"injectables/AlbumAccessService.html":{},"injectables/AlbumService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/PaymentService.html":{},"injectables/SubscriptionService.html":{}}}],["usuarios",{"_index":546,"title":{},"body":{"entities/Album.html":{},"injectables/SeedService.html":{}}}],["uuid",{"_index":1857,"title":{},"body":{"injectables/PasswordResetService.html":{}}}],["v1",{"_index":1715,"title":{},"body":{"injectables/MercadopagoService.html":{}}}],["v1part",{"_index":1719,"title":{},"body":{"injectables/MercadopagoService.html":{}}}],["v1part?.substring(3",{"_index":1722,"title":{},"body":{"injectables/MercadopagoService.html":{}}}],["v2",{"_index":1457,"title":{},"body":{"injectables/FilesService.html":{}}}],["v4",{"_index":1856,"title":{},"body":{"injectables/PasswordResetService.html":{}}}],["vacío",{"_index":1635,"title":{},"body":{"controllers/MercadopagoController.html":{}}}],["valida",{"_index":2066,"title":{},"body":{"injectables/PhotoService.html":{}}}],["validamos",{"_index":1090,"title":{},"body":{"controllers/BuyerOrdersController.html":{}}}],["validando",{"_index":1636,"title":{},"body":{"controllers/MercadopagoController.html":{}}}],["validar",{"_index":937,"title":{},"body":{"guards/AuthGuard.html":{},"controllers/FilesController.html":{},"injectables/FilesService.html":{},"injectables/PhotoService.html":{},"injectables/PhotographerOrdersService.html":{},"injectables/SubscriptionService.html":{}}}],["validatenested",{"_index":1350,"title":{},"body":{"classes/CreateAlbumDto.html":{},"classes/CreateOrderDto.html":{},"classes/OrderItemDto.html":{},"classes/PriceOptionDto.html":{}}}],["validator",{"_index":1037,"title":{},"body":{"classes/BaseUserDto.html":{},"classes/CreateAlbumDto.html":{},"classes/CreateLeadDto.html":{},"classes/CreateOrderDto.html":{},"classes/CreatePaymentAccountDto.html":{},"classes/CreatePhotoDto.html":{},"classes/CreateSubscriptionOrderDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"classes/OrderItemDto.html":{},"classes/PaginationDto.html":{},"injectables/PasswordResetService.html":{},"classes/PriceOptionDto.html":{},"classes/UpdateDeliveryStatusDto.html":{},"dependencies.html":{}}}],["validroles",{"_index":242,"title":{},"body":{"controllers/AdminOrderController.html":{},"controllers/AdminUserController.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["value",{"_index":228,"title":{},"body":{"controllers/AdminOrderController.html":{},"injectables/AlbumService.html":{},"injectables/MailService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":2605,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":2806,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["vencido",{"_index":1945,"title":{},"body":{"injectables/PaymentService.html":{}}}],["vendedor",{"_index":1252,"title":{},"body":{"injectables/BuyerOrdersService.html":{}}}],["verificación",{"_index":1009,"title":{},"body":{"injectables/AuthService.html":{},"controllers/MercadopagoController.html":{}}}],["verificado",{"_index":1644,"title":{},"body":{"controllers/MercadopagoController.html":{}}}],["verificar",{"_index":1143,"title":{},"body":{"injectables/BuyerOrdersService.html":{}}}],["verifypayment",{"_index":1047,"title":{},"body":{"controllers/BuyerOrdersController.html":{},"injectables/BuyerOrdersService.html":{}}}],["verifypayment(@param('id",{"_index":1084,"title":{},"body":{"controllers/BuyerOrdersController.html":{}}}],["verifypayment(orderid",{"_index":1061,"title":{},"body":{"controllers/BuyerOrdersController.html":{},"injectables/BuyerOrdersService.html":{}}}],["version",{"_index":2798,"title":{},"body":{"properties.html":{}}}],["video",{"_index":2747,"title":{},"body":{"index.html":{}}}],["viene",{"_index":1077,"title":{},"body":{"controllers/BuyerOrdersController.html":{},"controllers/MercadopagoController.html":{}}}],["vinculada",{"_index":1202,"title":{},"body":{"injectables/BuyerOrdersService.html":{},"injectables/PaymentService.html":{}}}],["visible",{"_index":140,"title":{},"body":{"injectables/AdminAlbumService.html":{}}}],["visit",{"_index":2736,"title":{},"body":{"index.html":{}}}],["vista",{"_index":1514,"title":{},"body":{"injectables/FilesService.html":{}}}],["visualize",{"_index":2750,"title":{},"body":{"index.html":{}}}],["válido",{"_index":1934,"title":{},"body":{"injectables/PaymentService.html":{}}}],["waittimeminutes",{"_index":1014,"title":{},"body":{"injectables/AuthService.html":{}}}],["watch",{"_index":2684,"title":{},"body":{"index.html":{}}}],["webhook",{"_index":1641,"title":{},"body":{"controllers/MercadopagoController.html":{},"injectables/MercadopagoService.html":{}}}],["webp",{"_index":1436,"title":{},"body":{"controllers/FilesController.html":{},"injectables/FilesService.html":{},"injectables/PhotoService.html":{}}}],["website",{"_index":2785,"title":{},"body":{"index.html":{}}}],["weburl",{"_index":1313,"title":{},"body":{"injectables/BuyerOrdersService.html":{}}}],["where('order.status",{"_index":318,"title":{},"body":{"injectables/AdminOrderService.html":{}}}],["where('photo.id",{"_index":1149,"title":{},"body":{"injectables/BuyerOrdersService.html":{}}}],["where('user.role",{"_index":444,"title":{},"body":{"injectables/AdminUserService.html":{}}}],["where.album",{"_index":279,"title":{},"body":{"injectables/AdminOrderService.html":{}}}],["where.buyer",{"_index":278,"title":{},"body":{"injectables/AdminOrderService.html":{}}}],["where.status",{"_index":276,"title":{},"body":{"injectables/AdminOrderService.html":{}}}],["working",{"_index":2735,"title":{},"body":{"index.html":{}}}],["x",{"_index":2763,"title":{},"body":{"index.html":{}}}],["xito",{"_index":1193,"title":{},"body":{"injectables/BuyerOrdersService.html":{}}}],["y",{"_index":762,"title":{},"body":{"injectables/AlbumService.html":{},"injectables/MercadopagoService.html":{},"injectables/PhotoService.html":{}}}],["ya",{"_index":612,"title":{},"body":{"injectables/AlbumAccessService.html":{},"injectables/AlbumService.html":{},"injectables/AuthService.html":{},"injectables/LeadService.html":{},"injectables/PasswordResetService.html":{},"injectables/PhotoService.html":{},"injectables/SubscriptionService.html":{}}}],["yes",{"_index":229,"title":{},"body":{"controllers/AdminOrderController.html":{},"injectables/MailService.html":{},"injectables/PhotoService.html":{},"miscellaneous/functions.html":{}}}],["you'd",{"_index":2777,"title":{},"body":{"index.html":{}}}],["you're",{"_index":2694,"title":{},"body":{"index.html":{}}}],["zoom",{"_index":196,"title":{},"body":{"modules/AdminModule.html":{},"modules/AlbumModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/FilesModule.html":{},"modules/LeadModule.html":{},"modules/MailModule.html":{},"modules/MercadopagoModule.html":{},"modules/OrdersModule.html":{},"modules/PaymentModule.html":{},"modules/PhotoModule.html":{},"modules/SeedModule.html":{},"modules/SubscriptionModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/Admin.html":{"url":"classes/Admin.html","title":"class - Admin","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Admin\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/admin/entities/admin.entity.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class Admin {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AdminAlbumByIdDto.html":{"url":"classes/AdminAlbumByIdDto.html","title":"class - AdminAlbumByIdDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AdminAlbumByIdDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/admin/dto/admin-album-by-id.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                clientEmail\n                            \n                            \n                                clientPhoneNumber\n                            \n                            \n                                description\n                            \n                            \n                                eventDate\n                            \n                            \n                                id\n                            \n                            \n                                orders\n                            \n                            \n                                    Optional\n                                portada\n                            \n                            \n                                prices\n                            \n                            \n                                title\n                            \n                            \n                                totalOrders\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        clientEmail\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/admin/dto/admin-album-by-id.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        clientPhoneNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/admin/dto/admin-album-by-id.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/admin/dto/admin-album-by-id.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        eventDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                    \n                        \n                                Defined in src/admin/dto/admin-album-by-id.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/admin/dto/admin-album-by-id.dto.ts:3\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        orders\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type[]\n\n                    \n                \n                    \n                        \n                                Defined in src/admin/dto/admin-album-by-id.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        portada\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/admin/dto/admin-album-by-id.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        prices\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type[]\n\n                    \n                \n                    \n                        \n                                Defined in src/admin/dto/admin-album-by-id.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/admin/dto/admin-album-by-id.dto.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        totalOrders\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/admin/dto/admin-album-by-id.dto.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class AdminAlbumByIdDto {\n  id: string;\n  title: string;\n  description: string;\n  eventDate: Date;\n  portada?: string;\n\n  prices: { size: string; price: number }[];\n  clientEmail: string;\n  clientPhoneNumber: string;\n\n  totalOrders: number;\n\n  orders: {\n    id: string;\n    status: string;\n    total: number;\n    createdAt: Date;\n  }[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AdminAlbumController.html":{"url":"controllers/AdminAlbumController.html","title":"controller - AdminAlbumController","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Controllers\n  AdminAlbumController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/admin/adminAlbum.controller.ts\n        \n            \n                Prefix\n            \n            \n                admin/albums\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                getAlbumStats\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getAlbumStats\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAlbumStats()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('stats')\n                \n            \n\n                    \n                        \n                            Defined in src/admin/adminAlbum.controller.ts:10\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        // adminAlbum.controller.ts\nimport { Controller, Get } from '@nestjs/common';\nimport { AdminAlbumService } from './adminAlbum.service';\n\n@Controller('admin/albums')\nexport class AdminAlbumController {\n  constructor(private readonly adminAlbumService: AdminAlbumService) {}\n\n  @Get('stats')\n  async getAlbumStats() {\n    return this.adminAlbumService.getStats();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AdminAlbumDto.html":{"url":"classes/AdminAlbumDto.html","title":"class - AdminAlbumDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AdminAlbumDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/admin/dto/admin-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                description\n                            \n                            \n                                eventDate\n                            \n                            \n                                id\n                            \n                            \n                                photos\n                            \n                            \n                                priceDigital\n                            \n                            \n                                prices\n                            \n                            \n                                    Optional\n                                priceSchoolSports\n                            \n                            \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/admin/dto/admin-user.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        eventDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/admin/dto/admin-user.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/admin/dto/admin-user.dto.ts:3\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        photos\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type[]\n\n                    \n                \n                    \n                        \n                                Defined in src/admin/dto/admin-user.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        priceDigital\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/admin/dto/admin-user.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        prices\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type[]\n\n                    \n                \n                    \n                        \n                                Defined in src/admin/dto/admin-user.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        priceSchoolSports\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/admin/dto/admin-user.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/admin/dto/admin-user.dto.ts:4\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class AdminAlbumDto {\n  id: string;\n  title: string;\n  description?: string;\n  prices: { size: string; price: number }[];\n  priceDigital: number;\n  priceSchoolSports?: number;\n  eventDate: string;\n  photos: { id: string; url: string }[];\n}\n\nexport class AdminUserDto {\n  id: string;\n  email: string;\n  name: string;\n  role: 'buyer' | 'photographer' | 'SUPER_ADMIN';\n  accessibleAlbums?: AdminAlbumDto[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AdminAlbumService.html":{"url":"injectables/AdminAlbumService.html","title":"injectable - AdminAlbumService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Injectables\n  AdminAlbumService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/admin/adminAlbum.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getStats\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(albumRepo: Repository, orderRepo: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/admin/adminAlbum.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        albumRepo\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        orderRepo\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getStats\n                        \n                    \n                \n            \n            \n                \n                        \n                    getStats()\n                \n            \n\n\n                    \n                        \n                            Defined in src/admin/adminAlbum.service.ts:17\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { Album } from '../album/entities/album.entity';\nimport { Order } from '../order/entities/order.entity';\n\n@Injectable()\nexport class AdminAlbumService {\n  constructor(\n    @InjectRepository(Album)\n    private readonly albumRepo: Repository,\n    @InjectRepository(Order)\n    private readonly orderRepo: Repository,\n  ) {}\n\n  async getStats() {\n    const totalAlbums = await this.albumRepo.count();\n\n    // Intentamos contar albums activos si existe la columna isActive (no romper si no existe)\n    let activeAlbums: number | undefined = undefined;\n    try {\n      // Ajustá 'isActive' si tu columna tiene otro nombre (ej. published, visible)\n      activeAlbums = await this.albumRepo.count({\n        where: { isActiveFolder: true },\n      });\n    } catch (e) {\n      activeAlbums = undefined;\n    }\n\n    // Cantidad de álbumes que tuvieron al menos 1 orden (contar DISTINCT album.id desde orders)\n    const raw = await this.orderRepo\n      .createQueryBuilder('order')\n      .select('COUNT(DISTINCT order.albumId)', 'albumsWithOrders')\n      .getRawOne();\n\n    const albumsWithOrders = parseInt(raw?.albumsWithOrders ?? '0', 10);\n\n    return { totalAlbums, activeAlbums, albumsWithOrders };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/AdminAlbumSummaryDto.html":{"url":"interfaces/AdminAlbumSummaryDto.html","title":"interface - AdminAlbumSummaryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  AdminAlbumSummaryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/admin/dto/admin-user-by-id.dto.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            coverUrl\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            description\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            title\n                                        \n                                \n                                \n                                        \n                                            totalOrders\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        coverUrl\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        coverUrl:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        description\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        description:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        title\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        title:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        totalOrders\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        totalOrders:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface AdminAlbumSummaryDto {\n  id: string;\n  title: string;\n  description?: string;\n  totalOrders: number;\n  coverUrl?: string; // 👈 portada del álbum (urlWeb de la primera foto)\n}\n\nexport interface AdminPhotographerByIdDto {\n  id: string;\n  name: string;\n  email: string;\n  image: string;\n  role: string;\n  isActive: boolean;\n  totalOrders: number;\n  pendingOrders: number;\n  approvedOrders: number;\n  rejectedOrders: number;\n  albums: AdminAlbumSummaryDto[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AdminModule.html":{"url":"modules/AdminModule.html","title":"module - AdminModule","body":"\n                   \n\n\n\n\n\n\n\n\n    Modules\n    AdminModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AdminModule\n\n\n\ncluster_AdminModule_providers\n\n\n\n\nAdminAlbumService\n\nAdminAlbumService\n\n\n\nAdminModule\n\nAdminModule\n\nAdminModule -->\n\nAdminAlbumService->AdminModule\n\n\n\n\n\nAdminOrderService\n\nAdminOrderService\n\nAdminModule -->\n\nAdminOrderService->AdminModule\n\n\n\n\n\nAdminUserService\n\nAdminUserService\n\nAdminModule -->\n\nAdminUserService->AdminModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/admin/admin.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AdminAlbumService\n                        \n                        \n                            AdminOrderService\n                        \n                        \n                            AdminUserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AdminUserController\n                        \n                        \n                            AdminOrderController\n                        \n                        \n                            AdminAlbumController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\n\nimport { User } from '../user/entities/user.entity';\nimport { AdminUserService } from './admin.service';\nimport { AdminUserController } from './admin.controller';\nimport { Order } from 'src/order/entities/order.entity';\nimport { AdminOrderController } from './adminOrder.controller';\nimport { AdminOrderService } from './adminOrder.service';\nimport { Album } from 'src/album/entities/album.entity';\nimport { AdminAlbumService } from './adminAlbum.service';\nimport { AdminAlbumController } from './adminAlbum.controller';\nimport { AlbumModule } from 'src/album/album.module';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([User, Order, Album])],\n  controllers: [\n    AdminUserController,\n    AdminOrderController,\n    AdminAlbumController,\n  ],\n  providers: [AdminUserService, AdminOrderService, AdminAlbumService],\n})\nexport class AdminModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AdminOrderController.html":{"url":"controllers/AdminOrderController.html","title":"controller - AdminOrderController","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Controllers\n  AdminOrderController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/admin/adminOrder.controller.ts\n        \n            \n                Prefix\n            \n            \n                admin/orders\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Async\n                                getAllOrders\n                            \n                            \n                                    \n                                    \n                                    Async\n                                getOrderById\n                            \n                            \n                                    \n                                    \n                                    Async\n                                getOrderStats\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        getAllOrders\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAllOrders(status?: string, photographerId?: string, clientId?: string, page: number, limit: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@Roles(ValidRoles.SUPER_ADMIN)\n                \n            \n\n                    \n                        \n                            Defined in src/admin/adminOrder.controller.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                status\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                photographerId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                clientId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    1\n                                            \n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    10\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        getOrderById\n                        \n                    \n                \n            \n            \n                \n                        \n                    getOrderById(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@Roles(ValidRoles.SUPER_ADMIN)\n                \n            \n\n                    \n                        \n                            Defined in src/admin/adminOrder.controller.ts:33\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        getOrderStats\n                        \n                    \n                \n            \n            \n                \n                        \n                    getOrderStats()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('stats/dashboard')@Roles(ValidRoles.SUPER_ADMIN)\n                \n            \n\n                    \n                        \n                            Defined in src/admin/adminOrder.controller.ts:39\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Param, Query, UseGuards } from '@nestjs/common';\nimport { AuthGuard } from '../common/guards/auth.guard';\nimport { Roles } from '../common/decorators/roles.decorator';\nimport { ValidRoles } from '../common/enums/roles.enum';\nimport { RolesGuard } from '../common/guards/roles.guard';\nimport { AdminOrderService } from './adminOrder.service';\n\n@Controller('admin/orders')\n@UseGuards(AuthGuard, RolesGuard)\nexport class AdminOrderController {\n  constructor(private readonly adminOrderService: AdminOrderService) {}\n\n  @Get()\n  @Roles(ValidRoles.SUPER_ADMIN)\n  async getAllOrders(\n    @Query('status') status?: string,\n    @Query('photographerId') photographerId?: string,\n    @Query('clientId') clientId?: string,\n    @Query('page') page = 1,\n    @Query('limit') limit = 10,\n  ) {\n    return this.adminOrderService.findAll({\n      status,\n      photographerId,\n      clientId,\n      page,\n      limit,\n    });\n  }\n\n  @Get(':id')\n  @Roles(ValidRoles.SUPER_ADMIN)\n  async getOrderById(@Param('id') id: string) {\n    return this.adminOrderService.findById(id);\n  }\n\n  @Get('stats/dashboard')\n  @Roles(ValidRoles.SUPER_ADMIN)\n  async getOrderStats() {\n    return this.adminOrderService.getStats();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AdminOrderService.html":{"url":"injectables/AdminOrderService.html","title":"injectable - AdminOrderService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Injectables\n  AdminOrderService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/admin/adminOrder.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findById\n                            \n                            \n                                    Async\n                                getStats\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(orderRepo: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/admin/adminOrder.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        orderRepo\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(undefined: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/admin/adminOrder.service.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findById(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/admin/adminOrder.service.ts:45\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getStats\n                        \n                    \n                \n            \n            \n                \n                        \n                    getStats()\n                \n            \n\n\n                    \n                        \n                            Defined in src/admin/adminOrder.service.ts:62\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { Order } from '../order/entities/order.entity';\n\n@Injectable()\nexport class AdminOrderService {\n  constructor(\n    @InjectRepository(Order)\n    private readonly orderRepo: Repository,\n  ) {}\n\n  // findAll (igual que tenías, pero normalizamos status a lowercase)\n  async findAll({\n    status,\n    photographerId,\n    clientId,\n    page = 1,\n    limit = 10,\n  }: any) {\n    const where: any = {};\n\n    if (status) where.status = (status as string).toLowerCase();\n    if (clientId) where.buyer = { id: clientId };\n    if (photographerId) where.album = { photographer: { id: photographerId } };\n\n    const [orders, total] = await this.orderRepo.findAndCount({\n      where,\n      relations: [\n        'buyer',\n        'album',\n        'album.photographer',\n        'items',\n        // 'items.photo',\n      ],\n      order: { createdAt: 'DESC' },\n      skip: (page - 1) * limit,\n      take: limit,\n    });\n\n    return { orders, total, page, limit };\n  }\n\n  async findById(id: string) {\n    const order = await this.orderRepo.findOne({\n      where: { id },\n      relations: [\n        'buyer',\n        'album',\n        'album.photographer',\n        'items',\n        // 'items.photo',\n      ],\n    });\n\n    if (!order) throw new NotFoundException('Pedido no encontrado');\n    return order;\n  }\n\n  // Métricas ampliadas\n  async getStats() {\n    const totalOrders = await this.orderRepo.count();\n\n    const pendingCount = await this.orderRepo.count({\n      where: { status: 'pending' },\n    });\n    const approvedCount = await this.orderRepo.count({\n      where: { status: 'approved' },\n    });\n    const rejectedCount = await this.orderRepo.count({\n      where: { status: 'rejected' },\n    });\n    const cancelledCount = await this.orderRepo.count({\n      where: { status: 'cancelled' },\n    });\n\n    // deliveryStatus counts\n    const deliveryPending = await this.orderRepo.count({\n      where: { deliveryStatus: 'pending' },\n    });\n    const deliveryInProgress = await this.orderRepo.count({\n      where: { deliveryStatus: 'in_progress' },\n    });\n    const deliveryDelivered = await this.orderRepo.count({\n      where: { deliveryStatus: 'delivered' },\n    });\n\n    // Ingresos: sumatoria de total según estado\n    const approvedRaw = await this.orderRepo\n      .createQueryBuilder('order')\n      .select('COALESCE(SUM(order.total), 0)', 'income')\n      .where('order.status = :status', { status: 'approved' })\n      .getRawOne();\n    const pendingRaw = await this.orderRepo\n      .createQueryBuilder('order')\n      .select('COALESCE(SUM(order.total), 0)', 'income')\n      .where('order.status = :status', { status: 'pending' })\n      .getRawOne();\n\n    const incomeApproved = parseFloat(approvedRaw?.income ?? 0);\n    const incomePending = parseFloat(pendingRaw?.income ?? 0);\n\n    return {\n      totalOrders,\n      pendingCount,\n      approvedCount,\n      rejectedCount,\n      cancelledCount,\n      delivery: {\n        pending: deliveryPending,\n        in_progress: deliveryInProgress,\n        delivered: deliveryDelivered,\n      },\n      income: {\n        approved: incomeApproved,\n        pending: incomePending,\n        total: incomeApproved + incomePending, // opcional\n      },\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/AdminPhotographerByIdDto.html":{"url":"interfaces/AdminPhotographerByIdDto.html","title":"interface - AdminPhotographerByIdDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  AdminPhotographerByIdDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/admin/dto/admin-user-by-id.dto.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            albums\n                                        \n                                \n                                \n                                        \n                                            approvedOrders\n                                        \n                                \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            image\n                                        \n                                \n                                \n                                        \n                                            isActive\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            pendingOrders\n                                        \n                                \n                                \n                                        \n                                            rejectedOrders\n                                        \n                                \n                                \n                                        \n                                            role\n                                        \n                                \n                                \n                                        \n                                            totalOrders\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        albums\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        albums:         AdminAlbumSummaryDto[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         AdminAlbumSummaryDto[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        approvedOrders\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        approvedOrders:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        image\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        image:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        isActive\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        isActive:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        pendingOrders\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        pendingOrders:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        rejectedOrders\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        rejectedOrders:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        role\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        role:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        totalOrders\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        totalOrders:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface AdminAlbumSummaryDto {\n  id: string;\n  title: string;\n  description?: string;\n  totalOrders: number;\n  coverUrl?: string; // 👈 portada del álbum (urlWeb de la primera foto)\n}\n\nexport interface AdminPhotographerByIdDto {\n  id: string;\n  name: string;\n  email: string;\n  image: string;\n  role: string;\n  isActive: boolean;\n  totalOrders: number;\n  pendingOrders: number;\n  approvedOrders: number;\n  rejectedOrders: number;\n  albums: AdminAlbumSummaryDto[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AdminUserController.html":{"url":"controllers/AdminUserController.html","title":"controller - AdminUserController","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Controllers\n  AdminUserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/admin/admin.controller.ts\n        \n            \n                Prefix\n            \n            \n                admin\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Async\n                                activateUser\n                            \n                            \n                                    \n                                    \n                                    Async\n                                deactivateUser\n                            \n                            \n                                    \n                                    \n                                    Async\n                                getAlbumById\n                            \n                            \n                                    \n                                    \n                                    Async\n                                getAllStats\n                            \n                            \n                                    \n                                    \n                                    Async\n                                getAllUsers\n                            \n                            \n                                    \n                                    \n                                    Async\n                                getPhotographerById\n                            \n                            \n                                    \n                                    \n                                    Async\n                                getPhotographers\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        activateUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    activateUser(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('users/:id/activate')@Roles(ValidRoles.SUPER_ADMIN)\n                \n            \n\n                    \n                        \n                            Defined in src/admin/admin.controller.ts:56\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        deactivateUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    deactivateUser(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('users/:id/deactivate')@Roles(ValidRoles.SUPER_ADMIN)\n                \n            \n\n                    \n                        \n                            Defined in src/admin/admin.controller.ts:62\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        getAlbumById\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAlbumById(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('albums/:id')@Roles(ValidRoles.SUPER_ADMIN)\n                \n            \n\n                    \n                        \n                            Defined in src/admin/admin.controller.ts:50\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        getAllStats\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAllStats()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/stats')@Roles(ValidRoles.SUPER_ADMIN)\n                \n            \n\n                    \n                        \n                            Defined in src/admin/admin.controller.ts:28\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        getAllUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAllUsers()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/users')@Roles(ValidRoles.SUPER_ADMIN)\n                \n            \n\n                    \n                        \n                            Defined in src/admin/admin.controller.ts:22\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        getPhotographerById\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPhotographerById(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('photographers/:id')@Roles(ValidRoles.SUPER_ADMIN)\n                \n            \n\n                    \n                        \n                            Defined in src/admin/admin.controller.ts:44\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        getPhotographers\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPhotographers()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('photographers')@Roles(ValidRoles.SUPER_ADMIN)\n                \n            \n\n                    \n                        \n                            Defined in src/admin/admin.controller.ts:38\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Param, Post, UseGuards } from '@nestjs/common';\nimport { AuthGuard } from '../common/guards/auth.guard';\n\nimport { Roles } from '../common/decorators/roles.decorator';\nimport { ValidRoles } from '../common/enums/roles.enum';\nimport { AdminUserService } from './admin.service';\nimport { RolesGuard } from 'src/common/guards/roles.guard';\nimport { AdminOrderService } from './adminOrder.service';\nimport { AdminAlbumService } from './adminAlbum.service';\n\n@Controller('admin')\n@UseGuards(AuthGuard, RolesGuard)\nexport class AdminUserController {\n  constructor(\n    private readonly adminUserService: AdminUserService,\n    private readonly adminOrderService: AdminOrderService,\n    private readonly adminAlbumService: AdminAlbumService,\n  ) {}\n\n  @Get('/users')\n  @Roles(ValidRoles.SUPER_ADMIN)\n  async getAllUsers() {\n    return this.adminUserService.findAll();\n  }\n\n  @Get('/stats')\n  @Roles(ValidRoles.SUPER_ADMIN)\n  async getAllStats() {\n    const orders = await this.adminOrderService.getStats();\n    const albums = await this.adminAlbumService.getStats();\n    const users = await this.adminUserService.getStats();\n\n    return { orders, albums, users };\n  }\n\n  @Get('photographers')\n  @Roles(ValidRoles.SUPER_ADMIN)\n  async getPhotographers() {\n    return this.adminUserService.getAllPhotographers();\n  }\n\n  @Get('photographers/:id')\n  @Roles(ValidRoles.SUPER_ADMIN)\n  async getPhotographerById(@Param('id') id: string) {\n    return this.adminUserService.getPhotographerById(id);\n  }\n\n  @Get('albums/:id')\n  @Roles(ValidRoles.SUPER_ADMIN)\n  async getAlbumById(@Param('id') id: string) {\n    return this.adminUserService.getAlbumByIdForAdmin(id);\n  }\n\n  @Post('users/:id/activate')\n  @Roles(ValidRoles.SUPER_ADMIN)\n  async activateUser(@Param('id') id: string) {\n    return this.adminUserService.setActiveStatus(id, true);\n  }\n\n  @Post('users/:id/deactivate')\n  @Roles(ValidRoles.SUPER_ADMIN)\n  async deactivateUser(@Param('id') id: string) {\n    return this.adminUserService.setActiveStatus(id, false);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AdminUserDto.html":{"url":"classes/AdminUserDto.html","title":"class - AdminUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AdminUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/admin/dto/admin-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                accessibleAlbums\n                            \n                            \n                                email\n                            \n                            \n                                id\n                            \n                            \n                                name\n                            \n                            \n                                role\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        accessibleAlbums\n                        \n                    \n                \n            \n                \n                    \n                        Type :         AdminAlbumDto[]\n\n                    \n                \n                    \n                        \n                                Defined in src/admin/dto/admin-user.dto.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/admin/dto/admin-user.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/admin/dto/admin-user.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/admin/dto/admin-user.dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :     \"buyer\" | \"photographer\" | \"SUPER_ADMIN\"\n\n                    \n                \n                    \n                        \n                                Defined in src/admin/dto/admin-user.dto.ts:17\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class AdminAlbumDto {\n  id: string;\n  title: string;\n  description?: string;\n  prices: { size: string; price: number }[];\n  priceDigital: number;\n  priceSchoolSports?: number;\n  eventDate: string;\n  photos: { id: string; url: string }[];\n}\n\nexport class AdminUserDto {\n  id: string;\n  email: string;\n  name: string;\n  role: 'buyer' | 'photographer' | 'SUPER_ADMIN';\n  accessibleAlbums?: AdminAlbumDto[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AdminUserService.html":{"url":"injectables/AdminUserService.html","title":"injectable - AdminUserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Injectables\n  AdminUserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/admin/admin.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                getAlbumByIdForAdmin\n                            \n                            \n                                    Async\n                                getAllPhotographers\n                            \n                            \n                                    Async\n                                getPhotographerById\n                            \n                            \n                                    Async\n                                getStats\n                            \n                            \n                                    Async\n                                setActiveStatus\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepo: Repository, albumRepo: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/admin/admin.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepo\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        albumRepo\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/admin/admin.service.ts:20\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getAlbumByIdForAdmin\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAlbumByIdForAdmin(albumId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/admin/admin.service.ts:162\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                albumId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getAllPhotographers\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAllPhotographers()\n                \n            \n\n\n                    \n                        \n                            Defined in src/admin/admin.service.ts:78\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getPhotographerById\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPhotographerById(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/admin/admin.service.ts:108\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getStats\n                        \n                    \n                \n            \n            \n                \n                        \n                    getStats()\n                \n            \n\n\n                    \n                        \n                            Defined in src/admin/admin.service.ts:68\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        setActiveStatus\n                        \n                    \n                \n            \n            \n                \n                        \n                    setActiveStatus(userId: string, active: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/admin/admin.service.ts:60\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                active\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { User } from '../user/entities/user.entity';\nimport { Album } from 'src/album/entities/album.entity';\nimport { AdminAlbumDto, AdminUserDto } from './dto/admin-user.dto';\nimport { AdminPhotographerByIdDto } from './dto/admin-user-by-id.dto';\nimport { AdminAlbumByIdDto } from './dto/admin-album-by-id.dto';\n\n@Injectable()\nexport class AdminUserService {\n  constructor(\n    @InjectRepository(User)\n    private readonly userRepo: Repository,\n\n    @InjectRepository(Album)\n    private readonly albumRepo: Repository,\n  ) {}\n\n  async findAll(): Promise {\n    const users = await this.userRepo.find({\n      relations: ['orders', 'paymentAccounts', 'albums', 'subscriptions'],\n    });\n\n    return users.map((user) => {\n      const {\n        password,\n        provider,\n        passwordResetRequestedAt,\n        createdAt,\n        updatedAt,\n        storageUsedMb,\n        accessibleAlbums,\n        ...safeUser\n      } = user;\n\n      const formattedAlbums: AdminAlbumDto[] = accessibleAlbums?.map(\n        (album) => ({\n          id: album.id,\n          title: album.title,\n          description: album.description,\n          prices: album.prices,\n          priceDigital: album.priceDigital,\n          priceSchoolSports: album.priceSchoolSports,\n          eventDate: album.eventDate,\n          photos: album.photos?.map((photo) => ({\n            id: photo.id,\n            url: photo.url,\n          })),\n        }),\n      );\n\n      return {\n        ...safeUser,\n        accessibleAlbums: formattedAlbums,\n      };\n    });\n  }\n\n  async setActiveStatus(userId: string, active: boolean) {\n    const user = await this.userRepo.findOne({ where: { id: userId } });\n    if (!user) throw new NotFoundException('Usuario no encontrado');\n\n    user.isActive = active;\n    return this.userRepo.save(user);\n  }\n\n  async getStats() {\n    const totalUsers = await this.userRepo.count();\n    const photographers = await this.userRepo.count({\n      where: { role: 'photographer' },\n    });\n    const buyers = await this.userRepo.count({ where: { role: 'buyer' } });\n\n    return { totalUsers, photographers, buyers };\n  }\n\n  async getAllPhotographers() {\n    const photographers = await this.userRepo\n      .createQueryBuilder('user')\n      .select(['user.id', 'user.name', 'user.email', 'user.image'])\n      .leftJoin('user.albums', 'album')\n      .leftJoin('album.orders', 'order')\n      .addSelect('COUNT(order.id)', 'totalOrders')\n      .addSelect(\n        `SUM(CASE WHEN order.status = 'pending' THEN 1 ELSE 0 END)`,\n        'pendingOrders',\n      )\n      .addSelect(\n        `SUM(CASE WHEN order.status = 'approved' THEN 1 ELSE 0 END)`,\n        'approvedOrders',\n      )\n      .where('user.role = :role', { role: 'photographer' })\n      .groupBy('user.id')\n      .getRawMany();\n\n    return photographers.map((p) => ({\n      id: p.user_id,\n      name: p.user_name,\n      email: p.user_email,\n      image: p.user_image,\n      totalOrders: parseInt(p.totalOrders, 10),\n      pendingOrders: parseInt(p.pendingOrders, 10),\n      approvedOrders: parseInt(p.approvedOrders, 10),\n    }));\n  }\n\n  async getPhotographerById(id: string): Promise {\n    const user = await this.userRepo.findOne({\n      where: { id, role: 'photographer' },\n      relations: {\n        albums: {\n          orders: true,\n          photos: true,\n        },\n      },\n    });\n\n    if (!user) throw new NotFoundException('Fotógrafo no encontrado');\n\n    let totalOrders = 0;\n    let pendingOrders = 0;\n    let approvedOrders = 0;\n    let rejectedOrders = 0;\n\n    user.albums.forEach((album) => {\n      totalOrders += album.orders.length;\n      pendingOrders += album.orders.filter(\n        (o) => o.status === 'pending',\n      ).length;\n      approvedOrders += album.orders.filter(\n        (o) => o.status === 'approved',\n      ).length;\n      rejectedOrders += album.orders.filter(\n        (o) => o.status === 'rejected',\n      ).length;\n    });\n\n    const albums = user.albums.map((album) => ({\n      id: album.id,\n      title: album.title,\n      description: album.description || '',\n      totalOrders: album.orders.length,\n      coverUrl: album.photos.length > 0 ? album.photos[0].urlWeb : undefined,\n    }));\n\n    return {\n      id: user.id,\n      name: user.name,\n      email: user.email,\n      image: user.image,\n      role: user.role,\n      isActive: user.isActive,\n      totalOrders,\n      pendingOrders,\n      approvedOrders,\n      rejectedOrders,\n      albums,\n    };\n  }\n\n  async getAlbumByIdForAdmin(albumId: string): Promise {\n    const album = await this.albumRepo.findOne({\n      where: { id: albumId },\n      relations: ['photos', 'orders', 'photographer'],\n    });\n\n    if (!album) throw new NotFoundException('Álbum no encontrado');\n\n    return {\n      id: album.id,\n      title: album.title,\n      prices: album.prices,\n      description: album.description || '',\n      eventDate: new Date(album.eventDate),\n      clientEmail: album.clientEmail,\n      clientPhoneNumber: album.clientPhoneNumber,\n      portada: album.photos.length > 0 ? album.photos[0].urlWeb : undefined,\n      totalOrders: album.orders.length,\n      orders: album.orders.map((o) => ({\n        id: o.id,\n        status: o.status,\n        deliveryStatus: o.deliveryStatus,\n        total: o.total,\n        createdAt: o.createdAt,\n      })),\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Album.html":{"url":"entities/Album.html","title":"entity - Album","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Entities\n  Album\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/album/entities/album.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                accessibleUsers\n                            \n                            \n                                    \n                                clientEmail\n                            \n                            \n                                    \n                                clientPhoneNumber\n                            \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                    Optional\n                                deletedAt\n                            \n                            \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                eventDate\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                isActiveFolder\n                            \n                            \n                                    \n                                orders\n                            \n                            \n                                    \n                                passwordEventHash\n                            \n                            \n                                    \n                                photographer\n                            \n                            \n                                    \n                                photographerId\n                            \n                            \n                                    \n                                photos\n                            \n                            \n                                    \n                                photosCount\n                            \n                            \n                                    \n                                priceDigital\n                            \n                            \n                                    \n                                prices\n                            \n                            \n                                    \n                                    Optional\n                                priceSchoolSports\n                            \n                            \n                                    \n                                title\n                            \n                            \n                                    \n                                updatedAt\n                            \n                            \n                                    \n                                userEvent\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        accessibleUsers\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, user => user.accessibleAlbums)@JoinTable()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/album/entities/album.entity.ts:73\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        clientEmail\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/album/entities/album.entity.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        clientPhoneNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/album/entities/album.entity.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/album/entities/album.entity.ts:82\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        deletedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'timestamp', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/album/entities/album.entity.ts:58\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/album/entities/album.entity.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        eventDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'date'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/album/entities/album.entity.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/album/entities/album.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        isActiveFolder\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/album/entities/album.entity.ts:55\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        orders\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Order[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, order => order.album, {cascade: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/album/entities/album.entity.ts:79\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        passwordEventHash\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/album/entities/album.entity.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        photographer\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.albums)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/album/entities/album.entity.ts:68\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        photographerId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/album/entities/album.entity.ts:61\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        photos\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Photo[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, photo => photo.album, {cascade: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/album/entities/album.entity.ts:76\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        photosCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'int', default: 0})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/album/entities/album.entity.ts:64\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        priceDigital\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('float')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/album/entities/album.entity.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        prices\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('jsonb')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/album/entities/album.entity.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        priceSchoolSports\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('float')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/album/entities/album.entity.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/album/entities/album.entity.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/album/entities/album.entity.ts:85\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        userEvent\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/album/entities/album.entity.ts:28\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  CreateDateColumn,\n  Entity,\n  Index,\n  JoinTable,\n  ManyToMany,\n  ManyToOne,\n  OneToMany,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from 'typeorm';\n\nimport { User } from '../../user/entities/user.entity';\nimport { Photo } from 'src/photo/entities/photo.entity';\nimport { Order } from '../../order/entities/order.entity';\n\n@Entity()\n@Index(['userEvent', 'photographerId'], { unique: true }) // 🔹 índice único por fotógrafo\nexport class Album {\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n\n  @Column({ unique: true })\n  title: string;\n\n  @Column()\n  userEvent: string; // Usuario para acceder al álbum\n\n  @Column()\n  passwordEventHash: string; // Contraseña hasheada para acceder\n\n  @Column('jsonb')\n  prices: { size: string; price: number }[];\n\n  @Column('float')\n  priceDigital: number;\n\n  @Column('float')\n  priceSchoolSports?: number;\n\n  @Column({ type: 'date' })\n  eventDate: string;\n\n  @Column()\n  clientEmail: string;\n\n  @Column()\n  clientPhoneNumber: string;\n\n  @Column({ nullable: true })\n  description?: string;\n\n  @Column({ default: true })\n  isActiveFolder: boolean;\n\n  @Column({ type: 'timestamp', nullable: true })\n  deletedAt?: Date;\n\n  @Column()\n  photographerId: string;\n\n  @Column({ type: 'int', default: 0 })\n  photosCount: number;\n\n  // Fotógrafo dueño del álbum\n  @ManyToOne(() => User, (user) => user.albums)\n  photographer: User;\n\n  // Usuarios que pueden acceder a este álbum\n  @ManyToMany(() => User, (user) => user.accessibleAlbums)\n  @JoinTable()\n  accessibleUsers: User[];\n\n  @OneToMany(() => Photo, (photo) => photo.album, { cascade: true })\n  photos: Photo[];\n\n  @OneToMany(() => Order, (order) => order.album, { cascade: true })\n  orders: Order[];\n\n  @CreateDateColumn()\n  createdAt: Date;\n\n  @UpdateDateColumn()\n  updatedAt: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AlbumAccessController.html":{"url":"controllers/AlbumAccessController.html","title":"controller - AlbumAccessController","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Controllers\n  AlbumAccessController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/album/album-access.controller.ts\n        \n            \n                Prefix\n            \n            \n                album-access\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Async\n                                getAlbum\n                            \n                            \n                                    \n                                    \n                                    Async\n                                grantAccess\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        getAlbum\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAlbum(albumId: string, req: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(AuthGuard)@Get('/:albumId')\n                \n            \n\n                    \n                        \n                            Defined in src/album/album-access.controller.ts:33\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                albumId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        grantAccess\n                        \n                    \n                \n            \n            \n                \n                        \n                    grantAccess(body: literal type, req: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(AuthGuard)@Post('/grant')\n                \n            \n\n                    \n                        \n                            Defined in src/album/album-access.controller.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Get,\n  Param,\n  Post,\n  Request,\n  UseGuards,\n} from '@nestjs/common';\nimport { AuthGuard } from 'src/common/guards/auth.guard';\nimport { AlbumAccessService } from './album-access.service';\n\n@Controller('album-access')\nexport class AlbumAccessController {\n  constructor(private readonly albumAccessService: AlbumAccessService) {}\n\n  @UseGuards(AuthGuard)\n  @Post('/grant')\n  async grantAccess(\n    @Body() body: { userEvent: string; passwordEvent: string },\n    @Request() req: any,\n  ) {\n    const userId = req.user.sub;\n    return this.albumAccessService.grantAccess(\n      userId,\n      body.userEvent,\n      body.passwordEvent,\n    );\n  }\n\n  @UseGuards(AuthGuard)\n  @Get('/:albumId')\n  async getAlbum(@Param('albumId') albumId: string, @Request() req: any) {\n    const userId = req.user.sub;\n    return await this.albumAccessService.getAlbumById(userId, albumId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AlbumAccessService.html":{"url":"injectables/AlbumAccessService.html","title":"injectable - AlbumAccessService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Injectables\n  AlbumAccessService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/album/album-access.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getAlbumById\n                            \n                            \n                                    Async\n                                grantAccess\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(albumRepo: Repository, userService: UserService)\n                    \n                \n                        \n                            \n                                Defined in src/album/album-access.service.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        albumRepo\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getAlbumById\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAlbumById(userId: string, albumId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/album/album-access.service.ts:59\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                albumId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        grantAccess\n                        \n                    \n                \n            \n            \n                \n                        \n                    grantAccess(userId: string, userEvent: string, passwordEvent: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/album/album-access.service.ts:24\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userEvent\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                passwordEvent\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  forwardRef,\n  Inject,\n  Injectable,\n  NotFoundException,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport * as bcrypt from 'bcrypt';\nimport { UserService } from 'src/user/user.service';\nimport { Repository } from 'typeorm';\nimport { Album } from './entities/album.entity';\n\n@Injectable()\nexport class AlbumAccessService {\n  constructor(\n    @InjectRepository(Album)\n    private readonly albumRepo: Repository,\n\n    @Inject(forwardRef(() => UserService))\n    private readonly userService: UserService,\n  ) {}\n\n  async grantAccess(userId: string, userEvent: string, passwordEvent: string) {\n    // Buscar el álbum con sus accesos\n    const album = await this.albumRepo.findOne({\n      where: { userEvent },\n      relations: ['accessibleUsers', 'photos'],\n    });\n\n    if (!album) throw new NotFoundException('Album not found');\n    if (album.userEvent !== userEvent)\n      throw new UnauthorizedException('Invalid credentials');\n    if (!(await bcrypt.compare(passwordEvent, album.passwordEventHash)))\n      throw new UnauthorizedException('Invalid credentials');\n\n    // Buscar usuario real en DB\n    const dbUser = await this.userService.findById(userId);\n\n    if (!dbUser) throw new NotFoundException('User not found');\n\n    // Asociar usuario al álbum si no está ya\n    if (!album.accessibleUsers.find((u) => u.id === dbUser.id)) {\n      album.accessibleUsers.push(dbUser);\n      await this.albumRepo.save(album);\n    }\n\n    return {\n      success: true,\n      album: {\n        id: album.id,\n        title: album.title,\n        createdAt: album.createdAt,\n        photos: album.photos,\n      },\n    };\n  }\n\n  async getAlbumById(userId: string, albumId: string) {\n    const album = await this.albumRepo.findOne({\n      where: {\n        id: albumId,\n        accessibleUsers: { id: userId },\n      },\n      relations: ['photos', 'accessibleUsers', 'photographer'],\n    });\n\n    if (!album) return null;\n\n    return {\n      id: album.id,\n      title: album.title,\n      eventDate: album.eventDate,\n      prices: album.prices,\n      priceDigital: album.priceDigital,\n      priceSchoolSports: album?.priceSchoolSports,\n      photos: album.photos.map((photo) => ({\n        id: photo.id,\n        url: photo.url,\n        urlWeb: photo.urlWeb,\n        urlThumbnail: photo.urlThumbnail,\n      })),\n      photographer: album.photographer.name,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AlbumController.html":{"url":"controllers/AlbumController.html","title":"controller - AlbumController","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Controllers\n  AlbumController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/album/album.controller.ts\n        \n            \n                Prefix\n            \n            \n                album\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                create\n                            \n                            \n                                    \n                                    \n                                    Async\n                                deleteAlbum\n                            \n                            \n                                    \n                                    \n                                    Async\n                                findAll\n                            \n                            \n                                    \n                                    \n                                    Async\n                                findOne\n                            \n                            \n                                    \n                                    \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createAlbumDto: CreateAlbumDto, req: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(AuthGuard)@Post()\n                \n            \n\n                    \n                        \n                            Defined in src/album/album.controller.ts:25\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createAlbumDto\n                                            \n                                                            CreateAlbumDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        deleteAlbum\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteAlbum(id: string, req: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(AuthGuard)@Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/album/album.controller.ts:59\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(paginationDto: PaginationDto, req: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(AuthGuard)@Get()\n                \n            \n\n                    \n                        \n                            Defined in src/album/album.controller.ts:32\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                paginationDto\n                                            \n                                                            PaginationDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(term: string, req: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(AuthGuard)@Get(':term')\n                \n            \n\n                    \n                        \n                            Defined in src/album/album.controller.ts:39\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                term\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateAlbumDto: UpdateAlbumDto, req: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(AuthGuard)@Patch(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/album/album.controller.ts:48\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateAlbumDto\n                                            \n                                                            UpdateAlbumDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  Patch,\n  Post,\n  Query,\n  Req,\n  UseGuards,\n} from '@nestjs/common';\nimport { PaginationDto } from '../common/dtos/pagination.dto';\nimport { AuthGuard } from '../common/guards/auth.guard';\nimport { AlbumService } from './album.service';\nimport { CreateAlbumDto } from './dto/create-album.dto';\nimport { UpdateAlbumDto } from './dto/update-album.dto';\n\n@Controller('album')\nexport class AlbumController {\n  constructor(private readonly albumService: AlbumService) {}\n\n  @UseGuards(AuthGuard)\n  @Post()\n  create(@Body() createAlbumDto: CreateAlbumDto, @Req() req: any) {\n    const userId = req.user.sub;\n    return this.albumService.create(createAlbumDto, userId);\n  }\n\n  @UseGuards(AuthGuard)\n  @Get()\n  async findAll(@Query() paginationDto: PaginationDto, @Req() req: any) {\n    const userId = req.user.sub;\n    return this.albumService.findAll(paginationDto, userId);\n  }\n\n  @UseGuards(AuthGuard)\n  @Get(':term')\n  async findOne(@Param('term') term: string, @Req() req: any) {\n    // console.log('Term recibido:', term);\n\n    const userId = req.user.sub;\n    return this.albumService.findOne(term, userId);\n  }\n\n  @UseGuards(AuthGuard)\n  @Patch(':id')\n  async update(\n    @Param('id') id: string,\n    @Body() updateAlbumDto: UpdateAlbumDto,\n    @Req() req: any,\n  ) {\n    const userId = req.user.sub;\n    return this.albumService.update(id, updateAlbumDto, userId);\n  }\n\n  @UseGuards(AuthGuard)\n  @Delete(':id')\n  async deleteAlbum(@Param('id') id: string, @Req() req: any) {\n    const userId = req.user.sub;\n    return this.albumService.remove(id, userId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AlbumModule.html":{"url":"modules/AlbumModule.html","title":"module - AlbumModule","body":"\n                   \n\n\n\n\n\n\n\n\n    Modules\n    AlbumModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AlbumModule\n\n\n\ncluster_AlbumModule_exports\n\n\n\ncluster_AlbumModule_providers\n\n\n\ncluster_AlbumModule_imports\n\n\n\n\nUserModule\n\nUserModule\n\n\n\nAlbumModule\n\nAlbumModule\n\nAlbumModule -->\n\nUserModule->AlbumModule\n\n\n\n\n\nAlbumAccessService \n\nAlbumAccessService \n\nAlbumAccessService  -->\n\nAlbumModule->AlbumAccessService \n\n\n\n\n\nAlbumService \n\nAlbumService \n\nAlbumService  -->\n\nAlbumModule->AlbumService \n\n\n\n\n\nAlbumAccessService\n\nAlbumAccessService\n\nAlbumModule -->\n\nAlbumAccessService->AlbumModule\n\n\n\n\n\nAlbumService\n\nAlbumService\n\nAlbumModule -->\n\nAlbumService->AlbumModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/album/album.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AlbumAccessService\n                        \n                        \n                            AlbumService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AlbumController\n                        \n                        \n                            AlbumAccessController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UserModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AlbumAccessService\n                        \n                        \n                            AlbumService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { AlbumController } from './album.controller';\nimport { AlbumService } from './album.service';\nimport { Album } from './entities/album.entity';\nimport { UserModule } from 'src/user/user.module';\nimport { PhotoModule } from 'src/photo/photo.module';\nimport { AlbumAccessController } from './album-access.controller';\nimport { AlbumAccessService } from './album-access.service';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([Album]),\n    UserModule,\n    forwardRef(() => PhotoModule),\n  ],\n  controllers: [AlbumController, AlbumAccessController],\n  providers: [AlbumService, AlbumAccessService],\n  exports: [AlbumService, AlbumAccessService],\n})\nexport class AlbumModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AlbumService.html":{"url":"injectables/AlbumService.html","title":"injectable - AlbumService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Injectables\n  AlbumService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/album/album.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                incrementPhotosCount\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                save\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(albumRepo: Repository, userService: UserService, photoService: PhotoService)\n                    \n                \n                        \n                            \n                                Defined in src/album/album.service.ts:21\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        albumRepo\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        photoService\n                                                  \n                                                        \n                                                                        PhotoService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(dto: CreateAlbumDto, userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/album/album.service.ts:41\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            CreateAlbumDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(paginationDto: PaginationDto, userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/album/album.service.ts:84\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                paginationDto\n                                            \n                                                            PaginationDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(term: string, photographerId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/album/album.service.ts:111\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                term\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                photographerId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        incrementPhotosCount\n                        \n                    \n                \n            \n            \n                \n                        \n                    incrementPhotosCount(albumId: string, value: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/album/album.service.ts:37\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                albumId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                value\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string, userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/album/album.service.ts:164\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        save\n                        \n                    \n                \n            \n            \n                \n                        \n                    save(album: Album)\n                \n            \n\n\n                    \n                        \n                            Defined in src/album/album.service.ts:32\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                album\n                                            \n                                                            Album\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, dto: UpdateAlbumDto, userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/album/album.service.ts:125\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                dto\n                                            \n                                                            UpdateAlbumDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  forwardRef,\n  Inject,\n  Injectable,\n  NotFoundException,\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport * as bcrypt from 'bcrypt';\nimport { PhotoService } from 'src/photo/photo.service';\nimport { UserHelpers } from 'src/user/helpers/user.helpers';\nimport { UserService } from 'src/user/user.service';\nimport { Repository } from 'typeorm';\nimport { PaginationDto } from '../common/dtos/pagination.dto';\nimport { CreateAlbumDto } from './dto/create-album.dto';\nimport { UpdateAlbumDto } from './dto/update-album.dto';\nimport { Album } from './entities/album.entity';\n\n@Injectable()\nexport class AlbumService {\n  constructor(\n    @InjectRepository(Album)\n    private readonly albumRepo: Repository,\n\n    private readonly userService: UserService,\n\n    @Inject(forwardRef(() => PhotoService))\n    private readonly photoService: PhotoService,\n  ) {}\n\n  async save(album: Album): Promise {\n    return this.albumRepo.save(album);\n  }\n\n  // Incrementa o decrementa el contador de fotos de un álbum\n  async incrementPhotosCount(albumId: string, value: number) {\n    await this.albumRepo.increment({ id: albumId }, 'photosCount', value);\n  }\n\n  async create(dto: CreateAlbumDto, userId: string) {\n    const photographer = await this.userService.findById(userId);\n    if (!photographer || photographer.role !== 'photographer') {\n      throw new NotFoundException('Fotógrafo no encontrado');\n    }\n\n    if (!UserHelpers.canCreateAlbum(photographer)) {\n      throw new BadRequestException('No puede crear más álbumes');\n    }\n\n    const existing = await this.albumRepo.findOne({\n      where: { userEvent: dto.userEvent, photographerId: userId },\n    });\n    if (existing) {\n      throw new BadRequestException(\n        'Ya existe un álbum con ese usuario de evento para este fotógrafo',\n      );\n    }\n\n    const passwordEventHash = await bcrypt.hash(dto.passwordEvent, 10);\n\n    const album = this.albumRepo.create({\n      ...dto,\n      passwordEventHash,\n      photographer,\n    });\n\n    try {\n      const savedAlbum = await this.albumRepo.save(album);\n      return {\n        message: 'Álbum creado correctamente',\n        album: { id: savedAlbum.id },\n      };\n    } catch (error) {\n      if (error.code === '23505') {\n        throw new BadRequestException(\n          'Ya existe un álbum con ese nombre o usuario de evento',\n        );\n      }\n      throw error;\n    }\n  }\n\n  async findAll(paginationDto: PaginationDto, userId: string) {\n    const { limit = 10, offset = 0 } = paginationDto;\n\n    const photographer = await this.userService.findById(userId);\n    if (!photographer || photographer.role !== 'photographer') {\n      throw new NotFoundException('Fotógrafo no encontrado');\n    }\n\n    const albums = await this.albumRepo.find({\n      where: { photographer: { id: userId } },\n      take: limit,\n      skip: offset,\n      relations: ['photos'],\n    });\n\n    return albums.map((album) => ({\n      id: album.id,\n      name: album.title,\n      clientEmail: album.clientEmail,\n      clientPhoneNumber: album.clientPhoneNumber,\n      createdAt: album.createdAt,\n      isActiveFolder: album.isActiveFolder,\n      description: album.description,\n      photos: album.photos,\n    }));\n  }\n\n  async findOne(term: string, photographerId: string) {\n    const album = await this.albumRepo.findOne({\n      where: { id: term, photographer: { id: photographerId } },\n      relations: ['photos', 'photographer', 'orders'],\n    });\n\n    if (!album) {\n      throw new NotFoundException(\n        `Álbum con identificador '${term}' no encontrado o no autorizado`,\n      );\n    }\n    return album;\n  }\n\n  async update(id: string, dto: UpdateAlbumDto, userId: string) {\n    const album = await this.albumRepo.findOne({\n      where: { id, photographer: { id: userId } },\n    });\n\n    if (!album) {\n      throw new NotFoundException(\n        `Álbum con id ${id} no encontrado o no pertenece al fotógrafo autenticado`,\n      );\n    }\n\n    if (dto.passwordEvent) {\n      album.passwordEventHash = await bcrypt.hash(dto.passwordEvent, 10);\n      delete (dto as any).passwordEvent;\n    }\n\n    this.albumRepo.merge(album, dto);\n\n    try {\n      const updatedAlbum = await this.albumRepo.save(album);\n      return {\n        message: 'Álbum actualizado correctamente',\n        album: {\n          id: updatedAlbum.id,\n          title: updatedAlbum.title,\n          description: updatedAlbum.description,\n          clientEmail: updatedAlbum.clientEmail,\n          clientPhoneNumber: updatedAlbum.clientPhoneNumber,\n          isActiveFolder: updatedAlbum.isActiveFolder,\n        },\n      };\n    } catch (error) {\n      if (error.code === '23505') {\n        throw new BadRequestException('Ya existe un álbum con ese nombre');\n      }\n      throw error;\n    }\n  }\n\n  async remove(id: string, userId: string) {\n    const album = await this.albumRepo.findOne({\n      where: { id, photographer: { id: userId } },\n    });\n\n    if (!album) {\n      throw new NotFoundException(\n        `Álbum con id ${id} no encontrado o no pertenece al fotógrafo autenticado`,\n      );\n    }\n\n    // Eliminar todas las fotos\n    await this.photoService.removeAllByAlbum(id, userId);\n\n    // Soft delete\n    album.isActiveFolder = false;\n    album.deletedAt = new Date();\n    await this.albumRepo.save(album);\n\n    return {\n      message:\n        'Álbum y fotos eliminados correctamente (DB + Cloudinary + usuario actualizado)',\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AlbumSummaryDto.html":{"url":"classes/AlbumSummaryDto.html","title":"class - AlbumSummaryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AlbumSummaryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/order/dto/order-buyer.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                description\n                            \n                            \n                                eventDate\n                            \n                            \n                                id\n                            \n                            \n                                priceDigital\n                            \n                            \n                                prices\n                            \n                            \n                                    Optional\n                                priceSchoolSports\n                            \n                            \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/order/dto/order-buyer.dto.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        eventDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/order/dto/order-buyer.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/order/dto/order-buyer.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        priceDigital\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/order/dto/order-buyer.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        prices\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type[]\n\n                    \n                \n                    \n                        \n                                Defined in src/order/dto/order-buyer.dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        priceSchoolSports\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/order/dto/order-buyer.dto.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/order/dto/order-buyer.dto.ts:15\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class OrderItemResponseDto {\n  id: string;\n  size: string;\n  quantity: number;\n  unitPrice: number;\n  subtotal: number;\n  photo: {\n    id: string;\n    url: string;\n  };\n}\n\nexport class AlbumSummaryDto {\n  id: string;\n  title: string;\n  prices: { size: string; price: number }[];\n  priceDigital: number;\n  priceSchoolSports?: number;\n  eventDate: string;\n  description: string;\n}\n\nexport class OrderResponseDto {\n  id: string;\n  album: AlbumSummaryDto;\n  items: OrderItemResponseDto[];\n  total: number;\n  status: string;\n  createdAt: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAdminModule\n\nAdminModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAdminModule->AppModule\n\n\n\n\n\nAlbumModule\n\nAlbumModule\n\nAppModule -->\n\nAlbumModule->AppModule\n\n\n\n\n\nAuthModule\n\nAuthModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nFilesModule\n\nFilesModule\n\nAppModule -->\n\nFilesModule->AppModule\n\n\n\n\n\nLeadModule\n\nLeadModule\n\nAppModule -->\n\nLeadModule->AppModule\n\n\n\n\n\nMailModule\n\nMailModule\n\nAppModule -->\n\nMailModule->AppModule\n\n\n\n\n\nMercadopagoModule\n\nMercadopagoModule\n\nAppModule -->\n\nMercadopagoModule->AppModule\n\n\n\n\n\nOrdersModule\n\nOrdersModule\n\nAppModule -->\n\nOrdersModule->AppModule\n\n\n\n\n\nPaymentModule\n\nPaymentModule\n\nAppModule -->\n\nPaymentModule->AppModule\n\n\n\n\n\nPhotoModule\n\nPhotoModule\n\nAppModule -->\n\nPhotoModule->AppModule\n\n\n\n\n\nSeedModule\n\nSeedModule\n\nAppModule -->\n\nSeedModule->AppModule\n\n\n\n\n\nSubscriptionModule\n\nSubscriptionModule\n\nAppModule -->\n\nSubscriptionModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            AdminModule\n                        \n                        \n                            AlbumModule\n                        \n                        \n                            AuthModule\n                        \n                        \n                            FilesModule\n                        \n                        \n                            LeadModule\n                        \n                        \n                            MailModule\n                        \n                        \n                            MercadopagoModule\n                        \n                        \n                            OrdersModule\n                        \n                        \n                            PaymentModule\n                        \n                        \n                            PhotoModule\n                        \n                        \n                            SeedModule\n                        \n                        \n                            SubscriptionModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { JwtModule } from '@nestjs/jwt';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { AlbumModule } from './album/album.module';\nimport { AuthModule } from './auth/auth.module';\nimport { MailModule } from './mail/mail.module';\nimport { UserModule } from './user/user.module';\n\nimport { FilesModule } from './files/files.module';\nimport { LeadModule } from './lead/lead.module';\nimport { MercadopagoModule } from './mercadopago/mercadopago.module';\nimport { OrdersModule } from './order/order.module';\nimport { PaymentModule } from './payment/payment.module';\nimport { PhotoModule } from './photo/photo.module';\nimport { SubscriptionModule } from './subscription/subscription.module';\nimport { AdminModule } from './admin/admin.module';\nimport { SeedModule } from './seed/seed.module';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      isGlobal: true,\n    }),\n    TypeOrmModule.forRoot({\n      type: 'postgres',\n      url: process.env.POSTGRES_URL,\n      retryAttempts: 10,\n      retryDelay: 3000, // 3 segundos entre intentos\n      ssl:\n        process.env.NODE_ENV === 'production'\n          ? { rejectUnauthorized: false }\n          : false,\n      autoLoadEntities: true,\n      synchronize: true,\n    }),\n    JwtModule.register({\n      global: true,\n      signOptions: {\n        expiresIn: '1d',\n        // expiresIn: '60s', // o '1m'\n      },\n      secret: process.env.JWT_SECRET,\n    }),\n    UserModule,\n    AuthModule,\n    MailModule,\n    AlbumModule,\n    OrdersModule,\n    FilesModule,\n    PhotoModule,\n    SubscriptionModule,\n    PaymentModule,\n    MercadopagoModule,\n    LeadModule,\n    AdminModule,\n    SeedModule,\n  ],\n  controllers: [],\n  providers: [],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Auth.html":{"url":"classes/Auth.html","title":"class - Auth","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Auth\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/entities/auth.entity.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class Auth {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                login\n                            \n                            \n                                    \n                                    Async\n                                register\n                            \n                            \n                                    \n                                    Async\n                                requestPasswordReset\n                            \n                            \n                                    \n                                    Async\n                                resetPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(dto: LoginDto, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('login')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:37\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            LoginDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                        \n                    register(dto: CreateUserDto, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('register')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:27\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        requestPasswordReset\n                        \n                    \n                \n            \n            \n                \n                        \n                    requestPasswordReset(email: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('request-password-reset')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:48\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        resetPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    resetPassword(token: string, newPassword: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('reset-password')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:54\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                newPassword\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Get,\n  Post,\n  Query,\n  Req,\n  Res,\n  UseGuards,\n} from '@nestjs/common';\n\nimport { AuthService } from './auth.service';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { LoginDto } from './dto/login.dto';\nimport { Response } from 'express';\nimport { PasswordResetService } from './password-reset.service';\nimport { AuthGuard } from 'src/common/guards/auth.guard';\n\n@Controller('auth')\nexport class AuthController {\n  constructor(\n    private readonly authService: AuthService,\n    private readonly resetService: PasswordResetService,\n  ) {}\n\n  @Post('register')\n  async register(\n    @Body() dto: CreateUserDto,\n    @Res({ passthrough: true }) res: Response,\n  ) {\n    const register = await this.authService.register(dto);\n\n    return { response: register, message: 'Registro exitoso' };\n  }\n\n  @Post('login')\n  async login(\n    @Body() dto: LoginDto,\n    @Res({ passthrough: true }) res: Response,\n  ) {\n    const login = await this.authService.login(dto);\n\n    // Retornamos algo (puede ser info del usuario o mensaje)\n    return { response: login, message: 'Login exitoso' };\n  }\n\n  @Post('request-password-reset')\n  async requestPasswordReset(@Body('email') email: string) {\n    await this.resetService.requestPasswordReset(email);\n    return { message: 'Email de reseteo enviado correctamente' };\n  }\n\n  @Post('reset-password')\n  async resetPassword(\n    @Body('token') token: string,\n    @Body('newPassword') newPassword: string,\n  ) {\n    await this.resetService.consumeToken(token, newPassword);\n    return { message: 'Contraseña actualizada correctamente' };\n  }\n}\n\n// Seteamos la cookie HTTP-only con el token\n/*   ('token', login.access_token, {\n      httpOnly: true,\n      secure: true,\n      sameSite: 'none',\n      path: '/',\n      maxAge: 1000 * 60 * 60 * 24,\n      domain: 'next-foto-nube.vercel.app',\n    }); */\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/AuthGuard.html":{"url":"guards/AuthGuard.html","title":"guard - AuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    AuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n                File\n            \n            \n                src/common/guards/auth.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/common/guards/auth.guard.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/guards/auth.guard.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     boolean | Promise | Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import {\n  CanActivate,\n  ExecutionContext,\n  Injectable,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { Observable } from 'rxjs';\n\n@Injectable()\nexport class AuthGuard implements CanActivate {\n  constructor(private readonly jwtService: JwtService) {}\n\n  canActivate(\n    context: ExecutionContext,\n  ): boolean | Promise | Observable {\n    const request = context.switchToHttp().getRequest();\n    // Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI4NmRkN2MzZi1hN2U2LTRiZWQtYTVkZC0wMDcwYTVlN2RmNWYiLCJpZCI6Ijg2ZGQ3YzNmLWE3ZTYtNGJlZC1hNWRkLTAwNzBhNWU3ZGY1ZiIsImVtYWlsIjoiYWxnb0BhbGdvLmNvbSIsImlhdCI6MTcyOTYwNzE5OCwiZXhwIjoxNzI5NjEwNzk4fQ.s-7pkBJtfUt2QbeK-nhnECuzywpMr8sxqhsfUzmqz1A\n    // Por lo de arriba es que se usa el split\n    const token = request.headers['authorization']?.split(' ')[1] ?? '';\n\n    if (!token) {\n      throw new UnauthorizedException('Bearer Token no existe');\n    }\n\n    try {\n      const secret = process.env.JWT_SECRET;\n      const payload = this.jwtService.verify(token, { secret });\n      payload.iat = new Date(payload.iat * 1000);\n      payload.exp = new Date(payload.exp * 1000);\n\n      // Validar que el usuario esté activo\n      if (payload.isActive === false) {\n        throw new UnauthorizedException('Usuario desactivado');\n      }\n\n      request.user = payload;\n      return true;\n    } catch (error) {\n      throw new UnauthorizedException('Token invalido');\n    }\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nMailModule\n\nMailModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nMailModule->AuthModule\n\n\n\n\n\nSubscriptionModule\n\nSubscriptionModule\n\nAuthModule -->\n\nSubscriptionModule->AuthModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nPasswordResetService\n\nPasswordResetService\n\nAuthModule -->\n\nPasswordResetService->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            PasswordResetService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            MailModule\n                        \n                        \n                            SubscriptionModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { AuthController } from './auth.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Auth } from './entities/auth.entity';\nimport { UserModule } from '../user/user.module';\nimport { MailModule } from '../mail/mail.module';\nimport { SubscriptionModule } from 'src/subscription/subscription.module';\nimport { PasswordResetToken } from './entities/password-reset-token.entity';\nimport { PasswordResetService } from './password-reset.service';\nimport { User } from 'src/user/entities/user.entity';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([Auth, PasswordResetToken, User]),\n    UserModule,\n    MailModule,\n    SubscriptionModule,\n  ],\n  controllers: [AuthController],\n  providers: [AuthService, PasswordResetService],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                generateToken\n                            \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                register\n                            \n                            \n                                    Async\n                                requestPasswordReset\n                            \n                            \n                                    Async\n                                resetPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService, subscriptionService: SubscriptionService, jwtService: JwtService, mailService: MailService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        subscriptionService\n                                                  \n                                                        \n                                                                        SubscriptionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        mailService\n                                                  \n                                                        \n                                                                        MailService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        generateToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateToken(user: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:148\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     { access_token: any; user: { id: any; email: any; role: any; name: any; image: any; phone: any; }; }\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(dto: LoginDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:64\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            LoginDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                        \n                    register(dto: CreateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:27\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        requestPasswordReset\n                        \n                    \n                \n            \n            \n                \n                        \n                    requestPasswordReset(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:96\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        resetPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    resetPassword(token: string, newPassword: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:130\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                newPassword\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  Injectable,\n  InternalServerErrorException,\n  NotFoundException,\n} from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport * as bcrypt from 'bcrypt';\nimport { MailService } from '../mail/mail.service';\nimport { UserService } from '../user/user.service';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { LoginDto } from './dto/login.dto';\nimport { SubscriptionService } from 'src/subscription/subscription.service';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    private userService: UserService,\n    private subscriptionService: SubscriptionService,\n    private jwtService: JwtService,\n    private mailService: MailService,\n  ) {}\n\n  // ======================\n  // Registro de usuario\n  // ======================\n  async register(dto: CreateUserDto) {\n    const existingUser = await this.userService.findByEmail(dto.email);\n    if (existingUser) throw new BadRequestException('El usuario ya existe');\n\n    let newUser;\n    if (dto.password) {\n      const hashedPassword = await bcrypt.hash(dto.password, 10);\n      newUser = await this.userService.create({\n        email: dto.email,\n        password: hashedPassword,\n        role: dto.role,\n        provider: 'credentials',\n      });\n    } else if (dto.name && dto.image) {\n      newUser = await this.userService.create({\n        email: dto.email,\n        role: dto.role,\n        name: dto.name,\n        image: dto.image,\n        provider: 'google',\n      });\n    } else {\n      throw new BadRequestException('Datos insuficientes para registrar');\n    }\n\n    // Crear la suscripción inicial\n    await this.subscriptionService.createInitialSubscription(newUser.id);\n\n    // Enviar email de bienvenida\n    await this.mailService.sendWelcomeEmail(newUser.email, newUser.role);\n\n    return this.generateToken(newUser);\n  }\n\n  // ======================\n  // Login\n  // ======================\n  async login(dto: LoginDto) {\n    const user = await this.userService.findByEmail(dto.email);\n    if (!user) throw new BadRequestException('Usuario no registrado');\n\n    // Login tradicional\n    if (dto.password) {\n      if (user.provider !== 'credentials') {\n        throw new BadRequestException('El usuario se registró con Google');\n      }\n\n      const isMatch = await bcrypt.compare(dto.password, user.password);\n      if (!isMatch) throw new BadRequestException('Credenciales inválidas');\n    }\n\n    // Login con Google\n    else if (dto.name && dto.image) {\n      if (user.provider !== 'google') {\n        throw new BadRequestException('Usuario no registrado con Google');\n      }\n    } else {\n      throw new BadRequestException('Datos insuficientes para login');\n    }\n\n    // Verificación de usuario activo\n    if (!user.isActive) throw new BadRequestException('Usuario desactivado');\n\n    return this.generateToken(user);\n  }\n\n  // ======================\n  // Solicitar reseteo de contraseña\n  // ======================\n  async requestPasswordReset(email: string) {\n    const user = await this.userService.findByEmail(email);\n    if (!user) throw new NotFoundException('Usuario no encontrado');\n\n    const now = new Date();\n    const waitTimeMinutes = 15;\n\n    if (user.passwordResetRequestedAt) {\n      const diffMinutes =\n        (now.getTime() - user.passwordResetRequestedAt.getTime()) / (1000 * 60);\n      if (diffMinutes \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BaseUserDto.html":{"url":"classes/BaseUserDto.html","title":"class - BaseUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BaseUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dto/base-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                image\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                name\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                password\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                phone\n                            \n                            \n                                    \n                                role\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                storageUsedMb\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/base-user.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        image\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/base-user.dto.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/base-user.dto.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/base-user.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        phone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/base-user.dto.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserRole\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(UserRole)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/base-user.dto.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        storageUsedMb\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/base-user.dto.ts:40\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsEmail,\n  IsEnum,\n  IsNumber,\n  IsOptional,\n  IsString,\n} from 'class-validator';\n\nexport enum UserRole {\n  BUYER = 'buyer',\n  PHOTOGRAPHER = 'photographer',\n  SUPER_ADMIN = 'SUPER_ADMIN',\n}\n\nexport class BaseUserDto {\n  @IsEmail()\n  email: string;\n\n  @IsOptional()\n  @IsString()\n  password?: string;\n\n  @IsEnum(UserRole)\n  role: UserRole;\n\n  @IsOptional()\n  @IsString()\n  name?: string;\n\n  @IsOptional()\n  @IsString()\n  image?: string;\n\n  @IsOptional()\n  @IsString()\n  phone?: string;\n\n  @IsOptional()\n  @IsNumber()\n  storageUsedMb?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/BuyerOrdersController.html":{"url":"controllers/BuyerOrdersController.html","title":"controller - BuyerOrdersController","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Controllers\n  BuyerOrdersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/order/buyer-orders.controller.ts\n        \n            \n                Prefix\n            \n            \n                buyer/orders\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Async\n                                cancelOrder\n                            \n                            \n                                    \n                                    \n                                createOrder\n                            \n                            \n                                    \n                                    Async\n                                createPayment\n                            \n                            \n                                    \n                                    \n                                    Async\n                                getMyOrders\n                            \n                            \n                                    \n                                    \n                                    Async\n                                getOrderById\n                            \n                            \n                                    \n                                    \n                                    Async\n                                verifyPayment\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        cancelOrder\n                        \n                    \n                \n            \n            \n                \n                        \n                    cancelOrder(id: string, req: unknown)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(AuthGuard)@Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/order/buyer-orders.controller.ts:52\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                                        unknown\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        createOrder\n                        \n                    \n                \n            \n            \n                \n                        \n                    createOrder(dto: CreateOrderDto, req: unknown)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(AuthGuard)@Post()\n                \n            \n\n                    \n                        \n                            Defined in src/order/buyer-orders.controller.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            CreateOrderDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                                        unknown\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        createPayment\n                        \n                    \n                \n            \n            \n                \n                        \n                    createPayment(orderId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post(':id/pay')\n                \n            \n\n                    \n                        \n                            Defined in src/order/buyer-orders.controller.ts:61\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                orderId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        getMyOrders\n                        \n                    \n                \n            \n            \n                \n                        \n                    getMyOrders(req: unknown)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(AuthGuard)@Get('')\n                \n            \n\n                    \n                        \n                            Defined in src/order/buyer-orders.controller.ts:30\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        unknown\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        getOrderById\n                        \n                    \n                \n            \n            \n                \n                        \n                    getOrderById(id: string, req: unknown)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(AuthGuard)@Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/order/buyer-orders.controller.ts:38\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                                        unknown\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        verifyPayment\n                        \n                    \n                \n            \n            \n                \n                        \n                    verifyPayment(orderId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(AuthGuard)@Get(':id/verify-payment')\n                \n            \n\n                    \n                        \n                            Defined in src/order/buyer-orders.controller.ts:45\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                orderId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  Post,\n  Req,\n  UseGuards,\n} from '@nestjs/common';\nimport { CreateOrderDto } from './dto/create-order.dto';\nimport { AuthGuard } from 'src/common/guards/auth.guard';\nimport { BuyerOrdersService } from './buyer-orders.service';\n\n@Controller('buyer/orders')\nexport class BuyerOrdersController {\n  constructor(private readonly orderService: BuyerOrdersService) {}\n\n  @UseGuards(AuthGuard)\n  @Post()\n  createOrder(@Body() dto: CreateOrderDto, @Req() req) {\n    const buyerId = req.user.sub;\n\n    return this.orderService.createOrder(dto, buyerId);\n  }\n\n  // 🔒 Obtener TODAS las órdenes del comprador autenticado\n  @UseGuards(AuthGuard)\n  @Get('')\n  async getMyOrders(@Req() req) {\n    const buyerId = req.user.sub; // viene del JWT\n    return this.orderService.getOrdersByBuyer(buyerId);\n  }\n\n  // 🔒 Obtener UNA orden específica del comprador autenticado\n  @UseGuards(AuthGuard)\n  @Get(':id')\n  async getOrderById(@Param('id') id: string, @Req() req) {\n    const buyerId = req.user.sub;\n    return this.orderService.getOrderById(id, buyerId);\n  }\n\n  @UseGuards(AuthGuard)\n  @Get(':id/verify-payment')\n  async verifyPayment(@Param('id') orderId: string) {\n    return this.orderService.verifyPayment(orderId);\n  }\n\n  // 🔒 Eliminar una orden pendiente\n  @UseGuards(AuthGuard)\n  @Delete(':id')\n  async cancelOrder(@Param('id') id: string, @Req() req) {\n    const buyerId = req.user.sub;\n    return this.orderService.cancelOrder(id, buyerId);\n  }\n\n  /*  */\n\n  // @UseGuards(AuthGuard)\n  @Post(':id/pay')\n  async createPayment(@Param('id') orderId: string) {\n    /*     const buyerId = req.user.sub;\n\n    // Validamos que el comprador sea el dueño de la orden\n    const order = await this.orderService.getOrderById(orderId, buyerId); */\n\n    // Creamos la preferencia de pago\n    return this.orderService.createPaymentPreference(orderId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/BuyerOrdersService.html":{"url":"injectables/BuyerOrdersService.html","title":"injectable - BuyerOrdersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Injectables\n  BuyerOrdersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/order/buyer-orders.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                mercadoPagoProviderUserId\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                cancelOrder\n                            \n                            \n                                    Async\n                                createOrder\n                            \n                            \n                                    Async\n                                createPaymentPreference\n                            \n                            \n                                    Async\n                                getOrderById\n                            \n                            \n                                    Async\n                                getOrdersByBuyer\n                            \n                            \n                                    Private\n                                mapToDto\n                            \n                            \n                                    Async\n                                updateOrderStatus\n                            \n                            \n                                    Async\n                                verifyPayment\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: Repository, albumRepository: Repository, photoRepository: Repository, orderRepository: Repository, paymentService: PaymentService, mailService: MailService, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/order/buyer-orders.service.ts:24\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        albumRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        photoRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        orderRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        paymentService\n                                                  \n                                                        \n                                                                        PaymentService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        mailService\n                                                  \n                                                        \n                                                                        MailService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        cancelOrder\n                        \n                    \n                \n            \n            \n                \n                        \n                    cancelOrder(orderId: string, buyerId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/order/buyer-orders.service.ts:136\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                orderId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                buyerId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createOrder\n                        \n                    \n                \n            \n            \n                \n                        \n                    createOrder(dto: CreateOrderDto, buyerId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/order/buyer-orders.service.ts:47\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            CreateOrderDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                buyerId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createPaymentPreference\n                        \n                    \n                \n            \n            \n                \n                        \n                    createPaymentPreference(orderId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/order/buyer-orders.service.ts:160\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                orderId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getOrderById\n                        \n                    \n                \n            \n            \n                \n                        \n                    getOrderById(orderId: string, buyerId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/order/buyer-orders.service.ts:110\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                orderId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                buyerId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getOrdersByBuyer\n                        \n                    \n                \n            \n            \n                \n                        \n                    getOrdersByBuyer(buyerId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/order/buyer-orders.service.ts:100\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                buyerId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        mapToDto\n                        \n                    \n                \n            \n            \n                \n                        \n                    mapToDto(order: Order)\n                \n            \n\n\n                    \n                        \n                            Defined in src/order/buyer-orders.service.ts:306\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                order\n                                            \n                                                            Order\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         OrderResponseDto\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateOrderStatus\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateOrderStatus(orderId: string, newStatus: OrderStatus)\n                \n            \n\n\n                    \n                        \n                            Defined in src/order/buyer-orders.service.ts:256\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                orderId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                newStatus\n                                            \n                                                            OrderStatus\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        verifyPayment\n                        \n                    \n                \n            \n            \n                \n                        \n                    verifyPayment(orderId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/order/buyer-orders.service.ts:126\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                orderId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        mercadoPagoProviderUserId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/order/buyer-orders.service.ts:24\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  NotFoundException,\n  ForbiddenException,\n  BadRequestException,\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { Order, OrderStatus } from './entities/order.entity';\nimport { OrderResponseDto } from './dto/order-buyer.dto';\nimport { User } from 'src/user/entities/user.entity';\nimport { CreateOrderDto } from './dto/create-order.dto';\nimport { OrderItem } from './entities/order-item.entity';\nimport { Album } from 'src/album/entities/album.entity';\nimport { Photo } from 'src/photo/entities/photo.entity';\nimport { PaymentService } from 'src/payment/payment.service';\nimport axios from 'axios';\nimport { MailService } from 'src/mail/mail.service';\nimport { ConfigService } from '@nestjs/config';\nimport { UserHelpers } from 'src/user/helpers/user.helpers';\n\n@Injectable()\nexport class BuyerOrdersService {\n  private readonly mercadoPagoProviderUserId: number;\n  constructor(\n    @InjectRepository(User)\n    private readonly userRepository: Repository,\n\n    @InjectRepository(Album)\n    private readonly albumRepository: Repository,\n\n    @InjectRepository(Photo)\n    private readonly photoRepository: Repository,\n\n    @InjectRepository(Order)\n    private readonly orderRepository: Repository,\n\n    private readonly paymentService: PaymentService,\n    private readonly mailService: MailService,\n    private readonly configService: ConfigService,\n  ) {\n    this.mercadoPagoProviderUserId = Number(\n      this.configService.get('MERCADOPAGO_PROVIDER_USER_ID'),\n    );\n  }\n\n  async createOrder(\n    dto: CreateOrderDto,\n    buyerId: string,\n  ): Promise {\n    const buyer = await this.userRepository.findOneByOrFail({ id: buyerId });\n    const album = await this.albumRepository.findOneByOrFail({\n      id: dto.albumId,\n    });\n\n    // Verificar fotos\n    const photoIds = dto.items.map((i) => i.photoId);\n    const photos = await this.photoRepository\n      .createQueryBuilder('photo')\n      .where('photo.id IN (:...ids)', { ids: photoIds })\n      .andWhere('photo.albumId = :albumId', { albumId: dto.albumId })\n      .getMany();\n\n    if (photos.length !== dto.items.length) {\n      throw new BadRequestException(\n        'Una o más fotos no pertenecen a este álbum',\n      );\n    }\n\n    // Crear items\n    const orderItems = dto.items.map((itemDto) => {\n      const photo = photos.find((p) => p.id === itemDto.photoId)!;\n      return this.orderRepository.manager.create(OrderItem, {\n        photoUrl: photo.url,\n        photoWebUrl: photo.urlWeb,\n        photoThumbnailUrl: photo.urlThumbnail,\n        originalPhotoId: photo.id, // opcional\n        size: itemDto.size,\n        quantity: itemDto.quantity,\n        unitPrice: itemDto.unitPrice,\n        subtotal: itemDto.unitPrice * itemDto.quantity,\n      });\n    });\n\n    const total = orderItems.reduce((sum, i) => sum + Number(i.subtotal), 0);\n\n    const order = this.orderRepository.create({\n      buyer,\n      album,\n      items: orderItems,\n      total,\n      status: 'pending',\n    });\n\n    const savedOrder = await this.orderRepository.save(order);\n\n    return this.mapToDto(savedOrder);\n  }\n\n  async getOrdersByBuyer(buyerId: string): Promise {\n    const orders = await this.orderRepository.find({\n      where: { buyer: { id: buyerId } },\n      relations: ['items', 'album'],\n      order: { createdAt: 'DESC' },\n    });\n\n    return orders.map(this.mapToDto);\n  }\n\n  async getOrderById(\n    orderId: string,\n    buyerId: string,\n  ): Promise {\n    const order = await this.orderRepository.findOne({\n      where: { id: orderId },\n      relations: ['items', 'album', 'buyer'],\n    });\n\n    if (!order) throw new NotFoundException('Orden no encontrada');\n    if (order.buyer.id !== buyerId)\n      throw new ForbiddenException('No tienes acceso a esta orden');\n\n    return this.mapToDto(order);\n  }\n\n  async verifyPayment(orderId: string) {\n    const order = await this.orderRepository.findOne({\n      where: { id: orderId },\n    });\n\n    if (!order) throw new NotFoundException('Orden no encontrada');\n\n    return { status: order.status, orderId: order.id };\n  }\n\n  async cancelOrder(\n    orderId: string,\n    buyerId: string,\n  ): Promise {\n    const order = await this.orderRepository.findOne({\n      where: { id: orderId },\n      relations: ['buyer'],\n    });\n\n    if (!order) throw new NotFoundException('Orden no encontrada');\n    if (order.buyer.id !== buyerId)\n      throw new ForbiddenException('No tienes acceso a esta orden');\n\n    if (order.status !== 'pending') {\n      throw new BadRequestException(\n        'Solo se pueden cancelar órdenes pendientes',\n      );\n    }\n\n    await this.orderRepository.remove(order);\n\n    return { success: true, message: 'Orden cancelada con éxito' };\n  }\n\n  async createPaymentPreference(orderId: string) {\n    const order = await this.orderRepository.findOne({\n      where: { id: orderId },\n      relations: ['album', 'album.photographer', 'items'],\n    });\n    if (!order) throw new NotFoundException('Orden no encontrada');\n\n    const photographer = order.album.photographer;\n    const photographerAccount = await this.paymentService.getAccount(\n      photographer.id,\n    );\n    if (\n      !photographerAccount.accessToken ||\n      !photographerAccount.providerUserId\n    ) {\n      throw new BadRequestException(\n        'El fotógrafo no tiene cuenta MercadoPago vinculada',\n      );\n    }\n\n    const items = order.items.map((i) => ({\n      title: `Foto - ${i.size}`,\n      picture_url: i.photoUrl,\n      quantity: i.quantity,\n      unit_price: Number(i.unitPrice),\n      currency_id: 'ARS',\n    }));\n\n    const total = order.total;\n\n    // 🧠 Acá usamos tu helper para obtener el porcentaje correcto\n    const feePercentage = UserHelpers.getFeePercentage(photographer);\n\n    // 💰 Calculamos la comisión real del marketplace\n    const marketplaceFee = Number(((total * feePercentage) / 100).toFixed(2));\n\n    if (marketplaceFee > total) {\n      console.error(\n        'marketplaceFee is greater than total!',\n        marketplaceFee,\n        total,\n      );\n      throw new BadRequestException('Comisión del marketplace excesiva');\n    }\n\n    const marketplaceProviderUserId = this.mercadoPagoProviderUserId;\n\n    const preferencePayload = {\n      items,\n      payer: { email: order.buyer.email },\n      back_urls: {\n        success: `${process.env.FRONTEND_URL}/payment/success`,\n        failure: `${process.env.FRONTEND_URL}/payment/failure`,\n      },\n      marketplace_fee: marketplaceFee,\n      payment_methods: {\n        excluded_payment_types: [{ id: 'ticket' }, { id: 'atm' }],\n      },\n      sponsor_id: marketplaceProviderUserId,\n      notification_url: `${process.env.BACKEND_URL}/mercadopago/webhook`,\n      external_reference: `buyerOrder-${order.id}`,\n    };\n\n    console.log(\n      '⚙ Preference Payload:',\n      JSON.stringify(preferencePayload, null, 2),\n    );\n    console.log(\n      '📦 Access Token del vendedor:',\n      photographerAccount.accessToken,\n    );\n\n    try {\n      const { data } = await axios.post(\n        'https://api.mercadopago.com/checkout/preferences',\n        preferencePayload,\n        {\n          headers: {\n            Authorization: `Bearer ${photographerAccount.accessToken}`,\n            'Content-Type': 'application/json',\n          },\n        },\n      );\n\n      // console.log('✅ Preferencia creada:', data);\n\n      return { init_point: data.init_point, preferenceId: data.id };\n    } catch (err: any) {\n      console.error(\n        '❌ Error al crear preferencia:',\n        err.response?.data || err.message,\n      );\n      throw new BadRequestException('Error al crear preferencia MercadoPago');\n    }\n  }\n\n  async updateOrderStatus(\n    orderId: string,\n    newStatus: OrderStatus,\n  ): Promise {\n    let cleanOrderId = orderId;\n    if (orderId.startsWith('buyerOrder-')) {\n      cleanOrderId = orderId.replace('buyerOrder-', '');\n    }\n\n    const order = await this.orderRepository.findOne({\n      where: { id: cleanOrderId },\n      relations: ['buyer', 'items', 'album', 'album.photographer'],\n    });\n\n    if (!order) {\n      console.error(`Order with ID ${orderId} not found.`);\n      return;\n    }\n\n    order.status = newStatus;\n\n    // Persistir los cambios en la base de datos\n    await this.orderRepository.save(order);\n\n    console.log(`Order ${orderId} status updated to: ${newStatus}`);\n\n    // 👇 Si el pago fue aprobado, mandar mail\n    if (newStatus === 'approved') {\n      const total = Number(order.total).toFixed(2);\n      const itemCount = order.items.length;\n\n      // 📩 Mail al comprador (confirmación de compra)\n      await this.mailService.sendOrderPaymentEmail(\n        order.buyer.email,\n        order.id,\n        total,\n        itemCount,\n      );\n\n      // 📩 Mail al vendedor (nuevo pedido confirmado)\n      await this.mailService.sendNewOrderNotification(\n        order.album.photographer.email,\n        order.id,\n        total,\n        itemCount,\n        order.buyer.name,\n      );\n    }\n  }\n  // Mapeo privado a DTO\n  private mapToDto(order: Order): OrderResponseDto {\n    return {\n      id: order.id,\n      album: {\n        id: order.album.id,\n        title: order.album.title,\n        prices: order.album.prices,\n        priceDigital: order.album.priceDigital,\n        priceSchoolSports: order.album.priceSchoolSports,\n        eventDate: order.album.eventDate,\n        description: order.album.description || '',\n      },\n      items: order.items.map((item) => ({\n        id: item.id,\n        size: item.size,\n        quantity: item.quantity,\n        unitPrice: item.unitPrice,\n        subtotal: item.subtotal,\n        photo: {\n          id: item.originalPhotoId,\n          url: item.photoUrl,\n          webUrl: item.photoWebUrl,\n          thumbnailUrl: item.photoThumbnailUrl,\n        },\n      })),\n      total: order.total,\n      status: order.status,\n      createdAt: order.createdAt,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CommonModule.html":{"url":"modules/CommonModule.html","title":"module - CommonModule","body":"\n                   \n\n\n\n\n\n\n\n\n    Modules\n    CommonModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/common/common.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\n\n@Module({})\nexport class CommonModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateAdminDto.html":{"url":"classes/CreateAdminDto.html","title":"class - CreateAdminDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateAdminDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/admin/dto/create-admin.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CreateAdminDto {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateAlbumDto.html":{"url":"classes/CreateAlbumDto.html","title":"class - CreateAlbumDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateAlbumDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/album/dto/create-album.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                clientEmail\n                            \n                            \n                                    \n                                    \n                                clientPhoneNumber\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                    \n                                eventDate\n                            \n                            \n                                    \n                                    \n                                isActiveFolder\n                            \n                            \n                                    \n                                    \n                                passwordEvent\n                            \n                            \n                                    \n                                    \n                                    \n                                priceDigital\n                            \n                            \n                                    \n                                    \n                                    \n                                prices\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                priceSchoolSports\n                            \n                            \n                                    \n                                    \n                                title\n                            \n                            \n                                    \n                                    \n                                userEvent\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        clientEmail\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/album/dto/create-album.dto.ts:66\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        clientPhoneNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/album/dto/create-album.dto.ts:70\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/album/dto/create-album.dto.ts:74\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        eventDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsDateString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/album/dto/create-album.dto.ts:62\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        isActiveFolder\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/album/dto/create-album.dto.ts:78\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        passwordEvent\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/album/dto/create-album.dto.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        priceDigital\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsNumber()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/album/dto/create-album.dto.ts:53\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        prices\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PriceOptionDto[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/album/dto/create-album.dto.ts:48\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        priceSchoolSports\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsNumber()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/album/dto/create-album.dto.ts:58\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/album/dto/create-album.dto.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        userEvent\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/album/dto/create-album.dto.ts:39\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from 'class-transformer';\nimport {\n  IsArray,\n  IsBoolean,\n  IsDateString,\n  IsEmail,\n  IsEnum,\n  IsNotEmpty,\n  IsNumber,\n  IsOptional,\n  IsString,\n  ValidateNested,\n} from 'class-validator';\n\nexport enum PrintSize {\n  SMALL = 'S',\n  MEDIUM = 'M',\n  LARGE = 'L',\n}\n\nclass PriceOptionDto {\n  @IsNotEmpty()\n  @IsEnum(PrintSize)\n  size: PrintSize;\n\n  @IsNotEmpty()\n  @IsNumber()\n  @Type(() => Number)\n  price: number;\n}\n\nexport class CreateAlbumDto {\n  @IsNotEmpty()\n  @IsString()\n  title: string;\n\n  @IsNotEmpty()\n  @IsString()\n  userEvent: string;\n\n  @IsNotEmpty()\n  @IsString()\n  passwordEvent: string;\n\n  @IsArray()\n  @ValidateNested({ each: true })\n  @Type(() => PriceOptionDto)\n  prices: PriceOptionDto[];\n\n  @IsNotEmpty()\n  @IsNumber()\n  @Type(() => Number)\n  priceDigital: number;\n\n  @IsOptional()\n  @IsNumber()\n  @Type(() => Number)\n  priceSchoolSports?: number;\n\n  @IsNotEmpty()\n  @IsDateString()\n  eventDate: string;\n\n  @IsNotEmpty()\n  @IsEmail()\n  clientEmail: string;\n\n  @IsNotEmpty()\n  @IsString()\n  clientPhoneNumber: string;\n\n  @IsOptional()\n  @IsString()\n  description?: string;\n\n  @IsNotEmpty()\n  @IsBoolean()\n  isActiveFolder: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateLeadDto.html":{"url":"classes/CreateLeadDto.html","title":"class - CreateLeadDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateLeadDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lead/dto/create-lead.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                email\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/lead/dto/create-lead.dto.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail } from 'class-validator';\n\nexport class CreateLeadDto {\n  @IsEmail()\n  email: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateMercadopagoDto.html":{"url":"classes/CreateMercadopagoDto.html","title":"class - CreateMercadopagoDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateMercadopagoDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/mercadopago/dto/create-mercadopago.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CreateMercadopagoDto {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateOrderDto.html":{"url":"classes/CreateOrderDto.html","title":"class - CreateOrderDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateOrderDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/order/dto/create-order.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                albumId\n                            \n                            \n                                    \n                                    \n                                    \n                                items\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        albumId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsUUID()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/order/dto/create-order.dto.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        items\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OrderItemDto[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/order/dto/create-order.dto.ts:35\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsUUID,\n  IsArray,\n  ValidateNested,\n  IsInt,\n  IsString,\n  IsNumber,\n  Min,\n} from 'class-validator';\nimport { Type } from 'class-transformer';\n\nclass OrderItemDto {\n  @IsUUID()\n  photoId: string;\n\n  @IsString()\n  size: string;\n\n  @IsInt()\n  @Min(1)\n  quantity: number;\n\n  @IsNumber()\n  unitPrice: number;\n}\n\nexport class CreateOrderDto {\n  @IsUUID()\n  albumId: string;\n\n  @IsArray()\n  @ValidateNested({ each: true })\n  @Type(() => OrderItemDto)\n  items: OrderItemDto[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePaymentAccountDto.html":{"url":"classes/CreatePaymentAccountDto.html","title":"class - CreatePaymentAccountDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePaymentAccountDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/payment/dto/create-payment.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                accessToken\n                            \n                            \n                                    \n                                provider\n                            \n                            \n                                    \n                                    Optional\n                                providerUserId\n                            \n                            \n                                    \n                                    Optional\n                                refreshToken\n                            \n                            \n                                    \n                                    Optional\n                                tokenExpiresAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        accessToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/payment/dto/create-payment.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        provider\n                        \n                    \n                \n            \n                \n                    \n                        Type :     unknown\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(['mercadopago'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/payment/dto/create-payment.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        providerUserId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/payment/dto/create-payment.dto.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        refreshToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/payment/dto/create-payment.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        tokenExpiresAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/payment/dto/create-payment.dto.ts:15\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEnum, IsNotEmpty, IsOptional, IsString } from 'class-validator';\n\nexport class CreatePaymentAccountDto {\n  @IsEnum(['mercadopago'])\n  provider: 'mercadopago';\n\n  @IsNotEmpty()\n  accessToken: string;\n\n  @IsOptional()\n  refreshToken?: string;\n\n  @IsOptional()\n  tokenExpiresAt?: Date;\n\n  @IsOptional()\n  providerUserId?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePhotoDto.html":{"url":"classes/CreatePhotoDto.html","title":"class - CreatePhotoDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePhotoDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/photo/dto/create-photo.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                albumId\n                            \n                            \n                                    \n                                url\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        albumId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsUUID()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/photo/dto/create-photo.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/photo/dto/create-photo.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsUUID, IsOptional, IsNumber } from 'class-validator';\n\nexport class CreatePhotoDto {\n  @IsString()\n  url: string;\n\n  @IsUUID()\n  albumId: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateSeedDto.html":{"url":"classes/CreateSeedDto.html","title":"class - CreateSeedDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateSeedDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/seed/dto/create-seed.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CreateSeedDto {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateSubscriptionDto.html":{"url":"classes/CreateSubscriptionDto.html","title":"class - CreateSubscriptionDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateSubscriptionDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/subscription/dto/create-subscription.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CreateSubscriptionDto {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateSubscriptionOrderDto.html":{"url":"classes/CreateSubscriptionOrderDto.html","title":"class - CreateSubscriptionOrderDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateSubscriptionOrderDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/subscription/dto/create-subscription-order.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                planId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        planId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsUUID()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/dto/create-subscription-order.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsUUID } from 'class-validator';\n\nexport class CreateSubscriptionOrderDto {\n  @IsUUID()\n  planId: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                image\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                password\n                            \n                            \n                                    \n                                role\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/create-user.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        image\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsUrl()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/create-user.dto.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/create-user.dto.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()@MinLength(6)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/create-user.dto.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserRole\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(UserRole)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/create-user.dto.ts:21\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsEmail,\n  IsEnum,\n  IsOptional,\n  IsString,\n  MinLength,\n  IsUrl,\n} from 'class-validator';\nimport { UserRole } from 'src/user/dto/base-user.dto';\n\nexport class CreateUserDto {\n  @IsEmail()\n  email: string;\n\n  @IsOptional()\n  @IsString()\n  @MinLength(6)\n  password?: string;\n\n  @IsEnum(UserRole)\n  role: UserRole;\n\n  @IsOptional()\n  @IsString()\n  name?: string;\n\n  @IsOptional()\n  @IsUrl()\n  image?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/FilesController.html":{"url":"controllers/FilesController.html","title":"controller - FilesController","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Controllers\n  FilesController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/files/files.controller.ts\n        \n            \n                Prefix\n            \n            \n                files\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                uploadFile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        uploadFile\n                        \n                    \n                \n            \n            \n                \n                        \n                    uploadFile(file: Express.Multer.File, req: unknown)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(AuthGuard)@Post('upload')@UseInterceptors(undefined)\n                \n            \n\n                    \n                        \n                            Defined in src/files/files.controller.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                file\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                                        unknown\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  BadRequestException,\n  Controller,\n  Post,\n  Req,\n  UploadedFile,\n  UseGuards,\n  UseInterceptors,\n} from '@nestjs/common';\nimport { FileInterceptor } from '@nestjs/platform-express';\nimport { FilesService } from './files.service';\nimport { AuthGuard } from '../common/guards/auth.guard';\n\n@Controller('files')\nexport class FilesController {\n  constructor(private readonly filesService: FilesService) {}\n\n  @UseGuards(AuthGuard)\n  @Post('upload')\n  @UseInterceptors(FileInterceptor('file'))\n  async uploadFile(@UploadedFile() file: Express.Multer.File, @Req() req) {\n    const userId = req.user.sub;\n\n    if (!file) {\n      throw new BadRequestException('No se envió ningún archivo');\n    }\n\n    // Validar que sea formato webp\n    if (file.mimetype !== 'image/webp') {\n      throw new BadRequestException(\n        'Solo se permiten archivos en formato .webp',\n      );\n    }\n\n    return this.filesService.uploadImage(file, userId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/FilesModule.html":{"url":"modules/FilesModule.html","title":"module - FilesModule","body":"\n                   \n\n\n\n\n\n\n\n\n    Modules\n    FilesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_FilesModule\n\n\n\ncluster_FilesModule_providers\n\n\n\ncluster_FilesModule_exports\n\n\n\ncluster_FilesModule_imports\n\n\n\n\nUserModule\n\nUserModule\n\n\n\nFilesModule\n\nFilesModule\n\nFilesModule -->\n\nUserModule->FilesModule\n\n\n\n\n\nFilesService \n\nFilesService \n\nFilesService  -->\n\nFilesModule->FilesService \n\n\n\n\n\nFilesService\n\nFilesService\n\nFilesModule -->\n\nFilesService->FilesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/files/files.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            FilesService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            FilesController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UserModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            FilesService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { FilesService } from './files.service';\nimport { FilesController } from './files.controller';\nimport { ConfigModule } from '@nestjs/config';\nimport { UserModule } from '../user/user.module';\n\n@Module({\n  imports: [ConfigModule, UserModule],\n  controllers: [FilesController],\n  providers: [FilesService],\n  exports: [FilesService],\n})\nexport class FilesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FilesService.html":{"url":"injectables/FilesService.html","title":"injectable - FilesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Injectables\n  FilesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/files/files.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                deleteImage\n                            \n                            \n                                    Async\n                                uploadImage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService)\n                    \n                \n                        \n                            \n                                Defined in src/files/files.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deleteImage\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteImage(publicId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/files/files.service.ts:89\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                publicId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        uploadImage\n                        \n                    \n                \n            \n            \n                \n                        \n                    uploadImage(file: Express.Multer.File, userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/files/files.service.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                file\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  Injectable,\n  NotFoundException,\n} from '@nestjs/common';\nimport { v2 as cloudinary } from 'cloudinary';\nimport { randomUUID } from 'crypto';\nimport { UserService } from '../user/user.service';\nimport { UserHelpers } from 'src/user/helpers/user.helpers';\n\n@Injectable()\nexport class FilesService {\n  constructor(private readonly userService: UserService) {\n    cloudinary.config({\n      cloud_name: process.env.CLOUDINARY_CLOUD_NAME,\n      api_key: process.env.CLOUDINARY_API_KEY,\n      api_secret: process.env.CLOUDINARY_API_SECRET,\n    });\n  }\n\n  async uploadImage(\n    file: Express.Multer.File,\n    userId: string,\n  ): Promise {\n    const fileSizeInMb = file.size / (1024 * 1024);\n    const maxFileSizeMb = 5; // 5 MB\n\n    if (fileSizeInMb > maxFileSizeMb) {\n      throw new BadRequestException(\n        `El archivo excede el tamaño máximo permitido (${maxFileSizeMb} MB).`,\n      );\n    }\n\n    const user = await this.userService.findById(userId);\n\n    if (!user) {\n      throw new NotFoundException('Usuario no encontrado');\n    }\n\n    // ✅ Usar helper para validar almacenamiento\n    if (!UserHelpers.canUpload(user, fileSizeInMb)) {\n      throw new BadRequestException(\n        `No podés subir este archivo. Supera tu límite de almacenamiento (${UserHelpers.getMaxStorageMb(\n          user,\n        )} MB)`,\n      );\n    }\n\n    const uniqueId = randomUUID().replace(/-/g, '').substring(0, 16);\n\n    const result: any = await new Promise((resolve, reject) => {\n      const uploadStream = cloudinary.uploader.upload_stream(\n        {\n          public_id: uniqueId,\n          folder: `FotoNube/user_${userId}`,\n          resource_type: 'image',\n          // format: 'webp',\n          transformation: { quality: 'auto' },\n        },\n        (error, result) => {\n          if (error) return reject(error);\n          if (result) return resolve(result);\n        },\n      );\n\n      uploadStream.end(file.buffer);\n    });\n\n    // ✅ actualizar storageUsedMb en BD\n    await this.userService.update(userId, {\n      storageUsedMb: (user.storageUsedMb ?? 0) + fileSizeInMb,\n    });\n\n    return {\n      url: result.secure_url,\n      public_id: result.public_id,\n      sizeMb: fileSizeInMb, // 👈 Peso del archivo\n      urlWeb: result.secure_url, // para vista individual\n      urlThumbnail: result.secure_url, // para galerías/listados\n    };\n  }\n\n  async deleteImage(publicId: string) {\n    return new Promise((resolve, reject) => {\n      cloudinary.uploader.destroy(publicId, (error, result) => {\n        if (error) return reject(error);\n        resolve(result);\n      });\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Lead.html":{"url":"entities/Lead.html","title":"entity - Lead","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Entities\n  Lead\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lead/entities/lead.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/lead/entities/lead.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/lead/entities/lead.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/lead/entities/lead.entity.ts:11\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  CreateDateColumn,\n  Entity,\n  PrimaryGeneratedColumn,\n} from 'typeorm';\n\n@Entity()\nexport class Lead {\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n\n  @Column({ unique: true })\n  email: string;\n\n  @CreateDateColumn()\n  createdAt: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/LeadController.html":{"url":"controllers/LeadController.html","title":"controller - LeadController","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Controllers\n  LeadController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lead/lead.controller.ts\n        \n            \n                Prefix\n            \n            \n                leads\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                create\n                            \n                            \n                                    \n                                    Async\n                                findAll\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(dto: CreateLeadDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/lead/lead.controller.ts:11\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            CreateLeadDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/lead/lead.controller.ts:16\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        // src/lead/lead.controller.ts\nimport { Body, Controller, Get, Post } from '@nestjs/common';\nimport { LeadService } from './lead.service';\nimport { CreateLeadDto } from './dto/create-lead.dto';\n\n@Controller('leads')\nexport class LeadController {\n  constructor(private readonly leadService: LeadService) {}\n\n  @Post()\n  async create(@Body() dto: CreateLeadDto) {\n    return this.leadService.create(dto);\n  }\n\n  @Get()\n  async findAll() {\n    return this.leadService.findAll();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/LeadModule.html":{"url":"modules/LeadModule.html","title":"module - LeadModule","body":"\n                   \n\n\n\n\n\n\n\n\n    Modules\n    LeadModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_LeadModule\n\n\n\ncluster_LeadModule_providers\n\n\n\n\nLeadService\n\nLeadService\n\n\n\nLeadModule\n\nLeadModule\n\nLeadModule -->\n\nLeadService->LeadModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/lead/lead.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            LeadService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            LeadController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Lead } from './entities/lead.entity';\nimport { LeadService } from './lead.service';\nimport { LeadController } from './lead.controller';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Lead])],\n  controllers: [LeadController],\n  providers: [LeadService],\n})\nexport class LeadModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LeadService.html":{"url":"injectables/LeadService.html","title":"injectable - LeadService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Injectables\n  LeadService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lead/lead.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(leadRepo: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/lead/lead.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        leadRepo\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(dto: CreateLeadDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/lead/lead.service.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            CreateLeadDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/lead/lead.service.ts:25\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, ConflictException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { Lead } from './entities/lead.entity';\nimport { CreateLeadDto } from './dto/create-lead.dto';\n\n@Injectable()\nexport class LeadService {\n  constructor(\n    @InjectRepository(Lead)\n    private readonly leadRepo: Repository,\n  ) {}\n\n  async create(dto: CreateLeadDto) {\n    const exists = await this.leadRepo.findOne({ where: { email: dto.email } });\n    if (exists) {\n      throw new ConflictException('Este correo ya está registrado');\n    }\n\n    const lead = this.leadRepo.create(dto);\n    return this.leadRepo.save(lead);\n  }\n\n  async findAll() {\n    return this.leadRepo.find({ order: { createdAt: 'DESC' } });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginDto.html":{"url":"classes/LoginDto.html","title":"class - LoginDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/login.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                image\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        image\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsUrl()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login.dto.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login.dto.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()@MinLength(6)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login.dto.ts:16\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsEmail,\n  IsOptional,\n  IsString,\n  MinLength,\n  IsUrl,\n} from 'class-validator';\n\nexport class LoginDto {\n  @IsEmail()\n  email: string;\n\n  @IsOptional()\n  @IsString()\n  @MinLength(6)\n  password?: string;\n\n  @IsOptional()\n  @IsString()\n  name?: string;\n\n  @IsOptional()\n  @IsUrl()\n  image?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MailModule.html":{"url":"modules/MailModule.html","title":"module - MailModule","body":"\n                   \n\n\n\n\n\n\n\n\n    Modules\n    MailModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_MailModule\n\n\n\ncluster_MailModule_exports\n\n\n\ncluster_MailModule_providers\n\n\n\n\nMailService \n\nMailService \n\n\n\nMailModule\n\nMailModule\n\nMailService  -->\n\nMailModule->MailService \n\n\n\n\n\nMailService\n\nMailService\n\nMailModule -->\n\nMailService->MailModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/mail/mail.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            MailService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            MailService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MailService } from './mail.service';\n\n@Module({\n  providers: [MailService],\n  exports: [MailService],\n})\nexport class MailModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MailService.html":{"url":"injectables/MailService.html","title":"injectable - MailService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Injectables\n  MailService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/mail/mail.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                            \n                                    Private\n                                    Readonly\n                                resend\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Async\n                                sendMail\n                            \n                            \n                                    Async\n                                sendNewOrderNotification\n                            \n                            \n                                    Async\n                                sendOrderPaymentEmail\n                            \n                            \n                                    Async\n                                sendPasswordResetEmail\n                            \n                            \n                                    Async\n                                sendProWelcomeEmail\n                            \n                            \n                                    Async\n                                sendWelcomeEmail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/mail/mail.service.ts:16\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        sendMail\n                        \n                    \n                \n            \n            \n                \n                        \n                    sendMail(to: string, subject: string, html: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/mail/mail.service.ts:22\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                to\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                subject\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                html\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        sendNewOrderNotification\n                        \n                    \n                \n            \n            \n                \n                        \n                    sendNewOrderNotification(photographerEmail: string, orderId: string, total: string, itemCount: number, buyerName: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/mail/mail.service.ts:84\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                photographerEmail\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                orderId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                total\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                itemCount\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                buyerName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        sendOrderPaymentEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    sendOrderPaymentEmail(to: string, orderId: string, total: string, itemCount: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/mail/mail.service.ts:66\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                to\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                orderId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                total\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                itemCount\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        sendPasswordResetEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    sendPasswordResetEmail(to: string, resetLink: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/mail/mail.service.ts:56\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                to\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                resetLink\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        sendProWelcomeEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    sendProWelcomeEmail(to: string, name?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/mail/mail.service.ts:61\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                to\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        sendWelcomeEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    sendWelcomeEmail(to: string, role: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/mail/mail.service.ts:42\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                to\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                role\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Type :     unknown\n\n                    \n                \n                \n                    \n                        Default value : new Logger(MailService.name)\n                    \n                \n                    \n                        \n                                Defined in src/mail/mail.service.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        resend\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Resend\n\n                    \n                \n                    \n                        \n                                Defined in src/mail/mail.service.ts:15\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger } from '@nestjs/common';\nimport { Resend } from 'resend';\n\nimport { generatePasswordResetEmail } from 'lib/emailForgotPassword';\nimport { generateNewOrderNotificationEmail } from 'lib/emailNewOrderNotification';\nimport { generatePurchaseConfirmationEmail } from 'lib/emailOrderPayment';\nimport { generateProWelcomeEmail } from 'lib/emailProWelcome';\nimport {\n  generateBuyerWelcomeEmail,\n  generatePhotographerWelcomeEmail,\n} from 'lib/emailWelcome';\n\n@Injectable()\nexport class MailService {\n  private readonly resend: Resend;\n  private readonly logger = new Logger(MailService.name);\n\n  constructor() {\n    this.resend = new Resend(process.env.RESEND_API_KEY);\n  }\n\n  private async sendMail(to: string, subject: string, html: string) {\n    try {\n      const { data, error } = await this.resend.emails.send({\n        from: 'FotoNube ',\n        to,\n        subject,\n        html,\n      });\n\n      if (error) {\n        this.logger.error(`❌ Error al enviar correo a ${to}`, error);\n        return;\n      }\n\n      this.logger.log(`✅ Email enviado a ${to}: ${data?.id}`);\n    } catch (err) {\n      this.logger.error(`❌ Error inesperado al enviar correo a ${to}`, err);\n    }\n  }\n\n  async sendWelcomeEmail(to: string, role: string) {\n    let htmlContent;\n\n    if (role === 'photographer')\n      htmlContent = generatePhotographerWelcomeEmail();\n    else if (role === 'buyer') htmlContent = generateBuyerWelcomeEmail();\n    else {\n      this.logger.warn(`Rol desconocido: ${role}`);\n      return;\n    }\n\n    await this.sendMail(to, '¡Bienvenido a FotoNube!', htmlContent);\n  }\n\n  async sendPasswordResetEmail(to: string, resetLink: string) {\n    const htmlContent = generatePasswordResetEmail({ resetLink });\n    await this.sendMail(to, 'Recupera tu contraseña en FotoNube', htmlContent);\n  }\n\n  async sendProWelcomeEmail(to: string, name?: string) {\n    const htmlContent = generateProWelcomeEmail({ name });\n    await this.sendMail(to, '¡Bienvenido a FotoNube Pro!', htmlContent);\n  }\n\n  async sendOrderPaymentEmail(\n    to: string,\n    orderId: string,\n    total: string,\n    itemCount: number,\n  ) {\n    const htmlContent = generatePurchaseConfirmationEmail(\n      orderId,\n      total,\n      itemCount,\n    );\n    await this.sendMail(\n      to,\n      'Confirmación de tu compra en FotoNube',\n      htmlContent,\n    );\n  }\n\n  async sendNewOrderNotification(\n    photographerEmail: string,\n    orderId: string,\n    total: string,\n    itemCount: number,\n    buyerName: string,\n  ) {\n    const htmlContent = generateNewOrderNotificationEmail(\n      orderId,\n      total,\n      itemCount,\n      buyerName,\n    );\n    await this.sendMail(\n      photographerEmail,\n      '¡Nuevo pedido recibido en FotoNube!',\n      htmlContent,\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Mercadopago.html":{"url":"classes/Mercadopago.html","title":"class - Mercadopago","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Mercadopago\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/mercadopago/entities/mercadopago.entity.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class Mercadopago {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/MercadopagoController.html":{"url":"controllers/MercadopagoController.html","title":"controller - MercadopagoController","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Controllers\n  MercadopagoController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/mercadopago/mercadopago.controller.ts\n        \n            \n                Prefix\n            \n            \n                mercadopago\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                handleWebhook\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        handleWebhook\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleWebhook(req: Request, res: Response, signature: string, requestId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('webhook')\n                \n            \n\n                    \n                        \n                            Defined in src/mercadopago/mercadopago.controller.ts:10\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                signature\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                requestId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Headers, Post, Req, Res } from '@nestjs/common';\nimport { Request, Response } from 'express';\nimport { MercadopagoService } from './mercadopago.service';\n\n@Controller('mercadopago')\nexport class MercadopagoController {\n  constructor(private readonly mercadopagoService: MercadopagoService) {}\n\n  @Post('webhook')\n  async handleWebhook(\n    @Req() req: Request,\n    @Res() res: Response,\n    @Headers('x-signature') signature: string,\n    @Headers('x-request-id') requestId: string,\n  ) {\n    try {\n      // Si no hay body o viene vacío, MercadoPago solo está validando la URL\n      if (!req.body || (Buffer.isBuffer(req.body) && req.body.length === 0)) {\n        console.log('📡 MercadoPago hizo una verificación del webhook (ping)');\n        return res.status(200).send('Webhook verificado correctamente');\n      }\n\n      // Si viene con contenido, procesamos normalmente\n      const rawBody = req.body.toString('utf-8');\n      const parsedBody = JSON.parse(rawBody);\n\n      res.status(200).send('OK');\n\n      await this.mercadopagoService.processNotification(\n        rawBody,\n        parsedBody,\n        signature,\n        requestId,\n      );\n    } catch (error) {\n      console.error('Error en webhook MercadoPago:', error);\n      res.status(200).send('OK'); // Evitar reintentos infinitos\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MercadopagoModule.html":{"url":"modules/MercadopagoModule.html","title":"module - MercadopagoModule","body":"\n                   \n\n\n\n\n\n\n\n\n    Modules\n    MercadopagoModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_MercadopagoModule\n\n\n\ncluster_MercadopagoModule_imports\n\n\n\ncluster_MercadopagoModule_providers\n\n\n\ncluster_MercadopagoModule_exports\n\n\n\n\nOrdersModule\n\nOrdersModule\n\n\n\nMercadopagoModule\n\nMercadopagoModule\n\nMercadopagoModule -->\n\nOrdersModule->MercadopagoModule\n\n\n\n\n\nSubscriptionModule\n\nSubscriptionModule\n\nMercadopagoModule -->\n\nSubscriptionModule->MercadopagoModule\n\n\n\n\n\nMercadopagoService \n\nMercadopagoService \n\nMercadopagoService  -->\n\nMercadopagoModule->MercadopagoService \n\n\n\n\n\nMercadopagoService\n\nMercadopagoService\n\nMercadopagoModule -->\n\nMercadopagoService->MercadopagoModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/mercadopago/mercadopago.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            MercadopagoService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            MercadopagoController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            OrdersModule\n                        \n                        \n                            SubscriptionModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            MercadopagoService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        // mercadopago.module.ts\nimport { Module } from '@nestjs/common';\nimport { HttpModule } from '@nestjs/axios'; // 1. Import HttpModule\nimport { MercadopagoService } from './mercadopago.service';\nimport { OrdersModule } from 'src/order/order.module';\nimport { ConfigModule } from '@nestjs/config';\nimport { MercadopagoController } from './mercadopago.controller';\nimport { SubscriptionModule } from 'src/subscription/subscription.module';\n\n@Module({\n  imports: [HttpModule, OrdersModule, SubscriptionModule, ConfigModule],\n  controllers: [MercadopagoController],\n  providers: [MercadopagoService],\n  exports: [MercadopagoService],\n})\nexport class MercadopagoModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MercadopagoService.html":{"url":"injectables/MercadopagoService.html","title":"injectable - MercadopagoService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Injectables\n  MercadopagoService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/mercadopago/mercadopago.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                secret\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Async\n                                handlePaymentUpdate\n                            \n                            \n                                    Private\n                                isValidSignature\n                            \n                            \n                                    Async\n                                processNotification\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(httpService: HttpService, configService: ConfigService, buyerOrdersService: BuyerOrdersService, subscriptionService: SubscriptionService)\n                    \n                \n                        \n                            \n                                Defined in src/mercadopago/mercadopago.service.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        httpService\n                                                  \n                                                        \n                                                                    HttpService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        buyerOrdersService\n                                                  \n                                                        \n                                                                        BuyerOrdersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        subscriptionService\n                                                  \n                                                        \n                                                                        SubscriptionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        handlePaymentUpdate\n                        \n                    \n                \n            \n            \n                \n                        \n                    handlePaymentUpdate(payment: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/mercadopago/mercadopago.service.ts:110\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payment\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        isValidSignature\n                        \n                    \n                \n            \n            \n                \n                        \n                    isValidSignature(rawBody: string, signature: string, requestId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/mercadopago/mercadopago.service.ts:76\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                rawBody\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                signature\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                requestId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        processNotification\n                        \n                    \n                \n            \n            \n                \n                        \n                    processNotification(rawBody: string, parsedBody: any, signature: string, requestId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/mercadopago/mercadopago.service.ts:29\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                rawBody\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                parsedBody\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                signature\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                requestId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        secret\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/mercadopago/mercadopago.service.ts:16\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { HttpService } from '@nestjs/axios';\nimport {\n  BadRequestException,\n  Injectable,\n  InternalServerErrorException,\n} from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { log } from 'console';\nimport { createHmac } from 'crypto';\nimport { firstValueFrom } from 'rxjs';\nimport { BuyerOrdersService } from 'src/order/buyer-orders.service';\nimport { SubscriptionService } from 'src/subscription/subscription.service';\n\n@Injectable()\nexport class MercadopagoService {\n  private secret: string;\n\n  constructor(\n    private readonly httpService: HttpService,\n    private readonly configService: ConfigService,\n    private readonly buyerOrdersService: BuyerOrdersService,\n    private readonly subscriptionService: SubscriptionService,\n  ) {\n    const secret = this.configService.get('MP_WEBHOOK_SECRET');\n    if (!secret) throw new Error('MP_WEBHOOK_SECRET no configurada');\n    this.secret = secret;\n  }\n\n  async processNotification(\n    rawBody: string,\n    parsedBody: any,\n    signature: string,\n    requestId: string,\n  ) {\n    /*    if (!this.isValidSignature(rawBody, signature, requestId)) {\n      console.error('Firma inválida en webhook de Mercado Pago');\n      return;\n    } */\n\n    const { type, data } = parsedBody;\n\n    console.log('Webhook recibido:', parsedBody);\n\n    if (type === 'payment') {\n      try {\n        const url = `https://api.mercadopago.com/v1/payments/${data.id}`;\n        const { data: paymentData } = await firstValueFrom(\n          this.httpService.get(url, {\n            headers: {\n              Authorization: `Bearer ${this.configService.get(\n                'MP_MARKETPLACE_ACCESS_TOKEN',\n              )}`,\n            },\n          }),\n        );\n\n        const registroId = paymentData.external_reference;\n        if (!registroId) {\n          console.warn('Pago sin external_reference:', paymentData);\n          throw new BadRequestException('Pago sin external_reference');\n        }\n\n        await this.handlePaymentUpdate(paymentData);\n      } catch (error) {\n        console.error(\n          'Error fetching payment details:',\n          error.response?.data || error.message,\n        );\n        throw new InternalServerErrorException(\n          'Failed to process payment notification',\n        );\n      }\n    }\n  }\n\n  private isValidSignature(\n    rawBody: string,\n    signature: string,\n    requestId: string,\n  ): boolean {\n    if (!signature) return false;\n\n    // Extraer ts y v1\n    const tsPart = signature.split(',').find((p) => p.startsWith('ts='));\n    const v1Part = signature.split(',').find((p) => p.startsWith('v1='));\n    const ts = tsPart?.substring(3);\n    const v1 = v1Part?.substring(3);\n\n    if (!ts || !v1) return false;\n\n    // Construimos la plantilla oficial\n    let template = '';\n    const body = JSON.parse(rawBody);\n\n    if (body?.data?.id)\n      template += `id:${body.data.id.toString().toLowerCase()};`;\n    if (requestId) template += `request-id:${requestId};`;\n    template += `ts:${ts};`;\n\n    const hmac = createHmac('sha256', this.secret)\n      .update(template)\n      .digest('hex');\n\n    console.log('Firma recibida:', v1);\n    console.log('Firma generada:', hmac);\n\n    return hmac === v1;\n  }\n\n  private async handlePaymentUpdate(payment: any) {\n    const { external_reference, status } = payment;\n\n    if (!external_reference) return;\n\n    if (external_reference.startsWith('buyerOrder-')) {\n      const orderId = external_reference.replace('buyerOrder-', '');\n      console.log(\n        `Actualizando orden de compra ${orderId} con estado ${status}`,\n      );\n      if (status === 'approved') {\n        await this.buyerOrdersService.updateOrderStatus(orderId, 'approved');\n      } else if (status === 'rejected') {\n        await this.buyerOrdersService.updateOrderStatus(orderId, 'rejected');\n      }\n    } else if (external_reference.startsWith('subscription-')) {\n      const subscriptionId = external_reference.replace('subscription-', '');\n      console.log(\n        `Actualizando suscripción ${subscriptionId} con estado ${status}`,\n      );\n      if (status === 'approved') {\n        await this.subscriptionService.updateSubscriptionOrderStatus(\n          subscriptionId,\n          'approved',\n        );\n      } else if (status === 'rejected') {\n        await this.subscriptionService.updateSubscriptionOrderStatus(\n          subscriptionId,\n          'rejected',\n        );\n      }\n    } else {\n      console.warn('External_reference no reconocido:', external_reference);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Order.html":{"url":"entities/Order.html","title":"entity - Order","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Entities\n  Order\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/order/entities/order.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                album\n                            \n                            \n                                    \n                                buyer\n                            \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                deliveryStatus\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                items\n                            \n                            \n                                    \n                                status\n                            \n                            \n                                    \n                                total\n                            \n                            \n                                    \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        album\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Album\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, album => album.orders, {eager: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/order/entities/order.entity.ts:75\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        buyer\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.orders, {eager: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/order/entities/order.entity.ts:72\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/order/entities/order.entity.ts:65\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deliveryStatus\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DeliveryStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: undefined, default: 'pending'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/order/entities/order.entity.ts:62\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/order/entities/order.entity.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        items\n                        \n                    \n                \n            \n                \n                    \n                        Type :     OrderItem[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, item => item.order, {cascade: true, eager: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/order/entities/order.entity.ts:81\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OrderStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: undefined, default: 'pending'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/order/entities/order.entity.ts:54\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        total\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('decimal', {precision: 10, scale: 2, default: 0})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/order/entities/order.entity.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/order/entities/order.entity.ts:68\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        // order.entity.ts\nimport {\n  Column,\n  CreateDateColumn,\n  Entity,\n  ManyToOne,\n  OneToMany,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from 'typeorm';\nimport { Album } from '../../album/entities/album.entity';\nimport { User } from '../../user/entities/user.entity';\nimport { OrderItem } from './order-item.entity';\n\nexport type OrderStatus =\n  | 'pending'\n  | 'approved'\n  | 'authorized'\n  | 'in_process'\n  | 'in_mediation'\n  | 'rejected'\n  | 'cancelled'\n  | 'refunded'\n  | 'charged_back';\n\nexport type DeliveryStatus =\n  | 'pending' // aún no entregado\n  | 'delivered' // entregado (digital o físico)\n  | 'in_progress'; // si querés estados intermedios (ej: preparando)\n\n@Entity()\nexport class Order {\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n\n  @Column('decimal', { precision: 10, scale: 2, default: 0 })\n  total: number;\n\n  @Column({\n    type: 'enum',\n    enum: [\n      'pending',\n      'approved',\n      'authorized',\n      'in_process',\n      'in_mediation',\n      'rejected',\n      'cancelled',\n      'refunded',\n      'charged_back',\n    ],\n    default: 'pending',\n  })\n  status: OrderStatus;\n\n  // 🔹 Estado de entrega (para el fotógrafo)\n  @Column({\n    type: 'enum',\n    enum: ['pending', 'in_progress', 'delivered'],\n    default: 'pending',\n  })\n  deliveryStatus: DeliveryStatus;\n\n  @CreateDateColumn()\n  createdAt: Date;\n\n  @UpdateDateColumn()\n  updatedAt: Date;\n\n  /* Relaciones */\n  @ManyToOne(() => User, (user) => user.orders, { eager: true })\n  buyer: User;\n\n  @ManyToOne(() => Album, (album) => album.orders, { eager: true })\n  album: Album;\n\n  @OneToMany(() => OrderItem, (item) => item.order, {\n    cascade: true,\n    eager: true,\n  })\n  items: OrderItem[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/OrderItem.html":{"url":"entities/OrderItem.html","title":"entity - OrderItem","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Entities\n  OrderItem\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/order/entities/order-item.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                order\n                            \n                            \n                                    \n                                originalPhotoId\n                            \n                            \n                                    \n                                photoThumbnailUrl\n                            \n                            \n                                    \n                                photoUrl\n                            \n                            \n                                    \n                                photoWebUrl\n                            \n                            \n                                    \n                                quantity\n                            \n                            \n                                    \n                                size\n                            \n                            \n                                    \n                                subtotal\n                            \n                            \n                                    \n                                unitPrice\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/order/entities/order-item.entity.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        order\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Order\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, order => order.items, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/order/entities/order-item.entity.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        originalPhotoId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/order/entities/order-item.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        photoThumbnailUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/order/entities/order-item.entity.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        photoUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/order/entities/order-item.entity.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        photoWebUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/order/entities/order-item.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        quantity\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('int')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/order/entities/order-item.entity.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        size\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/order/entities/order-item.entity.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        subtotal\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('decimal', {precision: 10, scale: 2})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/order/entities/order-item.entity.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        unitPrice\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('decimal', {precision: 10, scale: 2})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/order/entities/order-item.entity.ts:37\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        // order-item.entity.ts\nimport { Column, Entity, ManyToOne, PrimaryGeneratedColumn } from 'typeorm';\nimport { Order } from './order.entity';\n\n@Entity()\nexport class OrderItem {\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n\n  @ManyToOne(() => Order, (order) => order.items, { onDelete: 'CASCADE' })\n  order: Order;\n\n  // ❌ Eliminamos la relación directa a Photo\n  // @ManyToOne(() => Photo, { eager: true })\n  // photo: Photo;\n\n  // ✅ Guardamos un snapshot de los datos importantes de la foto\n  @Column()\n  photoUrl: string;\n\n  @Column({ nullable: true })\n  photoWebUrl: string;\n\n  @Column({ nullable: true })\n  photoThumbnailUrl: string;\n\n  @Column({ nullable: true })\n  originalPhotoId: string; // opcional: para referencia histórica, pero sin FK\n\n  @Column()\n  size: string;\n\n  @Column('int')\n  quantity: number;\n\n  @Column('decimal', { precision: 10, scale: 2 })\n  unitPrice: number;\n\n  @Column('decimal', { precision: 10, scale: 2 })\n  subtotal: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/OrderItemDto.html":{"url":"classes/OrderItemDto.html","title":"class - OrderItemDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  OrderItemDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/order/dto/create-order.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                photoId\n                            \n                            \n                                    \n                                    \n                                quantity\n                            \n                            \n                                    \n                                size\n                            \n                            \n                                    \n                                unitPrice\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        photoId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsUUID()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/order/dto/create-order.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        quantity\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsInt()@Min(1)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/order/dto/create-order.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        size\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/order/dto/create-order.dto.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        unitPrice\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/order/dto/create-order.dto.ts:25\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsUUID,\n  IsArray,\n  ValidateNested,\n  IsInt,\n  IsString,\n  IsNumber,\n  Min,\n} from 'class-validator';\nimport { Type } from 'class-transformer';\n\nclass OrderItemDto {\n  @IsUUID()\n  photoId: string;\n\n  @IsString()\n  size: string;\n\n  @IsInt()\n  @Min(1)\n  quantity: number;\n\n  @IsNumber()\n  unitPrice: number;\n}\n\nexport class CreateOrderDto {\n  @IsUUID()\n  albumId: string;\n\n  @IsArray()\n  @ValidateNested({ each: true })\n  @Type(() => OrderItemDto)\n  items: OrderItemDto[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/OrderItemResponseDto.html":{"url":"classes/OrderItemResponseDto.html","title":"class - OrderItemResponseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  OrderItemResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/order/dto/order-buyer.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                            \n                                photo\n                            \n                            \n                                quantity\n                            \n                            \n                                size\n                            \n                            \n                                subtotal\n                            \n                            \n                                unitPrice\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/order/dto/order-buyer.dto.ts:2\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        photo\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                    \n                        \n                                Defined in src/order/dto/order-buyer.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        quantity\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/order/dto/order-buyer.dto.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        size\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/order/dto/order-buyer.dto.ts:3\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        subtotal\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/order/dto/order-buyer.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        unitPrice\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/order/dto/order-buyer.dto.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class OrderItemResponseDto {\n  id: string;\n  size: string;\n  quantity: number;\n  unitPrice: number;\n  subtotal: number;\n  photo: {\n    id: string;\n    url: string;\n  };\n}\n\nexport class AlbumSummaryDto {\n  id: string;\n  title: string;\n  prices: { size: string; price: number }[];\n  priceDigital: number;\n  priceSchoolSports?: number;\n  eventDate: string;\n  description: string;\n}\n\nexport class OrderResponseDto {\n  id: string;\n  album: AlbumSummaryDto;\n  items: OrderItemResponseDto[];\n  total: number;\n  status: string;\n  createdAt: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/OrderResponseDto.html":{"url":"classes/OrderResponseDto.html","title":"class - OrderResponseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  OrderResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/order/dto/order-buyer.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                album\n                            \n                            \n                                createdAt\n                            \n                            \n                                id\n                            \n                            \n                                items\n                            \n                            \n                                status\n                            \n                            \n                                total\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        album\n                        \n                    \n                \n            \n                \n                    \n                        Type :         AlbumSummaryDto\n\n                    \n                \n                    \n                        \n                                Defined in src/order/dto/order-buyer.dto.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                    \n                        \n                                Defined in src/order/dto/order-buyer.dto.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/order/dto/order-buyer.dto.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        items\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OrderItemResponseDto[]\n\n                    \n                \n                    \n                        \n                                Defined in src/order/dto/order-buyer.dto.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/order/dto/order-buyer.dto.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        total\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/order/dto/order-buyer.dto.ts:27\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class OrderItemResponseDto {\n  id: string;\n  size: string;\n  quantity: number;\n  unitPrice: number;\n  subtotal: number;\n  photo: {\n    id: string;\n    url: string;\n  };\n}\n\nexport class AlbumSummaryDto {\n  id: string;\n  title: string;\n  prices: { size: string; price: number }[];\n  priceDigital: number;\n  priceSchoolSports?: number;\n  eventDate: string;\n  description: string;\n}\n\nexport class OrderResponseDto {\n  id: string;\n  album: AlbumSummaryDto;\n  items: OrderItemResponseDto[];\n  total: number;\n  status: string;\n  createdAt: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/OrdersModule.html":{"url":"modules/OrdersModule.html","title":"module - OrdersModule","body":"\n                   \n\n\n\n\n\n\n\n\n    Modules\n    OrdersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_OrdersModule\n\n\n\ncluster_OrdersModule_imports\n\n\n\ncluster_OrdersModule_exports\n\n\n\ncluster_OrdersModule_providers\n\n\n\n\nMailModule\n\nMailModule\n\n\n\nOrdersModule\n\nOrdersModule\n\nOrdersModule -->\n\nMailModule->OrdersModule\n\n\n\n\n\nPaymentModule\n\nPaymentModule\n\nOrdersModule -->\n\nPaymentModule->OrdersModule\n\n\n\n\n\nBuyerOrdersService \n\nBuyerOrdersService \n\nBuyerOrdersService  -->\n\nOrdersModule->BuyerOrdersService \n\n\n\n\n\nBuyerOrdersService\n\nBuyerOrdersService\n\nOrdersModule -->\n\nBuyerOrdersService->OrdersModule\n\n\n\n\n\nPhotographerOrdersService\n\nPhotographerOrdersService\n\nOrdersModule -->\n\nPhotographerOrdersService->OrdersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/order/order.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            BuyerOrdersService\n                        \n                        \n                            PhotographerOrdersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            BuyerOrdersController\n                        \n                        \n                            PhotographerOrdersController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            MailModule\n                        \n                        \n                            PaymentModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            BuyerOrdersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Order } from './entities/order.entity';\nimport { OrderItem } from './entities/order-item.entity';\nimport { User } from 'src/user/entities/user.entity';\nimport { Album } from 'src/album/entities/album.entity';\nimport { Photo } from 'src/photo/entities/photo.entity';\n\nimport { BuyerOrdersController } from './buyer-orders.controller';\nimport { BuyerOrdersService } from './buyer-orders.service';\nimport { PhotographerOrdersController } from './photographer-orders.controller';\nimport { PhotographerOrdersService } from './photographer-orders.service';\nimport { PaymentModule } from 'src/payment/payment.module';\nimport { MailModule } from 'src/mail/mail.module';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([Order, OrderItem, User, Album, Photo]),\n    PaymentModule,\n    MailModule,\n  ],\n  controllers: [BuyerOrdersController, PhotographerOrdersController],\n  providers: [BuyerOrdersService, PhotographerOrdersService],\n  exports: [BuyerOrdersService],\n})\nexport class OrdersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PaginationDto.html":{"url":"classes/PaginationDto.html","title":"class - PaginationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PaginationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/dtos/pagination.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                limit\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                offset\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsPositive()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/pagination.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        offset\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@Min(0)@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/pagination.dto.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from 'class-transformer';\nimport { IsOptional, IsPositive, Min } from 'class-validator';\n\nexport class PaginationDto {\n  @IsOptional()\n  @IsPositive()\n  @Type(() => Number) //enableImplicitConversions: true\n  limit?: number;\n\n  @IsOptional()\n  @Min(0)\n  @Type(() => Number) //enableImplicitConversions: true\n  offset?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PasswordResetService.html":{"url":"injectables/PasswordResetService.html","title":"injectable - PasswordResetService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Injectables\n  PasswordResetService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/password-reset.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                consumeToken\n                            \n                            \n                                    Async\n                                createToken\n                            \n                            \n                                    Async\n                                requestPasswordReset\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(resetRepo: Repository, userRepo: Repository, mailService: MailService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/password-reset.service.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        resetRepo\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userRepo\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        mailService\n                                                  \n                                                        \n                                                                        MailService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        consumeToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    consumeToken(tokenId: string, newPassword: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/password-reset.service.ts:51\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tokenId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                newPassword\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    createToken(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/password-reset.service.ts:40\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        requestPasswordReset\n                        \n                    \n                \n            \n            \n                \n                        \n                    requestPasswordReset(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/password-reset.service.ts:27\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  BadRequestException,\n  NotFoundException,\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\n\nimport { v4 as uuid } from 'uuid';\nimport * as bcrypt from 'bcrypt';\nimport { PasswordResetToken } from './entities/password-reset-token.entity';\nimport { User } from 'src/user/entities/user.entity';\nimport { MailService } from 'src/mail/mail.service';\nimport { isUUID } from 'class-validator';\n\n@Injectable()\nexport class PasswordResetService {\n  constructor(\n    @InjectRepository(PasswordResetToken)\n    private resetRepo: Repository,\n    @InjectRepository(User)\n    private userRepo: Repository,\n    private mailService: MailService,\n  ) {}\n\n  async requestPasswordReset(email: string): Promise {\n    const user = await this.userRepo.findOneBy({ email });\n    if (!user) throw new NotFoundException('Usuario no encontrado');\n\n    const token = await this.createToken(user.id);\n\n    // 🔹 enviar email con link\n    await this.mailService.sendPasswordResetEmail(\n      user.email,\n      `http://localhost:3000/reset-password?token=${token}`,\n    );\n  }\n\n  async createToken(userId: string): Promise {\n    const token = this.resetRepo.create({\n      id: uuid(),\n      user: { id: userId } as User,\n      expiresAt: new Date(Date.now() + 15 * 60 * 1000), // 15 min\n    });\n\n    await this.resetRepo.save(token);\n    return token.id;\n  }\n\n  async consumeToken(tokenId: string, newPassword: string): Promise {\n    if (!isUUID(tokenId)) {\n      throw new BadRequestException('Token inválido');\n    }\n\n    const token = await this.resetRepo.findOne({\n      where: { id: tokenId },\n      relations: ['user'],\n    });\n    if (!token) throw new BadRequestException('Token no encontrado o inválido');\n    if (token.used) throw new BadRequestException('Este token ya fue usado');\n    if (token.expiresAt \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/PasswordResetToken.html":{"url":"entities/PasswordResetToken.html","title":"entity - PasswordResetToken","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Entities\n  PasswordResetToken\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/entities/password-reset-token.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                expiresAt\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                used\n                            \n                            \n                                    \n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/entities/password-reset-token.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        expiresAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/entities/password-reset-token.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/entities/password-reset-token.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        used\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/entities/password-reset-token.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.resetTokens, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/entities/password-reset-token.entity.ts:27\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        // src/auth/entities/password-reset-token.entity.ts\nimport { User } from 'src/user/entities/user.entity';\nimport {\n  Entity,\n  PrimaryGeneratedColumn,\n  Column,\n  CreateDateColumn,\n  ManyToOne,\n} from 'typeorm';\n\n@Entity()\nexport class PasswordResetToken {\n  @PrimaryGeneratedColumn('uuid')\n  id: string; // el token opaco\n\n  @Column({ default: false })\n  used: boolean;\n\n  @Column()\n  expiresAt: Date;\n\n  @CreateDateColumn()\n  createdAt: Date;\n\n  /* Relaciones */\n  @ManyToOne(() => User, (user) => user.resetTokens, { onDelete: 'CASCADE' })\n  user: User;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/PaymentAccount.html":{"url":"entities/PaymentAccount.html","title":"entity - PaymentAccount","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Entities\n  PaymentAccount\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/payment/entities/payment.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                accessToken\n                            \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                provider\n                            \n                            \n                                    \n                                providerUserId\n                            \n                            \n                                    \n                                refreshToken\n                            \n                            \n                                    \n                                tokenExpiresAt\n                            \n                            \n                                    \n                                updatedAt\n                            \n                            \n                                    \n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        accessToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/payment/entities/payment.entity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/payment/entities/payment.entity.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/payment/entities/payment.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        provider\n                        \n                    \n                \n            \n                \n                    \n                        Type :     \"mercadopago\" | \"stripe\"\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: undefined, default: 'mercadopago'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/payment/entities/payment.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        providerUserId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'bigint', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/payment/entities/payment.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        refreshToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/payment/entities/payment.entity.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        tokenExpiresAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'timestamp', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/payment/entities/payment.entity.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/payment/entities/payment.entity.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.paymentAccounts, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/payment/entities/payment.entity.ts:45\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { User } from 'src/user/entities/user.entity';\nimport {\n  Column,\n  CreateDateColumn,\n  Entity,\n  ManyToOne,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from 'typeorm';\n\n@Entity()\nexport class PaymentAccount {\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n\n  @Column({\n    type: 'enum',\n    enum: ['mercadopago', 'stripe'],\n    default: 'mercadopago',\n  })\n  provider: 'mercadopago' | 'stripe';\n\n  @Column({ type: 'bigint', nullable: true })\n  providerUserId: number; // mpUserId\n\n  @Column({ type: 'text', nullable: true })\n  accessToken: string;\n\n  @Column({ type: 'text', nullable: true })\n  refreshToken: string;\n\n  @Column({ type: 'timestamp', nullable: true })\n  tokenExpiresAt: Date;\n\n  @CreateDateColumn()\n  createdAt: Date;\n\n  @UpdateDateColumn()\n  updatedAt: Date;\n\n  /* Relaciones */\n  @ManyToOne(() => User, (user) => user.paymentAccounts, {\n    onDelete: 'CASCADE',\n  })\n  user: User;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PaymentController.html":{"url":"controllers/PaymentController.html","title":"controller - PaymentController","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Controllers\n  PaymentController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/payment/payment.controller.ts\n        \n            \n                Prefix\n            \n            \n                payment\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Async\n                                mercadopagoCallback\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        mercadopagoCallback\n                        \n                    \n                \n            \n            \n                \n                        \n                    mercadopagoCallback(code: string, req: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(AuthGuard)@Get('mercadopago/callback')\n                \n            \n\n                    \n                        \n                            Defined in src/payment/payment.controller.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                code\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        // src/payment/payment.controller.ts\nimport { Controller, Get, Query, Req, UseGuards } from '@nestjs/common';\nimport { PaymentService } from './payment.service';\nimport { AuthGuard } from 'src/common/guards/auth.guard';\n\n@Controller('payment')\nexport class PaymentController {\n  constructor(private readonly paymentService: PaymentService) {}\n\n  @UseGuards(AuthGuard)\n  @Get('mercadopago/callback')\n  async mercadopagoCallback(@Query('code') code: string, @Req() req: any) {\n    const userId = req.user.sub;\n    return this.paymentService.linkMercadoPago(userId, code);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PaymentModule.html":{"url":"modules/PaymentModule.html","title":"module - PaymentModule","body":"\n                   \n\n\n\n\n\n\n\n\n    Modules\n    PaymentModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PaymentModule\n\n\n\ncluster_PaymentModule_providers\n\n\n\ncluster_PaymentModule_imports\n\n\n\ncluster_PaymentModule_exports\n\n\n\n\nUserModule\n\nUserModule\n\n\n\nPaymentModule\n\nPaymentModule\n\nPaymentModule -->\n\nUserModule->PaymentModule\n\n\n\n\n\nPaymentService \n\nPaymentService \n\nPaymentService  -->\n\nPaymentModule->PaymentService \n\n\n\n\n\nPaymentService\n\nPaymentService\n\nPaymentModule -->\n\nPaymentService->PaymentModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/payment/payment.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PaymentService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PaymentController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UserModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PaymentService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        // src/payment/payment.module.ts\nimport { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { PaymentController } from './payment.controller';\nimport { PaymentService } from './payment.service';\n\nimport { UserModule } from 'src/user/user.module';\nimport { PaymentAccount } from './entities/payment.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([PaymentAccount]), UserModule],\n  providers: [PaymentService],\n  controllers: [PaymentController],\n  exports: [PaymentService],\n})\nexport class PaymentModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PaymentService.html":{"url":"injectables/PaymentService.html","title":"injectable - PaymentService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Injectables\n  PaymentService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/payment/payment.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getAccessToken\n                            \n                            \n                                    Async\n                                getAccount\n                            \n                            \n                                    Async\n                                linkMercadoPago\n                            \n                            \n                                    Async\n                                refreshToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(paymentAccountRepo: Repository, userService: UserService)\n                    \n                \n                        \n                            \n                                Defined in src/payment/payment.service.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        paymentAccountRepo\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getAccessToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAccessToken(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/payment/payment.service.ts:91\n                        \n                    \n\n\n            \n                \n                        Obtiene el token válido para un usuario\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getAccount\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAccount(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/payment/payment.service.ts:106\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        linkMercadoPago\n                        \n                    \n                \n            \n            \n                \n                        \n                    linkMercadoPago(userId: string, code: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/payment/payment.service.ts:27\n                        \n                    \n\n\n            \n                \n                        Intercambia el code de OAuth de MercadoPago por tokens\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                code\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        refreshToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    refreshToken(account: PaymentAccount)\n                \n            \n\n\n                    \n                        \n                            Defined in src/payment/payment.service.ts:68\n                        \n                    \n\n\n            \n                \n                        Refresca el token si está vencido\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                account\n                                            \n                                                            PaymentAccount\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  NotFoundException,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport axios from 'axios';\nimport { Repository } from 'typeorm';\n\nimport { UserService } from 'src/user/user.service';\nimport { PaymentAccount } from './entities/payment.entity';\n\n@Injectable()\nexport class PaymentService {\n  constructor(\n    @InjectRepository(PaymentAccount)\n    private paymentAccountRepo: Repository,\n\n    private readonly userService: UserService,\n  ) {}\n\n  /**\n   * Intercambia el `code` de OAuth de MercadoPago por tokens\n   */\n  // src/payment/payment.service.ts\n  async linkMercadoPago(userId: string, code: string) {\n    const user = await this.userService.findById(userId);\n    if (!user) throw new UnauthorizedException('Usuario no encontrado');\n\n    const { data } = await axios.post(\n      'https://api.mercadopago.com/oauth/token',\n      {\n        client_secret: process.env.MP_CLIENT_SECRET,\n        client_id: process.env.MP_CLIENT_ID,\n        grant_type: 'authorization_code',\n        code,\n        redirect_uri: process.env.MP_REDIRECT_URI,\n      },\n    );\n\n    console.log('Respuesta de MercadoPago en el callback:', data);\n\n    // Guardar o actualizar cuenta de pago\n    let account = await this.paymentAccountRepo.findOne({\n      where: { user: { id: userId }, provider: 'mercadopago' },\n      relations: ['user'],\n    });\n\n    if (!account) {\n      account = this.paymentAccountRepo.create({\n        user,\n        provider: 'mercadopago',\n      });\n    }\n\n    account.accessToken = data.access_token;\n    account.refreshToken = data.refresh_token;\n    account.providerUserId = data.user_id;\n    account.tokenExpiresAt = new Date(Date.now() + data.expires_in * 1000);\n\n    return this.paymentAccountRepo.save(account);\n  }\n\n  /**\n   * Refresca el token si está vencido\n   */\n  async refreshToken(account: PaymentAccount) {\n    if (!account.refreshToken) return account;\n\n    const { data } = await axios.post(\n      'https://api.mercadopago.com/oauth/token',\n      {\n        client_secret: process.env.MP_CLIENT_SECRET,\n        client_id: process.env.MP_CLIENT_ID,\n        grant_type: 'refresh_token',\n        refresh_token: account.refreshToken,\n      },\n    );\n\n    account.accessToken = data.access_token;\n    account.refreshToken = data.refresh_token;\n    account.tokenExpiresAt = new Date(Date.now() + data.expires_in * 1000);\n\n    return this.paymentAccountRepo.save(account);\n  }\n\n  /**\n   * Obtiene el token válido para un usuario\n   */\n  async getAccessToken(userId: string): Promise {\n    const account = await this.paymentAccountRepo.findOne({\n      where: { user: { id: userId }, provider: 'mercadopago' },\n    });\n    if (!account)\n      throw new UnauthorizedException('Cuenta de pago no vinculada');\n\n    if (account.tokenExpiresAt && account.tokenExpiresAt  {\n    const account = await this.paymentAccountRepo.findOne({\n      where: { user: { id: userId }, provider: 'mercadopago' },\n      relations: ['user'],\n    });\n    if (!account)\n      throw new NotFoundException('Cuenta de MercadoPago no encontrada');\n\n    // refrescar token si está vencido\n    if (account.tokenExpiresAt && account.tokenExpiresAt \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Photo.html":{"url":"entities/Photo.html","title":"entity - Photo","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Entities\n  Photo\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/photo/entities/photo.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                album\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                publicId\n                            \n                            \n                                    \n                                sizeMb\n                            \n                            \n                                    \n                                url\n                            \n                            \n                                    \n                                urlThumbnail\n                            \n                            \n                                    \n                                urlWeb\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        album\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Album\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, album => album.photos, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/photo/entities/photo.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/photo/entities/photo.entity.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        publicId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/photo/entities/photo.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        sizeMb\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('float')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/photo/entities/photo.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/photo/entities/photo.entity.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        urlThumbnail\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/photo/entities/photo.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        urlWeb\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/photo/entities/photo.entity.ts:19\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Album } from 'src/album/entities/album.entity';\nimport { Entity, PrimaryGeneratedColumn, Column, ManyToOne } from 'typeorm';\n\n@Entity()\nexport class Photo {\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n\n  @Column()\n  url: string;\n\n  @Column('float')\n  sizeMb: number;\n\n  @Column()\n  publicId: string;\n\n  @Column()\n  urlWeb: string;\n\n  @Column()\n  urlThumbnail: string;\n\n  @ManyToOne(() => Album, (album) => album.photos, {\n    // Sirve para que al borrar un álbum, se borren sus fotos en cascada\n    onDelete: 'CASCADE',\n  })\n  album: Album;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PhotoController.html":{"url":"controllers/PhotoController.html","title":"controller - PhotoController","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Controllers\n  PhotoController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/photo/photo.controller.ts\n        \n            \n                Prefix\n            \n            \n                photo\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Async\n                                deleteAllByAlbum\n                            \n                            \n                                    \n                                    \n                                    Async\n                                deletePhoto\n                            \n                            \n                                    \n                                    \n                                    Async\n                                getPhotos\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                uploadMultiple\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                uploadPhoto\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        deleteAllByAlbum\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteAllByAlbum(albumId: string, req: unknown)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(AuthGuard)@Delete('/album/:albumId')\n                \n            \n\n                    \n                        \n                            Defined in src/photo/photo.controller.ts:75\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                albumId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                                        unknown\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        deletePhoto\n                        \n                    \n                \n            \n            \n                \n                        \n                    deletePhoto(req: any, id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(AuthGuard)@Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/photo/photo.controller.ts:68\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        getPhotos\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPhotos(req: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(AuthGuard)@Get()\n                \n            \n\n                    \n                        \n                            Defined in src/photo/photo.controller.ts:61\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        uploadMultiple\n                        \n                    \n                \n            \n            \n                \n                        \n                    uploadMultiple(files: Express.Multer.File[], albumId: string, req: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(AuthGuard)@Post('upload-multiple/:albumId')@UseInterceptors(undefined)\n                \n            \n\n                    \n                        \n                            Defined in src/photo/photo.controller.ts:41\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                files\n                                            \n                                                        Express.Multer.File[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                albumId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        uploadPhoto\n                        \n                    \n                \n            \n            \n                \n                        \n                    uploadPhoto(file: Express.Multer.File, albumId: string, req: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(AuthGuard)@Post('upload/:albumId')@UseInterceptors(undefined)\n                \n            \n\n                    \n                        \n                            Defined in src/photo/photo.controller.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                file\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                albumId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Delete,\n  Get,\n  Param,\n  Post,\n  Req,\n  UploadedFile,\n  UploadedFiles,\n  UseGuards,\n  UseInterceptors,\n} from '@nestjs/common';\nimport { FileInterceptor, FilesInterceptor } from '@nestjs/platform-express';\nimport { AuthGuard } from 'src/common/guards/auth.guard';\nimport { PhotoService } from './photo.service';\n\n@Controller('photo')\nexport class PhotoController {\n  constructor(private readonly photoService: PhotoService) {}\n\n  @UseGuards(AuthGuard)\n  @Post('upload/:albumId')\n  @UseInterceptors(\n    FileInterceptor('file', { limits: { fileSize: 15 * 1024 * 1024 } }),\n  ) // Límite de 15MB\n  async uploadPhoto(\n    @UploadedFile() file: Express.Multer.File,\n    @Param('albumId') albumId: string,\n    @Req() req: any,\n  ) {\n    const userId = req.user.sub;\n\n    return this.photoService.upload(file, albumId, userId);\n  }\n\n  @UseGuards(AuthGuard)\n  @Post('upload-multiple/:albumId')\n  @UseInterceptors(\n    FilesInterceptor('files', 20, { limits: { fileSize: 5 * 1024 * 1024 } }),\n  )\n  async uploadMultiple(\n    @UploadedFiles() files: Express.Multer.File[],\n    @Param('albumId') albumId: string,\n    @Req() req: any,\n  ) {\n    const userId = req.user.sub;\n\n    // Leer totalSizeMb enviado desde el frontend\n    const totalSizeMb = parseFloat(req.body.totalSizeMb);\n\n    return this.photoService.uploadMultiple(\n      files,\n      albumId,\n      userId,\n      totalSizeMb,\n    );\n  }\n\n  @UseGuards(AuthGuard)\n  @Get()\n  async getPhotos(@Req() req: any) {\n    const userId = req.user.sub;\n    return this.photoService.findAll(userId);\n  }\n\n  @UseGuards(AuthGuard)\n  @Delete(':id')\n  async deletePhoto(@Req() req: any, @Param('id') id: string) {\n    const userId = req.user.sub;\n    return this.photoService.removeById(id, userId);\n  }\n\n  @UseGuards(AuthGuard)\n  @Delete('/album/:albumId')\n  async deleteAllByAlbum(@Param('albumId') albumId: string, @Req() req) {\n    const userId = req.user.id; // según tu auth\n    return this.photoService.removeAllByAlbum(albumId, userId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PhotoModule.html":{"url":"modules/PhotoModule.html","title":"module - PhotoModule","body":"\n                   \n\n\n\n\n\n\n\n\n    Modules\n    PhotoModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PhotoModule\n\n\n\ncluster_PhotoModule_exports\n\n\n\ncluster_PhotoModule_providers\n\n\n\ncluster_PhotoModule_imports\n\n\n\n\nFilesModule\n\nFilesModule\n\n\n\nPhotoModule\n\nPhotoModule\n\nPhotoModule -->\n\nFilesModule->PhotoModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nPhotoModule -->\n\nUserModule->PhotoModule\n\n\n\n\n\nPhotoService \n\nPhotoService \n\nPhotoService  -->\n\nPhotoModule->PhotoService \n\n\n\n\n\nPhotoService\n\nPhotoService\n\nPhotoModule -->\n\nPhotoService->PhotoModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/photo/photo.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PhotoService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PhotoController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            FilesModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PhotoService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { AlbumModule } from 'src/album/album.module';\nimport { FilesModule } from 'src/files/files.module';\nimport { UserModule } from 'src/user/user.module';\nimport { Photo } from './entities/photo.entity';\nimport { PhotoController } from './photo.controller';\nimport { PhotoService } from './photo.service';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([Photo]),\n    UserModule,\n    FilesModule,\n    forwardRef(() => AlbumModule),\n  ],\n  providers: [PhotoService],\n  controllers: [PhotoController],\n  exports: [PhotoService],\n})\nexport class PhotoModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PhotoService.html":{"url":"injectables/PhotoService.html","title":"injectable - PhotoService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Injectables\n  PhotoService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/photo/photo.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                removeAllByAlbum\n                            \n                            \n                                    Async\n                                removeById\n                            \n                            \n                                    Async\n                                upload\n                            \n                            \n                                    Async\n                                uploadMultiple\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(photoRepository: Repository, userService: UserService, filesService: FilesService, albumService: AlbumService)\n                    \n                \n                        \n                            \n                                Defined in src/photo/photo.service.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        photoRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        filesService\n                                                  \n                                                        \n                                                                        FilesService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        albumService\n                                                  \n                                                        \n                                                                        AlbumService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/photo/photo.service.ts:178\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        removeAllByAlbum\n                        \n                    \n                \n            \n            \n                \n                        \n                    removeAllByAlbum(albumId: string, userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/photo/photo.service.ts:224\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                albumId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        removeById\n                        \n                    \n                \n            \n            \n                \n                        \n                    removeById(photoId: string, userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/photo/photo.service.ts:191\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                photoId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        upload\n                        \n                    \n                \n            \n            \n                \n                        \n                    upload(file: Express.Multer.File, albumId: string, userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/photo/photo.service.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                file\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                albumId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        uploadMultiple\n                        \n                    \n                \n            \n            \n                \n                        \n                    uploadMultiple(files: Express.Multer.File[], albumId: string, userId: string, totalSizeMb?: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/photo/photo.service.ts:89\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                files\n                                            \n                                                        Express.Multer.File[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                albumId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                totalSizeMb\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  forwardRef,\n  Inject,\n  Injectable,\n  NotFoundException,\n} from '@nestjs/common';\nimport { Photo } from './entities/photo.entity';\nimport { Repository } from 'typeorm';\nimport { AlbumService } from 'src/album/album.service';\nimport { UserService } from 'src/user/user.service';\nimport { FilesService } from 'src/files/files.service';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { UserHelpers } from 'src/user/helpers/user.helpers';\nimport { log } from 'console';\n\n@Injectable()\nexport class PhotoService {\n  constructor(\n    @InjectRepository(Photo)\n    private readonly photoRepository: Repository,\n\n    private readonly userService: UserService,\n    private readonly filesService: FilesService,\n\n    @Inject(forwardRef(() => AlbumService))\n    private readonly albumService: AlbumService,\n  ) {}\n\n  // Subir una foto\n  async upload(file: Express.Multer.File, albumId: string, userId: string) {\n    if (file.mimetype !== 'image/webp') {\n      throw new BadRequestException(\n        'Solo se permiten archivos en formato .webp',\n      );\n    }\n\n    const photographer = await this.userService.findById(userId);\n    if (!photographer || photographer.role !== 'photographer') {\n      throw new NotFoundException('Fotógrafo no encontrado');\n    }\n\n    const album = await this.albumService.findOne(albumId, userId);\n    if (!album) throw new NotFoundException('Álbum no encontrado');\n\n    // Validar cantidad de fotos por álbum\n    const maxPhotos = UserHelpers.getMaxPhotosPerAlbum(photographer);\n    if (album.photosCount + 1 > maxPhotos) {\n      throw new BadRequestException(\n        `No puedes subir más de ${maxPhotos} fotos a este álbum`,\n      );\n    }\n    // Subir a Cloudinary (FilesService ya valida tamaño y almacenamiento)\n    const { url, public_id, sizeMb, urlThumbnail, urlWeb } =\n      await this.filesService.uploadImage(file, userId);\n\n    // Guardar la foto en la DB\n    const photo = this.photoRepository.create({\n      url,\n      publicId: public_id,\n      sizeMb,\n      album,\n      urlWeb,\n      urlThumbnail,\n    });\n\n    const savedPhoto = await this.photoRepository.save(photo);\n\n    // Actualizar almacenamiento usado del fotógrafo\n    const newStorage = (photographer.storageUsedMb ?? 0) + sizeMb;\n    await this.userService.update(userId, {\n      storageUsedMb: parseFloat(newStorage.toFixed(2)),\n    });\n\n    // Incrementar contador de fotos en el álbum de manera segura\n    await this.albumService.incrementPhotosCount(album.id, 1);\n\n    return {\n      id: savedPhoto.id,\n      url: savedPhoto.url,\n      publicId: savedPhoto.publicId,\n      sizeMb: savedPhoto.sizeMb,\n      urlWeb: savedPhoto.urlWeb,\n      urlThumbnail: savedPhoto.urlThumbnail,\n    };\n  }\n\n  // Subir múltiples fotos\n  async uploadMultiple(\n    files: Express.Multer.File[],\n    albumId: string,\n    userId: string,\n    totalSizeMb?: number, // recibido desde el frontend\n  ) {\n    if (!files || files.length === 0)\n      throw new BadRequestException('No se enviaron archivos');\n\n    files.forEach((file) => {\n      if (file.mimetype !== 'image/webp') {\n        throw new BadRequestException(\n          'Solo se permiten archivos en formato .webp',\n        );\n      }\n    });\n\n    const photographer = await this.userService.findById(userId);\n    if (!photographer || photographer.role !== 'photographer')\n      throw new NotFoundException('Fotógrafo no encontrado');\n\n    const album = await this.albumService.findOne(albumId, userId);\n    if (!album) throw new NotFoundException('Álbum no encontrado');\n\n    // Validar límite de fotos por álbum\n    const maxPhotos = UserHelpers.getMaxPhotosPerAlbum(photographer);\n    if (album.photosCount + files.length > maxPhotos) {\n      throw new BadRequestException(\n        `No puedes subir más de ${maxPhotos} fotos a este álbum`,\n      );\n    }\n\n    // Validar almacenamiento total usando totalSizeMb enviado\n    const totalMb =\n      totalSizeMb ?? files.reduce((sum, f) => sum + f.size / (1024 * 1024), 0);\n    const maxStorage = UserHelpers.getMaxStorageMb(photographer);\n    if ((photographer.storageUsedMb ?? 0) + totalMb > maxStorage) {\n      throw new BadRequestException(\n        `No tienes suficiente espacio. Límite máximo: ${maxStorage} MB`,\n      );\n    }\n\n    // Subir todas las fotos en paralelo (FilesService validará tamaño individual)\n    const uploadedToCloud = await Promise.all(\n      files.map((file) => this.filesService.uploadImage(file, userId)),\n    );\n\n    // Crear entidades en memoria\n    const photosToSave = uploadedToCloud.map((p) =>\n      this.photoRepository.create({\n        url: p.url,\n        publicId: p.public_id,\n        sizeMb: p.sizeMb,\n        album,\n        urlWeb: p.urlWeb,\n        urlThumbnail: p.urlThumbnail,\n      }),\n    );\n\n    // Guardar todas las fotos en DB\n    const savedPhotos = await this.photoRepository.save(photosToSave);\n\n    // 🔹 Actualizar almacenamiento del fotógrafo sumando lo enviado en la request\n    /*     console.log('--- Detalles de almacenamiento ---');\n    console.log('Usuario: ', photographer);\n\n    console.log('Almacenamiento actual:', photographer.storageUsedMb);\n    console.log('Tamaño total de subida:', totalMb); */\n\n    const newStorage = photographer.storageUsedMb + totalMb;\n\n    await this.userService.update(userId, {\n      storageUsedMb: parseFloat(newStorage),\n    });\n\n    // Incrementar contador de fotos en álbum\n    await this.albumService.incrementPhotosCount(album.id, savedPhotos.length);\n\n    return savedPhotos.map((p) => ({\n      id: p.id,\n      url: p.url,\n      publicId: p.publicId,\n      sizeMb: p.sizeMb,\n      urlWeb: p.urlWeb,\n      urlThumbnail: p.urlThumbnail,\n    }));\n  }\n\n  // Listar fotos\n  async findAll(userId: string) {\n    const photographer = await this.userService.findById(userId);\n    if (!photographer || photographer.role !== 'photographer') {\n      throw new NotFoundException('Fotógrafo no encontrado');\n    }\n\n    return this.photoRepository.find({\n      where: { album: { photographer: { id: userId } } },\n      relations: ['album'],\n    });\n  }\n\n  // Eliminar una foto\n  async removeById(photoId: string, userId: string) {\n    const photo = await this.photoRepository.findOne({\n      where: { id: photoId, album: { photographer: { id: userId } } },\n      relations: ['album', 'album.photographer'],\n    });\n\n    if (!photo) throw new NotFoundException('Imagen no encontrada');\n\n    const photographer = photo.album.photographer;\n\n    try {\n      await this.filesService.deleteImage(photo.publicId);\n      await this.photoRepository.delete(photo.id);\n\n      const newStorage = Math.max(\n        0,\n        (photographer.storageUsedMb ?? 0) - (photo.sizeMb ?? 0),\n      );\n      await this.userService.update(userId, {\n        storageUsedMb: parseFloat(newStorage.toFixed(2)),\n      });\n\n      // Reducir contador de fotos\n      await this.albumService.incrementPhotosCount(photo.album.id, -1);\n\n      return { message: 'Imagen eliminada correctamente' };\n    } catch (err) {\n      console.error('Error eliminando la foto:', err);\n      throw new BadRequestException('No se pudo eliminar la foto');\n    }\n  }\n\n  // Eliminar todas las fotos de un álbum\n  async removeAllByAlbum(albumId: string, userId: string) {\n    const album = await this.albumService.findOne(albumId, userId);\n    if (!album) throw new NotFoundException('Álbum no encontrado');\n\n    const photographer = album.photographer;\n    if (!photographer) throw new NotFoundException('Fotógrafo no encontrado');\n\n    const photos = await this.photoRepository.find({\n      where: { album: { id: albumId } },\n    });\n\n    if (photos.length === 0) {\n      return { message: 'No hay fotos para eliminar' };\n    }\n\n    const totalSize = photos.reduce((sum, p) => sum + (p.sizeMb ?? 0), 0);\n\n    await this.userService.update(userId, {\n      storageUsedMb: Math.max(0, (photographer.storageUsedMb ?? 0) - totalSize),\n    });\n\n    await Promise.all(\n      photos.map((p) => this.filesService.deleteImage(p.publicId)),\n    );\n    await this.photoRepository.delete(photos.map((p) => p.id));\n\n    // Resetear contador de fotos a 0\n    await this.albumService.incrementPhotosCount(albumId, -album.photosCount);\n\n    return { message: 'Todas las fotos eliminadas correctamente' };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PhotographerOrdersController.html":{"url":"controllers/PhotographerOrdersController.html","title":"controller - PhotographerOrdersController","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Controllers\n  PhotographerOrdersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/order/photographer-orders.controller.ts\n        \n            \n                Prefix\n            \n            \n                photographer/orders\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Async\n                                getOrderById\n                            \n                            \n                                    \n                                    \n                                    Async\n                                getOrders\n                            \n                            \n                                    \n                                    \n                                    Async\n                                updateDeliveryStatus\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        getOrderById\n                        \n                    \n                \n            \n            \n                \n                        \n                    getOrderById(req: unknown, id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(AuthGuard)@Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/order/photographer-orders.controller.ts:28\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        unknown\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        getOrders\n                        \n                    \n                \n            \n            \n                \n                        \n                    getOrders(req: unknown)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(AuthGuard)@Get('my-orders')\n                \n            \n\n                    \n                        \n                            Defined in src/order/photographer-orders.controller.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        unknown\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        updateDeliveryStatus\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateDeliveryStatus(req: unknown, id: string, body: UpdateDeliveryStatusDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(AuthGuard)@Patch(':id/delivery-status')\n                \n            \n\n                    \n                        \n                            Defined in src/order/photographer-orders.controller.ts:36\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        unknown\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                            UpdateDeliveryStatusDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Get,\n  Param,\n  Patch,\n  Req,\n  UseGuards,\n} from '@nestjs/common';\nimport { PhotographerOrdersService } from './photographer-orders.service';\nimport { AuthGuard } from 'src/common/guards/auth.guard';\nimport { UpdateDeliveryStatusDto } from './dto/up-delivered-order.dto';\n\n@Controller('photographer/orders')\nexport class PhotographerOrdersController {\n  constructor(private readonly service: PhotographerOrdersService) {}\n\n  @UseGuards(AuthGuard)\n  @Get('my-orders')\n  async getOrders(@Req() req) {\n    const photographerId = req.user.sub;\n\n    return this.service.getOrdersForPhotographer(photographerId);\n  }\n\n  @UseGuards(AuthGuard)\n  @Get(':id')\n  async getOrderById(@Req() req, @Param('id') id: string) {\n    const photographerId = req.user.sub;\n\n    return this.service.getOrderById(photographerId, id);\n  }\n\n  @UseGuards(AuthGuard)\n  @Patch(':id/delivery-status')\n  async updateDeliveryStatus(\n    @Req() req,\n    @Param('id') id: string,\n    @Body() body: UpdateDeliveryStatusDto,\n  ) {\n    const photographerId = req.user.sub;\n    return this.service.updateDeliveryStatus(\n      photographerId,\n      id,\n      body.deliveryStatus,\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PhotographerOrdersService.html":{"url":"injectables/PhotographerOrdersService.html","title":"injectable - PhotographerOrdersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Injectables\n  PhotographerOrdersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/order/photographer-orders.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getOrderById\n                            \n                            \n                                    Async\n                                getOrdersForPhotographer\n                            \n                            \n                                    Async\n                                updateDeliveryStatus\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(orderRepository: Repository, userRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/order/photographer-orders.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        orderRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getOrderById\n                        \n                    \n                \n            \n            \n                \n                        \n                    getOrderById(photographerId: string, orderId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/order/photographer-orders.service.ts:37\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                photographerId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                orderId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getOrdersForPhotographer\n                        \n                    \n                \n            \n            \n                \n                        \n                    getOrdersForPhotographer(photographerId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/order/photographer-orders.service.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                photographerId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateDeliveryStatus\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateDeliveryStatus(photographerId: string, orderId: string, deliveryStatus: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/order/photographer-orders.service.ts:60\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                photographerId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                orderId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                deliveryStatus\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  ForbiddenException,\n  Injectable,\n  NotFoundException,\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { DeliveryStatus, Order } from './entities/order.entity';\nimport { User } from 'src/user/entities/user.entity';\n\n@Injectable()\nexport class PhotographerOrdersService {\n  constructor(\n    @InjectRepository(Order)\n    private readonly orderRepository: Repository,\n    @InjectRepository(User)\n    private readonly userRepository: Repository,\n  ) {}\n\n  async getOrdersForPhotographer(photographerId: string) {\n    const photographer = await this.userRepository.findOne({\n      where: { id: photographerId, role: 'photographer' },\n    });\n    if (!photographer) throw new NotFoundException('El fotógrafo no existe');\n\n    const orders = await this.orderRepository.find({\n      where: { album: { photographer: { id: photographerId } } },\n      relations: ['album', 'buyer', 'items'],\n      order: { createdAt: 'DESC' },\n    });\n\n    /*     if (!orders.length)\n      throw new NotFoundException('Este fotógrafo no tiene órdenes'); */\n    return orders;\n  }\n\n  async getOrderById(photographerId: string, orderId: string) {\n    const order = await this.orderRepository.findOne({\n      where: { id: orderId },\n      relations: [\n        'album',\n        'album.photographer',\n        'buyer',\n        'items',\n        // 'items.photo',\n      ],\n    });\n\n    if (!order) throw new NotFoundException('La orden no existe');\n\n    // 🔐 Validar que la orden pertenezca al fotógrafo autenticado\n    if (order.album.photographer.id !== photographerId) {\n      throw new ForbiddenException('No tienes acceso a esta orden');\n    }\n\n    return order;\n  }\n\n  // 🔹 Nuevo método para actualizar deliveryStatus\n  async updateDeliveryStatus(\n    photographerId: string,\n    orderId: string,\n    deliveryStatus: string,\n  ) {\n    const order = await this.orderRepository.findOne({\n      where: { id: orderId },\n      relations: ['album', 'album.photographer'],\n    });\n\n    if (!order) throw new NotFoundException('La orden no existe');\n\n    if (order.album.photographer.id !== photographerId) {\n      throw new ForbiddenException('No tienes acceso a esta orden');\n    }\n\n    // Actualizar solo si el pago no fue rechazado\n    if (order.status.toLowerCase() === 'rejected') {\n      throw new ForbiddenException(\n        'No se puede actualizar una orden con pago rechazado',\n      );\n    }\n\n    order.deliveryStatus = deliveryStatus as DeliveryStatus;\n    await this.orderRepository.save(order);\n\n    return order;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PriceOptionDto.html":{"url":"classes/PriceOptionDto.html","title":"class - PriceOptionDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PriceOptionDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/album/dto/create-album.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                price\n                            \n                            \n                                    \n                                    \n                                size\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        price\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsNumber()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/album/dto/create-album.dto.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        size\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PrintSize\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsEnum(PrintSize)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/album/dto/create-album.dto.ts:24\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from 'class-transformer';\nimport {\n  IsArray,\n  IsBoolean,\n  IsDateString,\n  IsEmail,\n  IsEnum,\n  IsNotEmpty,\n  IsNumber,\n  IsOptional,\n  IsString,\n  ValidateNested,\n} from 'class-validator';\n\nexport enum PrintSize {\n  SMALL = 'S',\n  MEDIUM = 'M',\n  LARGE = 'L',\n}\n\nclass PriceOptionDto {\n  @IsNotEmpty()\n  @IsEnum(PrintSize)\n  size: PrintSize;\n\n  @IsNotEmpty()\n  @IsNumber()\n  @Type(() => Number)\n  price: number;\n}\n\nexport class CreateAlbumDto {\n  @IsNotEmpty()\n  @IsString()\n  title: string;\n\n  @IsNotEmpty()\n  @IsString()\n  userEvent: string;\n\n  @IsNotEmpty()\n  @IsString()\n  passwordEvent: string;\n\n  @IsArray()\n  @ValidateNested({ each: true })\n  @Type(() => PriceOptionDto)\n  prices: PriceOptionDto[];\n\n  @IsNotEmpty()\n  @IsNumber()\n  @Type(() => Number)\n  priceDigital: number;\n\n  @IsOptional()\n  @IsNumber()\n  @Type(() => Number)\n  priceSchoolSports?: number;\n\n  @IsNotEmpty()\n  @IsDateString()\n  eventDate: string;\n\n  @IsNotEmpty()\n  @IsEmail()\n  clientEmail: string;\n\n  @IsNotEmpty()\n  @IsString()\n  clientPhoneNumber: string;\n\n  @IsOptional()\n  @IsString()\n  description?: string;\n\n  @IsNotEmpty()\n  @IsBoolean()\n  isActiveFolder: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/RolesGuard.html":{"url":"guards/RolesGuard.html","title":"guard - RolesGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    RolesGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n                File\n            \n            \n                src/common/guards/roles.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/common/guards/roles.guard.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/guards/roles.guard.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import {\n  CanActivate,\n  ExecutionContext,\n  Injectable,\n  ForbiddenException,\n} from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { ROLES_KEY } from 'src/common/decorators/roles.decorator';\n\n@Injectable()\nexport class RolesGuard implements CanActivate {\n  constructor(private reflector: Reflector) {}\n\n  canActivate(context: ExecutionContext): boolean {\n    const requiredRoles = this.reflector.getAllAndOverride(\n      ROLES_KEY,\n      [context.getHandler(), context.getClass()],\n    );\n    if (!requiredRoles) return true;\n\n    const request = context.switchToHttp().getRequest();\n    const user = request.user;\n\n    if (!user || !requiredRoles.includes(user.role)) {\n      throw new ForbiddenException('No tenés permisos para esta ruta');\n    }\n\n    return true;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Seed.html":{"url":"classes/Seed.html","title":"class - Seed","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Seed\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/seed/entities/seed.entity.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class Seed {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/SeedController.html":{"url":"controllers/SeedController.html","title":"controller - SeedController","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Controllers\n  SeedController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/seed/seed.controller.ts\n        \n            \n                Prefix\n            \n            \n                seed\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                seedPlans\n                            \n                            \n                                    \n                                    Async\n                                seedUsers\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        seedPlans\n                        \n                    \n                \n            \n            \n                \n                        \n                    seedPlans()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('plans')\n                \n            \n\n                    \n                        \n                            Defined in src/seed/seed.controller.ts:14\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        seedUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    seedUsers()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('users')\n                \n            \n\n                    \n                        \n                            Defined in src/seed/seed.controller.ts:9\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Post } from '@nestjs/common';\nimport { SeedService } from './seed.service';\n\n@Controller('seed')\nexport class SeedController {\n  constructor(private readonly seedService: SeedService) {}\n\n  @Post('users')\n  async seedUsers() {\n    return this.seedService.seedUsers();\n  }\n\n  @Post('plans')\n  async seedPlans() {\n    return this.seedService.seedSubscriptionPlans();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SeedModule.html":{"url":"modules/SeedModule.html","title":"module - SeedModule","body":"\n                   \n\n\n\n\n\n\n\n\n    Modules\n    SeedModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_SeedModule\n\n\n\ncluster_SeedModule_imports\n\n\n\ncluster_SeedModule_providers\n\n\n\n\nUserModule\n\nUserModule\n\n\n\nSeedModule\n\nSeedModule\n\nSeedModule -->\n\nUserModule->SeedModule\n\n\n\n\n\nSeedService\n\nSeedService\n\nSeedModule -->\n\nSeedService->SeedModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/seed/seed.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            SeedService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            SeedController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { SeedService } from './seed.service';\nimport { SeedController } from './seed.controller';\nimport { UserModule } from '../user/user.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { SubscriptionPlan } from 'src/subscription/entities/subscriptionPlan.entity';\n\n@Module({\n  imports: [UserModule, TypeOrmModule.forFeature([SubscriptionPlan])],\n  providers: [SeedService],\n  controllers: [SeedController],\n})\nexport class SeedModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SeedService.html":{"url":"injectables/SeedService.html","title":"injectable - SeedService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Injectables\n  SeedService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/seed/seed.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                seedSubscriptionPlans\n                            \n                            \n                                    Async\n                                seedUsers\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService, planRepo: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/seed/seed.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        planRepo\n                                                  \n                                                        \n                                                                    Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        seedSubscriptionPlans\n                        \n                    \n                \n            \n            \n                \n                        \n                    seedSubscriptionPlans()\n                \n            \n\n\n                    \n                        \n                            Defined in src/seed/seed.service.ts:103\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        seedUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    seedUsers()\n                \n            \n\n\n                    \n                        \n                            Defined in src/seed/seed.service.ts:18\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport * as bcrypt from 'bcrypt';\nimport { UserService } from '../user/user.service';\nimport { UserRole } from '../user/dto/base-user.dto';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { SubscriptionPlan } from 'src/subscription/entities/subscriptionPlan.entity';\nimport { Repository } from 'typeorm';\n\n@Injectable()\nexport class SeedService {\n  constructor(\n    private readonly userService: UserService,\n\n    @InjectRepository(SubscriptionPlan)\n    private readonly planRepo: Repository,\n  ) {}\n\n  async seedUsers() {\n    const usersToCreate = [\n      // Fotógrafos\n      {\n        email: 'photographer1@test.com',\n        role: UserRole.PHOTOGRAPHER,\n        password: '123456',\n        name: 'Fotógrafo 1',\n      },\n      {\n        email: 'photographer2@test.com',\n        role: UserRole.PHOTOGRAPHER,\n        password: '123456',\n        name: 'Fotógrafo 2',\n      },\n      {\n        email: 'photographer3@test.com',\n        role: UserRole.PHOTOGRAPHER,\n        password: '123456',\n        name: 'Fotógrafo 3',\n      },\n      {\n        email: 'photographer4@test.com',\n        role: UserRole.PHOTOGRAPHER,\n        password: '123456',\n        name: 'Fotógrafo 4',\n      },\n      {\n        email: 'photographer5@test.com',\n        role: UserRole.PHOTOGRAPHER,\n        password: '123456',\n        name: 'Fotógrafo 5',\n      },\n\n      // Compradores\n      {\n        email: 'buyer1@test.com',\n        role: UserRole.BUYER,\n        password: '123456',\n        name: 'Comprador 1',\n      },\n      {\n        email: 'buyer2@test.com',\n        role: UserRole.BUYER,\n        password: '123456',\n        name: 'Comprador 2',\n      },\n      {\n        email: 'buyer3@test.com',\n        role: UserRole.BUYER,\n        password: '123456',\n        name: 'Comprador 3',\n      },\n      {\n        email: 'buyer4@test.com',\n        role: UserRole.BUYER,\n        password: '123456',\n        name: 'Comprador 4',\n      },\n      {\n        email: 'buyer5@test.com',\n        role: UserRole.BUYER,\n        password: '123456',\n        name: 'Comprador 5',\n      },\n    ];\n\n    for (const u of usersToCreate) {\n      const exists = await this.userService.findByEmail(u.email);\n      if (exists) continue;\n\n      const hashedPassword = await bcrypt.hash(u.password, 10);\n      await this.userService.create({\n        email: u.email,\n        password: hashedPassword,\n        role: u.role,\n        name: u.name,\n        provider: 'credentials',\n      });\n      console.log(`Usuario creado: ${u.email} (${u.role})`);\n    }\n\n    return { message: 'Seed completado con 10 usuarios' };\n  }\n\n  async seedSubscriptionPlans() {\n    const plans = [\n      {\n        name: 'Free',\n        description: 'Plan gratuito inicial',\n        durationMonths: 0,\n        price: 0,\n        discountPercentage: 0,\n      },\n      {\n        name: 'Pro',\n        description: 'Suscripción de 1 mes',\n        durationMonths: 1,\n        price: 40000,\n        discountPercentage: 0,\n      },\n      {\n        name: 'Pro',\n        description: 'Suscripción de 3 meses con 10% de descuento',\n        durationMonths: 3,\n        price: 108000,\n        discountPercentage: 10,\n      },\n      {\n        name: 'Pro',\n        description: 'Suscripción de 6 meses con 20% de descuento',\n        durationMonths: 6,\n        price: 192000,\n        discountPercentage: 20,\n      },\n    ];\n\n    for (const planData of plans) {\n      const exists = await this.planRepo.findOne({\n        where: {\n          name: planData.name,\n          durationMonths: planData.durationMonths,\n        },\n      });\n\n      if (!exists) {\n        const plan = this.planRepo.create(planData);\n        await this.planRepo.save(plan);\n        console.log(`Plan creado: ${plan.name} (${plan.durationMonths} meses)`);\n      }\n    }\n\n    return { message: 'Seed de planes completado' };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Subscription.html":{"url":"entities/Subscription.html","title":"entity - Subscription","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Entities\n  Subscription\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/subscription/entities/subscription.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                    Optional\n                                endDate\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                isActive\n                            \n                            \n                                    \n                                plan\n                            \n                            \n                                    \n                                startDate\n                            \n                            \n                                    \n                                updatedAt\n                            \n                            \n                                    \n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/entities/subscription.entity.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        endDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Date | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'timestamp', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/entities/subscription.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/entities/subscription.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        isActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/entities/subscription.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        plan\n                        \n                    \n                \n            \n                \n                    \n                        Type :         SubscriptionPlan\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, {eager: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/entities/subscription.entity.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        startDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'timestamp'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/entities/subscription.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/entities/subscription.entity.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.subscriptions, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/entities/subscription.entity.ts:27\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  PrimaryGeneratedColumn,\n  Column,\n  CreateDateColumn,\n  UpdateDateColumn,\n  ManyToOne,\n} from 'typeorm';\nimport { User } from 'src/user/entities/user.entity';\nimport { SubscriptionPlan } from './subscriptionPlan.entity';\n\n@Entity()\nexport class Subscription {\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n\n  @Column({ type: 'timestamp' })\n  startDate: Date;\n\n  @Column({ type: 'timestamp', nullable: true })\n  endDate?: Date | null;\n\n  @Column({ default: true })\n  isActive: boolean;\n\n  @ManyToOne(() => User, (user) => user.subscriptions, { onDelete: 'CASCADE' })\n  user: User;\n\n  @ManyToOne(() => SubscriptionPlan, { eager: true })\n  plan: SubscriptionPlan;\n\n  @CreateDateColumn()\n  createdAt: Date;\n\n  @UpdateDateColumn()\n  updatedAt: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/SubscriptionController.html":{"url":"controllers/SubscriptionController.html","title":"controller - SubscriptionController","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Controllers\n  SubscriptionController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/subscription/subscription.controller.ts\n        \n            \n                Prefix\n            \n            \n                subscriptions\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Async\n                                changeSubscription\n                            \n                            \n                                    \n                                    \n                                    Async\n                                createInitial\n                            \n                            \n                                    \n                                    \n                                    Async\n                                createOrder\n                            \n                            \n                                    \n                                    \n                                    Async\n                                createPaymentPreference\n                            \n                            \n                                    \n                                    \n                                    Async\n                                getActiveSubscription\n                            \n                            \n                                    \n                                    \n                                    Async\n                                getOrders\n                            \n                            \n                                    \n                                    Async\n                                getPlans\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        changeSubscription\n                        \n                    \n                \n            \n            \n                \n                        \n                    changeSubscription(req: unknown, planId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(AuthGuard)@Patch('change')\n                \n            \n\n                    \n                        \n                            Defined in src/subscription/subscription.controller.ts:34\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        unknown\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                planId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        createInitial\n                        \n                    \n                \n            \n            \n                \n                        \n                    createInitial(req: unknown)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(AuthGuard)@Post('create-initial')\n                \n            \n\n                    \n                        \n                            Defined in src/subscription/subscription.controller.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        unknown\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        createOrder\n                        \n                    \n                \n            \n            \n                \n                        \n                    createOrder(req: unknown, body: CreateSubscriptionOrderDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(AuthGuard)@Post('orders')\n                \n            \n\n                    \n                        \n                            Defined in src/subscription/subscription.controller.ts:46\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        unknown\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                            CreateSubscriptionOrderDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        createPaymentPreference\n                        \n                    \n                \n            \n            \n                \n                        \n                    createPaymentPreference(req: unknown, orderId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(AuthGuard)@Post('orders/:id/pay')\n                \n            \n\n                    \n                        \n                            Defined in src/subscription/subscription.controller.ts:61\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        unknown\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                orderId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        getActiveSubscription\n                        \n                    \n                \n            \n            \n                \n                        \n                    getActiveSubscription(req: unknown)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(AuthGuard)@Get('me')\n                \n            \n\n                    \n                        \n                            Defined in src/subscription/subscription.controller.ts:28\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        unknown\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        getOrders\n                        \n                    \n                \n            \n            \n                \n                        \n                    getOrders(req: unknown)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(AuthGuard)@Get('orders')\n                \n            \n\n                    \n                        \n                            Defined in src/subscription/subscription.controller.ts:55\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        unknown\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getPlans\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPlans()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('plans')\n                \n            \n\n                    \n                        \n                            Defined in src/subscription/subscription.controller.ts:39\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Get,\n  Param,\n  Patch,\n  Post,\n  Req,\n  UseGuards,\n} from '@nestjs/common';\nimport { AuthGuard } from 'src/common/guards/auth.guard';\nimport { SubscriptionService } from './subscription.service';\nimport { CreateSubscriptionOrderDto } from './dto/create-subscription-order.dto';\n\n@Controller('subscriptions')\nexport class SubscriptionController {\n  constructor(private readonly subscriptionService: SubscriptionService) {}\n\n  @UseGuards(AuthGuard)\n  @Post('create-initial')\n  async createInitial(@Req() req) {\n    const userId = req.user.sub;\n    return this.subscriptionService.createInitialSubscription(userId);\n  }\n\n  @UseGuards(AuthGuard)\n  @Get('me')\n  async getActiveSubscription(@Req() req) {\n    return this.subscriptionService.getActiveSubscription(req.user.sub);\n  }\n\n  @UseGuards(AuthGuard)\n  @Patch('change')\n  async changeSubscription(@Req() req, @Body('planId') planId: string) {\n    return this.subscriptionService.changeSubscription(req.user.sub, planId);\n  }\n\n  @Get('plans')\n  async getPlans() {\n    return this.subscriptionService.getPlans();\n  }\n\n  /* Ordenes */\n  @UseGuards(AuthGuard)\n  @Post('orders')\n  async createOrder(@Req() req, @Body() body: CreateSubscriptionOrderDto) {\n    return this.subscriptionService.createSubscriptionOrder(\n      req.user.sub,\n      body.planId,\n    );\n  }\n\n  @UseGuards(AuthGuard)\n  @Get('orders')\n  async getOrders(@Req() req) {\n    return this.subscriptionService.getUserOrders(req.user.sub);\n  }\n\n  @UseGuards(AuthGuard)\n  @Post('orders/:id/pay')\n  async createPaymentPreference(@Req() req, @Param('id') orderId: string) {\n    return this.subscriptionService.createSubscriptionPayment(\n      orderId,\n      req.user.sub,\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SubscriptionModule.html":{"url":"modules/SubscriptionModule.html","title":"module - SubscriptionModule","body":"\n                   \n\n\n\n\n\n\n\n\n    Modules\n    SubscriptionModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_SubscriptionModule\n\n\n\ncluster_SubscriptionModule_providers\n\n\n\ncluster_SubscriptionModule_imports\n\n\n\ncluster_SubscriptionModule_exports\n\n\n\n\nMailModule\n\nMailModule\n\n\n\nSubscriptionModule\n\nSubscriptionModule\n\nSubscriptionModule -->\n\nMailModule->SubscriptionModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nSubscriptionModule -->\n\nUserModule->SubscriptionModule\n\n\n\n\n\nSubscriptionService \n\nSubscriptionService \n\nSubscriptionService  -->\n\nSubscriptionModule->SubscriptionService \n\n\n\n\n\nSubscriptionService\n\nSubscriptionService\n\nSubscriptionModule -->\n\nSubscriptionService->SubscriptionModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/subscription/subscription.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            SubscriptionService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            SubscriptionController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            MailModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            SubscriptionService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { SubscriptionService } from './subscription.service';\nimport { SubscriptionController } from './subscription.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Subscription } from './entities/subscription.entity';\nimport { UserModule } from 'src/user/user.module';\nimport { MailModule } from 'src/mail/mail.module';\nimport { SubscriptionPlan } from './entities/subscriptionPlan.entity';\nimport { SubscriptionOrder } from './entities/subscription-order.entity';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([\n      Subscription,\n      SubscriptionPlan,\n      SubscriptionOrder,\n    ]),\n    UserModule,\n    MailModule,\n  ],\n  controllers: [SubscriptionController],\n  providers: [SubscriptionService],\n  exports: [SubscriptionService],\n})\nexport class SubscriptionModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/SubscriptionOrder.html":{"url":"entities/SubscriptionOrder.html","title":"entity - SubscriptionOrder","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Entities\n  SubscriptionOrder\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/subscription/entities/subscription-order.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                amount\n                            \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                plan\n                            \n                            \n                                    \n                                status\n                            \n                            \n                                    \n                                updatedAt\n                            \n                            \n                                    \n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        amount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('decimal', {precision: 10, scale: 2})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/entities/subscription-order.entity.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/entities/subscription-order.entity.ts:55\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/entities/subscription-order.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        plan\n                        \n                    \n                \n            \n                \n                    \n                        Type :         SubscriptionPlan\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, {eager: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/entities/subscription-order.entity.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         SubscriptionOrderStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: undefined, default: 'pending'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/entities/subscription-order.entity.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/entities/subscription-order.entity.ts:58\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, {eager: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/entities/subscription-order.entity.ts:29\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  PrimaryGeneratedColumn,\n  Column,\n  ManyToOne,\n  CreateDateColumn,\n  UpdateDateColumn,\n} from 'typeorm';\nimport { User } from 'src/user/entities/user.entity';\nimport { SubscriptionPlan } from './subscriptionPlan.entity';\n\nexport type SubscriptionOrderStatus =\n  | 'pending'\n  | 'approved'\n  | 'authorized'\n  | 'in_process'\n  | 'in_mediation'\n  | 'rejected'\n  | 'cancelled'\n  | 'refunded'\n  | 'charged_back';\n\n@Entity()\nexport class SubscriptionOrder {\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n\n  @ManyToOne(() => User, { eager: true })\n  user: User;\n\n  @ManyToOne(() => SubscriptionPlan, { eager: true })\n  plan: SubscriptionPlan;\n\n  @Column('decimal', { precision: 10, scale: 2 })\n  amount: number;\n\n  @Column({\n    type: 'enum',\n    enum: [\n      'pending',\n      'approved',\n      'authorized',\n      'in_process',\n      'in_mediation',\n      'rejected',\n      'cancelled',\n      'refunded',\n      'charged_back',\n    ],\n    default: 'pending',\n  })\n  status: SubscriptionOrderStatus;\n\n  @CreateDateColumn()\n  createdAt: Date;\n\n  @UpdateDateColumn()\n  updatedAt: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/SubscriptionPlan.html":{"url":"entities/SubscriptionPlan.html","title":"entity - SubscriptionPlan","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Entities\n  SubscriptionPlan\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/subscription/entities/subscriptionPlan.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                discountPercentage\n                            \n                            \n                                    \n                                durationMonths\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                price\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/entities/subscriptionPlan.entity.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        discountPercentage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'decimal', default: 0})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/entities/subscriptionPlan.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        durationMonths\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/entities/subscriptionPlan.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/entities/subscriptionPlan.entity.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/entities/subscriptionPlan.entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        price\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'decimal'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/entities/subscriptionPlan.entity.ts:18\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, PrimaryGeneratedColumn } from 'typeorm';\n\n@Entity()\nexport class SubscriptionPlan {\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n\n  @Column()\n  name: string; // \"Free\" o \"Pro\"\n\n  @Column({ nullable: true })\n  description?: string;\n\n  @Column()\n  durationMonths: number; // 0 = free, 1, 3, 6\n\n  @Column({ type: 'decimal' })\n  price: number; // 0 para free, 40000, 108000, 192000\n\n  @Column({ type: 'decimal', default: 0 })\n  discountPercentage: number; // 0, 10, 20\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SubscriptionService.html":{"url":"injectables/SubscriptionService.html","title":"injectable - SubscriptionService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Injectables\n  SubscriptionService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/subscription/subscription.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Async\n                                activateSubscription\n                            \n                            \n                                    Async\n                                changeSubscription\n                            \n                            \n                                    Async\n                                createInitialSubscription\n                            \n                            \n                                    Async\n                                createSubscriptionOrder\n                            \n                            \n                                    Async\n                                createSubscriptionPayment\n                            \n                            \n                                    Async\n                                getActiveSubscription\n                            \n                            \n                                    Async\n                                getPlans\n                            \n                            \n                                    Async\n                                getUserOrders\n                            \n                            \n                                    Async\n                                updateSubscriptionOrderStatus\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(subscriptionRepo: Repository, planRepo: Repository, orderRepo: Repository, userService: UserService, mailService: MailService)\n                    \n                \n                        \n                            \n                                Defined in src/subscription/subscription.service.ts:19\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        subscriptionRepo\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        planRepo\n                                                  \n                                                        \n                                                                    Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        orderRepo\n                                                  \n                                                        \n                                                                    Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        mailService\n                                                  \n                                                        \n                                                                        MailService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        activateSubscription\n                        \n                    \n                \n            \n            \n                \n                        \n                    activateSubscription(user: any, plan: SubscriptionPlan)\n                \n            \n\n\n                    \n                        \n                            Defined in src/subscription/subscription.service.ts:202\n                        \n                    \n\n\n            \n                \n                        \n MÉTODO PRIVADO\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                plan\n                                            \n                                                            SubscriptionPlan\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        changeSubscription\n                        \n                    \n                \n            \n            \n                \n                        \n                    changeSubscription(userId: string, planId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/subscription/subscription.service.ts:50\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                planId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createInitialSubscription\n                        \n                    \n                \n            \n            \n                \n                        \n                    createInitialSubscription(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/subscription/subscription.service.ts:39\n                        \n                    \n\n\n            \n                \n                        \n SUSCRIPCIONES\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createSubscriptionOrder\n                        \n                    \n                \n            \n            \n                \n                        \n                    createSubscriptionOrder(userId: string, planId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/subscription/subscription.service.ts:91\n                        \n                    \n\n\n            \n                \n                        \n ORDENES\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                planId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createSubscriptionPayment\n                        \n                    \n                \n            \n            \n                \n                        \n                    createSubscriptionPayment(orderId: string, userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/subscription/subscription.service.ts:108\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                orderId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getActiveSubscription\n                        \n                    \n                \n            \n            \n                \n                        \n                    getActiveSubscription(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/subscription/subscription.service.ts:61\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getPlans\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPlans()\n                \n            \n\n\n                    \n                        \n                            Defined in src/subscription/subscription.service.ts:82\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getUserOrders\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUserOrders(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/subscription/subscription.service.ts:189\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateSubscriptionOrderStatus\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateSubscriptionOrderStatus(orderId: string, newStatus: SubscriptionOrderStatus)\n                \n            \n\n\n                    \n                        \n                            Defined in src/subscription/subscription.service.ts:161\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                orderId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                newStatus\n                                            \n                                                            SubscriptionOrderStatus\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  Injectable,\n  NotFoundException,\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { MailService } from 'src/mail/mail.service';\nimport { Repository } from 'typeorm';\nimport { UserService } from '../user/user.service';\nimport { Subscription } from './entities/subscription.entity';\nimport { SubscriptionPlan } from './entities/subscriptionPlan.entity';\nimport {\n  SubscriptionOrder,\n  SubscriptionOrderStatus,\n} from './entities/subscription-order.entity';\nimport axios from 'axios';\n\n@Injectable()\nexport class SubscriptionService {\n  constructor(\n    @InjectRepository(Subscription)\n    private subscriptionRepo: Repository,\n\n    @InjectRepository(SubscriptionPlan)\n    private planRepo: Repository,\n\n    @InjectRepository(SubscriptionOrder)\n    private orderRepo: Repository,\n\n    private userService: UserService,\n    private mailService: MailService,\n  ) {}\n\n  /** --------------------\n   *  SUSCRIPCIONES\n   * -------------------- */\n\n  // Crear suscripción inicial (FREE)\n  async createInitialSubscription(userId: string) {\n    const user = await this.userService.findById(userId);\n    if (!user) throw new NotFoundException('Usuario no encontrado');\n\n    const freePlan = await this.planRepo.findOne({ where: { name: 'Free' } });\n    if (!freePlan) throw new NotFoundException('Plan FREE no configurado');\n\n    return this.activateSubscription(user, freePlan);\n  }\n\n  // Cambiar de plan (FREE -> pago o pago -> pago)\n  async changeSubscription(userId: string, planId: string) {\n    const user = await this.userService.findById(userId);\n    if (!user) throw new NotFoundException('Usuario no encontrado');\n\n    const plan = await this.planRepo.findOne({ where: { id: planId } });\n    if (!plan) throw new NotFoundException('Plan no encontrado');\n\n    return this.activateSubscription(user, plan);\n  }\n\n  // Obtener suscripción activa\n  async getActiveSubscription(userId: string) {\n    let subscription = await this.subscriptionRepo.findOne({\n      where: { user: { id: userId }, isActive: true },\n    });\n\n    if (!subscription) {\n      subscription = await this.subscriptionRepo.findOne({\n        where: { user: { id: userId }, plan: { name: 'Free' } },\n        order: { startDate: 'DESC' },\n      });\n    }\n\n    if (!subscription)\n      throw new NotFoundException(\n        'No hay suscripción registrada para este usuario',\n      );\n\n    return subscription;\n  }\n\n  // Listar planes disponibles\n  async getPlans() {\n    return this.planRepo.find();\n  }\n\n  /** --------------------\n   *  ORDENES\n   * -------------------- */\n\n  // Crear orden de suscripción pendiente\n  async createSubscriptionOrder(userId: string, planId: string) {\n    const user = await this.userService.findById(userId);\n    if (!user) throw new NotFoundException('Usuario no encontrado');\n\n    const plan = await this.planRepo.findOne({ where: { id: planId } });\n    if (!plan) throw new NotFoundException('Plan no encontrado');\n\n    const order = this.orderRepo.create({\n      user,\n      plan,\n      amount: plan.price,\n      status: 'pending',\n    });\n\n    return this.orderRepo.save(order);\n  }\n\n  async createSubscriptionPayment(orderId: string, userId: string) {\n    // 1️⃣ Obtener orden pendiente\n    const order = await this.orderRepo.findOne({\n      where: { id: orderId, user: { id: userId } },\n      relations: ['user', 'plan'],\n    });\n    if (!order) throw new NotFoundException('Orden no encontrada');\n    if (order.status !== 'pending')\n      throw new BadRequestException('Orden ya fue pagada');\n\n    // 2️⃣ Crear payload de preferencia\n    const preferencePayload = {\n      items: [\n        {\n          title: order.plan.name,\n          quantity: 1,\n          unit_price: Number(order.amount),\n          currency_id: 'ARS',\n        },\n      ],\n      payer: { email: order.user.email },\n      back_urls: {\n        success: `${process.env.FRONTEND_URL}/dashboard/subscription/success`,\n        failure: `${process.env.FRONTEND_URL}/dashboard/subscription/failure`,\n      },\n      notification_url: `${process.env.BACKEND_URL}/mercadopago/webhook`,\n\n      external_reference: `subscription-${order.id}`,\n    };\n\n    // 3️⃣ Crear preferencia en MercadoPago con tu access token\n   try {\n  const { data } = await axios.post(\n    'https://api.mercadopago.com/checkout/preferences',\n    preferencePayload,\n    {\n      headers: {\n        Authorization: `Bearer ${process.env.MP_MARKETPLACE_ACCESS_TOKEN}`,\n        'Content-Type': 'application/json',\n      },\n    },\n  );\n\n  console.log('✅ Preference creada:', data);\n  return { init_point: data.init_point, preferenceId: data.id };\n} catch (error) {\n  console.error('❌ Error al crear preferencia:', error.response?.data || error);\n  throw new BadRequestException('Error al crear la preferencia en Mercado Pago');\n}\n\n  }\n\n  // Finalizar orden de suscripción pagada\n  async updateSubscriptionOrderStatus(\n    orderId: string,\n    newStatus: SubscriptionOrderStatus,\n  ): Promise {\n    const order = await this.orderRepo.findOne({\n      where: { id: orderId },\n    });\n\n    if (!order) {\n      console.error(`Subscription order with ID ${orderId} not found.`);\n      return;\n    }\n\n    // Aquí solo asignamos el nuevo estado sin validar nada\n    order.status = newStatus;\n    await this.orderRepo.save(order);\n\n    console.log(\n      `Subscription order ${orderId} status updated to: ${newStatus}`,\n    );\n\n    // 👇 Si el pago fue aprobado, activar la suscripción con ese plan\n    if (newStatus === 'approved') {\n      await this.activateSubscription(order.user, order.plan);\n    }\n  }\n\n  // Listar órdenes del usuario\n  async getUserOrders(userId: string) {\n    return this.orderRepo.find({\n      where: { user: { id: userId } },\n      relations: ['plan'],\n      order: { createdAt: 'DESC' },\n    });\n  }\n\n  /** --------------------\n   *  MÉTODO PRIVADO\n   * -------------------- */\n\n  // Activa una suscripción (desactiva previas + crea nueva)\n  private async activateSubscription(user: any, plan: SubscriptionPlan) {\n    // Desactivar suscripciones previas\n    const activeSubs = await this.subscriptionRepo.find({\n      where: { user: { id: user.id }, isActive: true },\n    });\n\n    for (const sub of activeSubs) {\n      sub.isActive = false;\n      sub.endDate = new Date();\n      await this.subscriptionRepo.save(sub);\n    }\n\n    // Crear nueva suscripción activa\n    const now = new Date();\n    const endDate = plan.durationMonths\n      ? new Date(now.setMonth(now.getMonth() + plan.durationMonths))\n      : null;\n\n    const subscription = this.subscriptionRepo.create({\n      user,\n      plan,\n      startDate: new Date(),\n      endDate,\n      isActive: true,\n    });\n\n    await this.subscriptionRepo.save(subscription);\n\n    // Enviar mail si no es Free\n    if (plan.name !== 'Free') {\n      await this.mailService.sendProWelcomeEmail(user.email, user.name);\n    }\n\n    return subscription;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateAdminDto.html":{"url":"classes/UpdateAdminDto.html","title":"class - UpdateAdminDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateAdminDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/admin/dto/update-admin.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PartialType(CreateAdminDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateAdminDto } from './create-admin.dto';\n\nexport class UpdateAdminDto extends PartialType(CreateAdminDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateAlbumDto.html":{"url":"classes/UpdateAlbumDto.html","title":"class - UpdateAlbumDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateAlbumDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/album/dto/update-album.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateAlbumDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateAlbumDto } from './create-album.dto';\n\nexport class UpdateAlbumDto extends PartialType(CreateAlbumDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateDeliveryStatusDto.html":{"url":"classes/UpdateDeliveryStatusDto.html","title":"class - UpdateDeliveryStatusDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateDeliveryStatusDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/order/dto/up-delivered-order.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                deliveryStatus\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deliveryStatus\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DeliveryStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(['pending', 'in_progress', 'delivered'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/order/dto/up-delivered-order.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEnum } from 'class-validator';\nimport { DeliveryStatus } from '../entities/order.entity';\n\nexport class UpdateDeliveryStatusDto {\n  @IsEnum(['pending', 'in_progress', 'delivered'])\n  deliveryStatus: DeliveryStatus;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateLeadDto.html":{"url":"classes/UpdateLeadDto.html","title":"class - UpdateLeadDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateLeadDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lead/dto/update-lead.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateLeadDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateLeadDto } from './create-lead.dto';\n\nexport class UpdateLeadDto extends PartialType(CreateLeadDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateMercadopagoDto.html":{"url":"classes/UpdateMercadopagoDto.html","title":"class - UpdateMercadopagoDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateMercadopagoDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/mercadopago/dto/update-mercadopago.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PartialType(CreateMercadopagoDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateMercadopagoDto } from './create-mercadopago.dto';\n\nexport class UpdateMercadopagoDto extends PartialType(CreateMercadopagoDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateOrderDto.html":{"url":"classes/UpdateOrderDto.html","title":"class - UpdateOrderDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateOrderDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/order/dto/update-order.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateOrderDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateOrderDto } from './create-order.dto';\n\nexport class UpdateOrderDto extends PartialType(CreateOrderDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdatePaymentDto.html":{"url":"classes/UpdatePaymentDto.html","title":"class - UpdatePaymentDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdatePaymentDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/payment/dto/update-payment.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreatePaymentAccountDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreatePaymentAccountDto } from './create-payment.dto';\n\nexport class UpdatePaymentDto extends PartialType(CreatePaymentAccountDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdatePhotoDto.html":{"url":"classes/UpdatePhotoDto.html","title":"class - UpdatePhotoDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdatePhotoDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/photo/dto/update-photo.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreatePhotoDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreatePhotoDto } from './create-photo.dto';\n\nexport class UpdatePhotoDto extends PartialType(CreatePhotoDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateSeedDto.html":{"url":"classes/UpdateSeedDto.html","title":"class - UpdateSeedDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateSeedDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/seed/dto/update-seed.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PartialType(CreateSeedDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateSeedDto } from './create-seed.dto';\n\nexport class UpdateSeedDto extends PartialType(CreateSeedDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateSubscriptionDto.html":{"url":"classes/UpdateSubscriptionDto.html","title":"class - UpdateSubscriptionDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateSubscriptionDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/subscription/dto/update-subscription.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateSubscriptionDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateSubscriptionDto } from './create-subscription.dto';\n\nexport class UpdateSubscriptionDto extends PartialType(CreateSubscriptionDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dto/update-user.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(BaseUserDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { BaseUserDto } from './base-user.dto';\n\nexport class UpdateUserDto extends PartialType(BaseUserDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/entities/user.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                accessibleAlbums\n                            \n                            \n                                    \n                                albums\n                            \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                image\n                            \n                            \n                                    \n                                isActive\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                orders\n                            \n                            \n                                    \n                                password\n                            \n                            \n                                    \n                                    Optional\n                                passwordResetRequestedAt\n                            \n                            \n                                    \n                                paymentAccounts\n                            \n                            \n                                    \n                                phone\n                            \n                            \n                                    \n                                provider\n                            \n                            \n                                    \n                                resetTokens\n                            \n                            \n                                    \n                                role\n                            \n                            \n                                    \n                                storageUsedMb\n                            \n                            \n                                    \n                                subscriptions\n                            \n                            \n                                    \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        accessibleAlbums\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Album[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, album => album.accessibleUsers)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:67\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        albums\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Album[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, album => album.photographer)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:64\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:57\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        image\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        isActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'boolean', default: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:54\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        orders\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Order[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, order => order.buyer)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:70\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        passwordResetRequestedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'timestamp', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:48\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        paymentAccounts\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PaymentAccount[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, pa => pa.user)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:78\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        phone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        provider\n                        \n                    \n                \n            \n                \n                    \n                        Type :     \"google\" | \"credentials\"\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: undefined, default: 'credentials'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        resetTokens\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PasswordResetToken[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, prt => prt.user)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:81\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :     \"buyer\" | \"photographer\" | \"SUPER_ADMIN\"\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        storageUsedMb\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'float', default: 0})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        subscriptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Subscription[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, subscription => subscription.user, {cascade: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:75\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:60\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  CreateDateColumn,\n  Entity,\n  ManyToMany,\n  OneToMany,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from 'typeorm';\n\nimport { PasswordResetToken } from 'src/auth/entities/password-reset-token.entity';\nimport { PaymentAccount } from 'src/payment/entities/payment.entity';\nimport { Subscription } from 'src/subscription/entities/subscription.entity';\nimport { Album } from '../../album/entities/album.entity';\nimport { Order } from '../../order/entities/order.entity';\n\n@Entity()\nexport class User {\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n\n  @Column({ unique: true })\n  email: string;\n\n  @Column({ nullable: true })\n  password: string;\n\n  @Column({\n    type: 'enum',\n    enum: ['google', 'credentials'],\n    default: 'credentials',\n  })\n  provider: 'google' | 'credentials';\n\n  @Column({ type: 'enum', enum: ['buyer', 'photographer', 'SUPER_ADMIN'] })\n  role: 'buyer' | 'photographer' | 'SUPER_ADMIN';\n\n  @Column({ type: 'text', nullable: true })\n  name: string;\n\n  @Column({ type: 'text', nullable: true })\n  image: string;\n\n  @Column({ type: 'text', nullable: true })\n  phone: string;\n\n  @Column({ type: 'timestamp', nullable: true })\n  passwordResetRequestedAt?: Date;\n\n  @Column({ type: 'float', default: 0 })\n  storageUsedMb: number;\n\n  @Column({ type: 'boolean', default: true })\n  isActive: boolean;\n\n  @CreateDateColumn()\n  createdAt: Date;\n\n  @UpdateDateColumn()\n  updatedAt: Date;\n\n  /* Relaciones */\n  @OneToMany(() => Album, (album) => album.photographer)\n  albums: Album[];\n\n  @ManyToMany(() => Album, (album) => album.accessibleUsers)\n  accessibleAlbums: Album[];\n\n  @OneToMany(() => Order, (order) => order.buyer)\n  orders: Order[];\n\n  @OneToMany(() => Subscription, (subscription) => subscription.user, {\n    cascade: true,\n  })\n  subscriptions: Subscription[];\n\n  @OneToMany(() => PaymentAccount, (pa) => pa.user)\n  paymentAccounts: PaymentAccount[];\n\n  @OneToMany(() => PasswordResetToken, (prt) => prt.user)\n  resetTokens: PasswordResetToken[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.controller.ts\n        \n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Async\n                                getMe\n                            \n                            \n                                    \n                                    \n                                    Async\n                                updateMe\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        getMe\n                        \n                    \n                \n            \n            \n                \n                        \n                    getMe(req: unknown)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(AuthGuard)@Get('me')\n                \n            \n\n                    \n                        \n                            Defined in src/user/user.controller.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        unknown\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        updateMe\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateMe(req: unknown, dto: UpdateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(AuthGuard)@Patch('me')\n                \n            \n\n                    \n                        \n                            Defined in src/user/user.controller.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        unknown\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                dto\n                                            \n                                                            UpdateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Patch, Body, UseGuards, Req } from '@nestjs/common';\nimport { UserService } from './user.service';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport { AuthGuard } from '../common/guards/auth.guard';\n\n@Controller('users')\nexport class UserController {\n  constructor(private readonly userService: UserService) {}\n\n  @UseGuards(AuthGuard)\n  @Get('me')\n  async getMe(@Req() req) {\n    const userId = req.user.sub;\n\n    return this.userService.findById(userId);\n  }\n\n  @UseGuards(AuthGuard)\n  @Patch('me')\n  async updateMe(@Req() req, @Body() dto: UpdateUserDto) {\n    const userId = req.user.sub;\n    return this.userService.update(userId, dto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nUserService \n\nUserService \n\n\n\nUserModule\n\nUserModule\n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/user/user.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UserService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from './entities/user.entity';\nimport { UserController } from './user.controller';\nimport { UserService } from './user.service';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([User])],\n  controllers: [UserController],\n  providers: [UserService],\n  exports: [UserService],\n})\nexport class UserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findByEmail\n                            \n                            \n                                    Async\n                                findById\n                            \n                            \n                                    Async\n                                update\n                            \n                            \n                                    Async\n                                updatePasswordResetRequestedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepo: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/user/user.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepo\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(data: Partial)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:70\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                            Partial\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findByEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    findByEmail(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findById(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(userId: string, updateData: UpdateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:75\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateData\n                                            \n                                                            UpdateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updatePasswordResetRequestedAt\n                        \n                    \n                \n            \n            \n                \n                        \n                    updatePasswordResetRequestedAt(userId: string, date: Date)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:109\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                date\n                                            \n                                                            Date\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\n\nimport { Repository } from 'typeorm';\nimport { User } from './entities/user.entity';\nimport { UpdateUserDto } from './dto/update-user.dto';\n\n@Injectable()\nexport class UserService {\n  constructor(\n    @InjectRepository(User)\n    private userRepo: Repository,\n  ) {}\n\n  async findByEmail(email: string) {\n    const user = await this.userRepo.findOne({\n      where: { email },\n      relations: ['paymentAccounts', 'orders', 'accessibleAlbums'],\n    });\n\n    if (!user) return null;\n\n    return user;\n  }\n\n  async findById(id: string) {\n    const user = await this.userRepo.findOne({\n      where: { id },\n      relations: [\n        'orders',\n        'accessibleAlbums',\n        'accessibleAlbums.photos',\n        'paymentAccounts',\n      ],\n    });\n\n    if (!user) {\n      throw new NotFoundException(`Usuario con id ${id} no encontrado`);\n    }\n\n    const plainUser: any = user;\n\n    delete plainUser.password;\n    delete plainUser.provider;\n    delete plainUser.passwordResetRequestedAt;\n    delete plainUser.createdAt;\n    delete plainUser.updatedAt;\n\n    plainUser.accessibleAlbums = plainUser.accessibleAlbums.map(\n      (album: any) => ({\n        id: album.id,\n        title: album.title,\n        description: album.description,\n        prices: album.prices,\n        priceDigital: album.priceDigital,\n        priceSchoolSports: album.priceSchoolSports,\n        eventDate: album.eventDate,\n        storageUsedMb: album.storageUsedMb,\n        photos: album.photos.map((photo: any) => ({\n          id: photo.id,\n          url: photo.url,\n          name: photo.name,\n        })),\n      }),\n    );\n\n    return plainUser;\n  }\n\n  async create(data: Partial) {\n    const user = this.userRepo.create(data);\n    return this.userRepo.save(user);\n  }\n\n  async update(\n    userId: string,\n    updateData: UpdateUserDto,\n  ): Promise\n  > {\n    const user = await this.userRepo.preload({ id: userId, ...updateData });\n\n    if (!user) {\n      throw new NotFoundException(`User with id ${userId} not found`);\n    }\n\n    const savedUser = await this.userRepo.save(user);\n\n    const {\n      password,\n      provider,\n      createdAt,\n      updatedAt,\n      passwordResetRequestedAt,\n      ...safeUser\n    } = savedUser;\n\n    return safeUser;\n  }\n\n  /* Time de Recuperar contraseña  */\n  async updatePasswordResetRequestedAt(userId: string, date: Date) {\n    await this.userRepo.update(userId, { passwordResetRequestedAt: date });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                        lib/emailForgotPassword.ts\n            \n            function\n            generatePasswordResetEmail\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        lib/emailNewOrderNotification.ts\n            \n            function\n            generateNewOrderNotificationEmail\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        lib/emailOrderPayment.ts\n            \n            function\n            generatePurchaseConfirmationEmail\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        lib/emailProWelcome.ts\n            \n            function\n            generateProWelcomeEmail\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        lib/emailWelcome.ts\n            \n            function\n            generateBuyerWelcomeEmail\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        lib/emailWelcome.ts\n            \n            function\n            generatePhotographerWelcomeEmail\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/admin/admin.controller.ts\n            \n            controller\n            AdminUserController\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                        src/admin/admin.service.ts\n            \n            injectable\n            AdminUserService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                        src/admin/adminAlbum.controller.ts\n            \n            controller\n            AdminAlbumController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                        src/admin/adminAlbum.service.ts\n            \n            injectable\n            AdminAlbumService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/admin/adminOrder.controller.ts\n            \n            controller\n            AdminOrderController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                        src/admin/adminOrder.service.ts\n            \n            injectable\n            AdminOrderService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                        src/admin/dto/admin-album-by-id.dto.ts\n            \n            class\n            AdminAlbumByIdDto\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                        src/admin/dto/admin-user-by-id.dto.ts\n            \n            interface\n            AdminAlbumSummaryDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                        src/admin/dto/admin-user-by-id.dto.ts\n            \n            interface\n            AdminPhotographerByIdDto\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                        src/admin/dto/admin-user.dto.ts\n            \n            class\n            AdminAlbumDto\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                        src/admin/dto/admin-user.dto.ts\n            \n            class\n            AdminUserDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                        src/admin/dto/create-admin.dto.ts\n            \n            class\n            CreateAdminDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/admin/dto/update-admin.dto.ts\n            \n            class\n            UpdateAdminDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/admin/entities/admin.entity.ts\n            \n            class\n            Admin\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/album/album-access.controller.ts\n            \n            controller\n            AlbumAccessController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/album/album-access.service.ts\n            \n            injectable\n            AlbumAccessService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                        src/album/album.controller.ts\n            \n            controller\n            AlbumController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                        src/album/album.service.ts\n            \n            injectable\n            AlbumService\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                        src/album/dto/create-album.dto.ts\n            \n            class\n            CreateAlbumDto\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                        src/album/dto/create-album.dto.ts\n            \n            class\n            PriceOptionDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/album/dto/update-album.dto.ts\n            \n            class\n            UpdateAlbumDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/album/entities/album.entity.ts\n            \n            entity\n            Album\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/album/entities/album.entity.ts\n            \n            class\n            Album\n            \n                0 %\n                (0/22)\n            \n        \n        \n            \n                \n                        src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                        src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                        src/auth/dto/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                        src/auth/dto/login.dto.ts\n            \n            class\n            LoginDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                        src/auth/entities/auth.entity.ts\n            \n            class\n            Auth\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/auth/entities/password-reset-token.entity.ts\n            \n            entity\n            PasswordResetToken\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/auth/password-reset.service.ts\n            \n            injectable\n            PasswordResetService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                        src/common/decorators/roles.decorator.ts\n            \n            variable\n            Roles\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/common/decorators/roles.decorator.ts\n            \n            variable\n            ROLES_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/common/dtos/pagination.dto.ts\n            \n            class\n            PaginationDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/common/guards/auth.guard.ts\n            \n            guard\n            AuthGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/common/guards/roles.guard.ts\n            \n            guard\n            RolesGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/files/files.controller.ts\n            \n            controller\n            FilesController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                        src/files/files.service.ts\n            \n            injectable\n            FilesService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                        src/lead/dto/create-lead.dto.ts\n            \n            class\n            CreateLeadDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                        src/lead/dto/update-lead.dto.ts\n            \n            class\n            UpdateLeadDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/lead/entities/lead.entity.ts\n            \n            entity\n            Lead\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/lead/lead.controller.ts\n            \n            controller\n            LeadController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/lead/lead.service.ts\n            \n            injectable\n            LeadService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                        src/mail/mail.service.ts\n            \n            injectable\n            MailService\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                        src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/mercadopago/dto/create-mercadopago.dto.ts\n            \n            class\n            CreateMercadopagoDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/mercadopago/dto/update-mercadopago.dto.ts\n            \n            class\n            UpdateMercadopagoDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/mercadopago/entities/mercadopago.entity.ts\n            \n            class\n            Mercadopago\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/mercadopago/mercadopago.controller.ts\n            \n            controller\n            MercadopagoController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                        src/mercadopago/mercadopago.service.ts\n            \n            injectable\n            MercadopagoService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                        src/order/buyer-orders.controller.ts\n            \n            controller\n            BuyerOrdersController\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                        src/order/buyer-orders.service.ts\n            \n            injectable\n            BuyerOrdersService\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                        src/order/dto/create-order.dto.ts\n            \n            class\n            CreateOrderDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/order/dto/create-order.dto.ts\n            \n            class\n            OrderItemDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                        src/order/dto/order-buyer.dto.ts\n            \n            class\n            AlbumSummaryDto\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                        src/order/dto/order-buyer.dto.ts\n            \n            class\n            OrderItemResponseDto\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                        src/order/dto/order-buyer.dto.ts\n            \n            class\n            OrderResponseDto\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                        src/order/dto/up-delivered-order.dto.ts\n            \n            class\n            UpdateDeliveryStatusDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                        src/order/dto/update-order.dto.ts\n            \n            class\n            UpdateOrderDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/order/entities/order-item.entity.ts\n            \n            entity\n            OrderItem\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/order/entities/order.entity.ts\n            \n            entity\n            Order\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/order/entities/order.entity.ts\n            \n            type alias\n            DeliveryStatus\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/order/entities/order.entity.ts\n            \n            type alias\n            OrderStatus\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/order/photographer-orders.controller.ts\n            \n            controller\n            PhotographerOrdersController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                        src/order/photographer-orders.service.ts\n            \n            injectable\n            PhotographerOrdersService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                        src/payment/dto/create-payment.dto.ts\n            \n            class\n            CreatePaymentAccountDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                        src/payment/dto/update-payment.dto.ts\n            \n            class\n            UpdatePaymentDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/payment/entities/payment.entity.ts\n            \n            entity\n            PaymentAccount\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/payment/payment.controller.ts\n            \n            controller\n            PaymentController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                        src/payment/payment.service.ts\n            \n            injectable\n            PaymentService\n            \n                50 %\n                (3/6)\n            \n        \n        \n            \n                \n                        src/photo/dto/create-photo.dto.ts\n            \n            class\n            CreatePhotoDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/photo/dto/update-photo.dto.ts\n            \n            class\n            UpdatePhotoDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/photo/entities/photo.entity.ts\n            \n            entity\n            Photo\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/photo/photo.controller.ts\n            \n            controller\n            PhotoController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                        src/photo/photo.service.ts\n            \n            injectable\n            PhotoService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                        src/seed/dto/create-seed.dto.ts\n            \n            class\n            CreateSeedDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/seed/dto/update-seed.dto.ts\n            \n            class\n            UpdateSeedDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/seed/entities/seed.entity.ts\n            \n            class\n            Seed\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/seed/seed.controller.ts\n            \n            controller\n            SeedController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/seed/seed.service.ts\n            \n            injectable\n            SeedService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                        src/subscription/dto/create-subscription-order.dto.ts\n            \n            class\n            CreateSubscriptionOrderDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                        src/subscription/dto/create-subscription.dto.ts\n            \n            class\n            CreateSubscriptionDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/subscription/dto/update-subscription.dto.ts\n            \n            class\n            UpdateSubscriptionDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/subscription/entities/subscription-order.entity.ts\n            \n            entity\n            SubscriptionOrder\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/subscription/entities/subscription-order.entity.ts\n            \n            type alias\n            SubscriptionOrderStatus\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/subscription/entities/subscription.entity.ts\n            \n            entity\n            Subscription\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/subscription/entities/subscriptionPlan.entity.ts\n            \n            entity\n            SubscriptionPlan\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/subscription/subscription.controller.ts\n            \n            controller\n            SubscriptionController\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                        src/subscription/subscription.service.ts\n            \n            injectable\n            SubscriptionService\n            \n                27 %\n                (3/11)\n            \n        \n        \n            \n                \n                        src/user/dto/base-user.dto.ts\n            \n            class\n            BaseUserDto\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                        src/user/dto/update-user.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/user/entities/user.entity.ts\n            \n            entity\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/user/helpers/user.helpers.ts\n            \n            variable\n            UserHelpers\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/user/user.controller.ts\n            \n            controller\n            UserController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/user/user.service.ts\n            \n            injectable\n            UserService\n            \n                0 %\n                (0/7)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/axios : ^4.0.1\n        \n            @nestjs/common : ^11.0.1\n        \n            @nestjs/config : ^4.0.2\n        \n            @nestjs/core : ^11.0.1\n        \n            @nestjs/jwt : ^11.0.0\n        \n            @nestjs/mapped-types : *\n        \n            @nestjs/passport : ^11.0.5\n        \n            @nestjs/platform-express : ^11.0.1\n        \n            @nestjs/typeorm : ^11.0.0\n        \n            axios : ^1.12.2\n        \n            bcrypt : ^6.0.0\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.2\n        \n            cloudinary : ^2.7.0\n        \n            dotenv : ^17.2.1\n        \n            express : ^5.1.0\n        \n            google-auth-library : ^10.1.0\n        \n            nodemailer : ^7.0.9\n        \n            passport : ^0.7.0\n        \n            passport-jwt : ^4.0.1\n        \n            path : ^0.12.7\n        \n            pg : ^8.16.3\n        \n            reflect-metadata : ^0.2.2\n        \n            resend : ^4.7.0\n        \n            rxjs : ^7.8.1\n        \n            typeorm : ^0.3.25\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            PrintSize   (src/.../create-album.dto.ts)\n                        \n                        \n                            UserRole   (src/.../base-user.dto.ts)\n                        \n                        \n                            ValidRoles   (src/.../roles.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/album/dto/create-album.dto.ts\n    \n        \n            \n                \n                    \n                        \n                        PrintSize\n                    \n                \n                        \n                            \n                                 SMALL\n                            \n                        \n                        \n                            \n                                Value : S\n                            \n                        \n                        \n                            \n                                 MEDIUM\n                            \n                        \n                        \n                            \n                                Value : M\n                            \n                        \n                        \n                            \n                                 LARGE\n                            \n                        \n                        \n                            \n                                Value : L\n                            \n                        \n            \n        \n\n    src/user/dto/base-user.dto.ts\n    \n        \n            \n                \n                    \n                        \n                        UserRole\n                    \n                \n                        \n                            \n                                 BUYER\n                            \n                        \n                        \n                            \n                                Value : buyer\n                            \n                        \n                        \n                            \n                                 PHOTOGRAPHER\n                            \n                        \n                        \n                            \n                                Value : photographer\n                            \n                        \n                        \n                            \n                                 SUPER_ADMIN\n                            \n                        \n                        \n                            \n                                Value : SUPER_ADMIN\n                            \n                        \n            \n        \n\n    src/common/enums/roles.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        ValidRoles\n                    \n                \n                        \n                            \n                                 SUPER_ADMIN\n                            \n                        \n                        \n                            \n                                Value : SUPER_ADMIN\n                            \n                        \n                        \n                            \n                                 ADMIN\n                            \n                        \n                        \n                            \n                                Value : admin\n                            \n                        \n                        \n                            \n                                 PHOTOGRAPHER\n                            \n                        \n                        \n                            \n                                Value : photographer\n                            \n                        \n                        \n                            \n                                 BUYER\n                            \n                        \n                        \n                            \n                                Value : buyer\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            generateBuyerWelcomeEmail   (lib/.../emailWelcome.ts)\n                        \n                        \n                            generateNewOrderNotificationEmail   (lib/.../emailNewOrderNotification.ts)\n                        \n                        \n                            generatePasswordResetEmail   (lib/.../emailForgotPassword.ts)\n                        \n                        \n                            generatePhotographerWelcomeEmail   (lib/.../emailWelcome.ts)\n                        \n                        \n                            generateProWelcomeEmail   (lib/.../emailProWelcome.ts)\n                        \n                        \n                            generatePurchaseConfirmationEmail   (lib/.../emailOrderPayment.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    lib/emailWelcome.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        generateBuyerWelcomeEmail\n                        \n                    \n                \n            \n            \n                \ngenerateBuyerWelcomeEmail()\n                \n            \n\n\n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        generatePhotographerWelcomeEmail\n                        \n                    \n                \n            \n            \n                \ngeneratePhotographerWelcomeEmail()\n                \n            \n\n\n\n\n        \n    \n    lib/emailNewOrderNotification.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        generateNewOrderNotificationEmail\n                        \n                    \n                \n            \n            \n                \ngenerateNewOrderNotificationEmail(orderId: string, total: string, itemCount: number, buyerName?: string)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                orderId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                total\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                itemCount\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                buyerName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n    lib/emailForgotPassword.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        generatePasswordResetEmail\n                        \n                    \n                \n            \n            \n                \ngeneratePasswordResetEmail(__namedParameters: {resetLink: string})\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                resetLink\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n    lib/emailProWelcome.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        generateProWelcomeEmail\n                        \n                    \n                \n            \n            \n                \ngenerateProWelcomeEmail(__namedParameters: {name: string})\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n    lib/emailOrderPayment.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        generatePurchaseConfirmationEmail\n                        \n                    \n                \n            \n            \n                \ngeneratePurchaseConfirmationEmail(orderId: string, total: string, itemCount: number)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                orderId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                total\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                itemCount\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"readme - index","body":"\n                   \n\n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nProject setup\nExample :$ npm installCompile and run the project\nExample :# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodRun tests\nExample :# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covDeployment\nWhen you're ready to deploy your NestJS application to production, there are some key steps you can take to ensure it runs as efficiently as possible. Check out the deployment documentation for more information.\nIf you are looking for a cloud-based platform to deploy your NestJS application, check out Mau, our official platform for deploying NestJS applications on AWS. Mau makes deployment straightforward and fast, requiring just a few simple steps:\nExample :$ npm install -g @nestjs/mau\n$ mau deployWith Mau, you can deploy your application in just a few clicks, allowing you to focus on building features rather than managing infrastructure.\nResources\nCheck out a few resources that may come in handy when working with NestJS:\n\nVisit the NestJS Documentation to learn more about the framework.\nFor questions and support, please visit our Discord channel.\nTo dive deeper and get more hands-on experience, check out our official video courses.\nDeploy your application to AWS with the help of NestJS Mau in just a few clicks.\nVisualize your application graph and interact with the NestJS application in real-time using NestJS Devtools.\nNeed help with your project (part-time to full-time)? Check out our official enterprise support.\nTo stay in the loop and get updates, follow us on X and LinkedIn.\nLooking for a job, or have a job to offer? Check out our official Jobs board.\n\nSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AdminModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AlbumModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CommonModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        FilesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        LeadModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MailModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MercadopagoModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        OrdersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PaymentModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PhotoModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SeedModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SubscriptionModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n\n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AdminModule\n\n\n\ncluster_AdminModule_providers\n\n\n\ncluster_AlbumModule\n\n\n\ncluster_AlbumModule_imports\n\n\n\ncluster_AlbumModule_exports\n\n\n\ncluster_AlbumModule_providers\n\n\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_FilesModule\n\n\n\ncluster_FilesModule_exports\n\n\n\ncluster_FilesModule_providers\n\n\n\ncluster_LeadModule\n\n\n\ncluster_LeadModule_providers\n\n\n\ncluster_MailModule\n\n\n\ncluster_MailModule_exports\n\n\n\ncluster_MailModule_providers\n\n\n\ncluster_MercadopagoModule\n\n\n\ncluster_MercadopagoModule_exports\n\n\n\ncluster_MercadopagoModule_providers\n\n\n\ncluster_OrdersModule\n\n\n\ncluster_OrdersModule_exports\n\n\n\ncluster_OrdersModule_providers\n\n\n\ncluster_PaymentModule\n\n\n\ncluster_PaymentModule_exports\n\n\n\ncluster_PaymentModule_providers\n\n\n\ncluster_PhotoModule\n\n\n\ncluster_PhotoModule_exports\n\n\n\ncluster_PhotoModule_providers\n\n\n\ncluster_SeedModule\n\n\n\ncluster_SeedModule_providers\n\n\n\ncluster_SubscriptionModule\n\n\n\ncluster_SubscriptionModule_exports\n\n\n\ncluster_SubscriptionModule_providers\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nAdminAlbumService\n\nAdminAlbumService\n\n\n\nAdminModule\n\nAdminModule\n\nAdminModule -->\n\nAdminAlbumService->AdminModule\n\n\n\n\n\nAdminOrderService\n\nAdminOrderService\n\nAdminModule -->\n\nAdminOrderService->AdminModule\n\n\n\n\n\nAdminUserService\n\nAdminUserService\n\nAdminModule -->\n\nAdminUserService->AdminModule\n\n\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAdminModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\n\n\nAlbumModule\n\nAlbumModule\n\nAlbumModule -->\n\nUserModule->AlbumModule\n\n\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\n\n\nFilesModule\n\nFilesModule\n\nFilesModule -->\n\nUserModule->FilesModule\n\n\n\n\n\nPaymentModule\n\nPaymentModule\n\nPaymentModule -->\n\nUserModule->PaymentModule\n\n\n\n\n\nPhotoModule\n\nPhotoModule\n\nPhotoModule -->\n\nUserModule->PhotoModule\n\n\n\n\n\nSeedModule\n\nSeedModule\n\nSeedModule -->\n\nUserModule->SeedModule\n\n\n\n\n\nSubscriptionModule\n\nSubscriptionModule\n\nSubscriptionModule -->\n\nUserModule->SubscriptionModule\n\n\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nAlbumAccessService \n\nAlbumAccessService \n\nAlbumAccessService  -->\n\nAlbumModule->AlbumAccessService \n\n\n\n\n\nAlbumService \n\nAlbumService \n\nAlbumService  -->\n\nAlbumModule->AlbumService \n\n\n\nAppModule -->\n\nAlbumModule->AppModule\n\n\n\n\n\nAlbumAccessService\n\nAlbumAccessService\n\nAlbumModule -->\n\nAlbumAccessService->AlbumModule\n\n\n\n\n\nAlbumService\n\nAlbumService\n\nAlbumModule -->\n\nAlbumService->AlbumModule\n\n\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\nPhotoModule -->\n\nFilesModule->PhotoModule\n\n\n\nAppModule -->\n\nFilesModule->AppModule\n\n\n\n\n\nFilesService \n\nFilesService \n\nFilesService  -->\n\nFilesModule->FilesService \n\n\n\n\n\nLeadModule\n\nLeadModule\n\nAppModule -->\n\nLeadModule->AppModule\n\n\n\n\n\nMailModule\n\nMailModule\n\nAuthModule -->\n\nMailModule->AuthModule\n\n\n\n\n\nOrdersModule\n\nOrdersModule\n\nOrdersModule -->\n\nMailModule->OrdersModule\n\n\n\nSubscriptionModule -->\n\nMailModule->SubscriptionModule\n\n\n\nAppModule -->\n\nMailModule->AppModule\n\n\n\n\n\nMailService \n\nMailService \n\nMailService  -->\n\nMailModule->MailService \n\n\n\n\n\nMercadopagoModule\n\nMercadopagoModule\n\nAppModule -->\n\nMercadopagoModule->AppModule\n\n\n\n\n\nMercadopagoService \n\nMercadopagoService \n\nMercadopagoService  -->\n\nMercadopagoModule->MercadopagoService \n\n\n\nMercadopagoModule -->\n\nOrdersModule->MercadopagoModule\n\n\n\nAppModule -->\n\nOrdersModule->AppModule\n\n\n\n\n\nBuyerOrdersService \n\nBuyerOrdersService \n\nBuyerOrdersService  -->\n\nOrdersModule->BuyerOrdersService \n\n\n\nOrdersModule -->\n\nPaymentModule->OrdersModule\n\n\n\nAppModule -->\n\nPaymentModule->AppModule\n\n\n\n\n\nPaymentService \n\nPaymentService \n\nPaymentService  -->\n\nPaymentModule->PaymentService \n\n\n\nAppModule -->\n\nPhotoModule->AppModule\n\n\n\n\n\nPhotoService \n\nPhotoService \n\nPhotoService  -->\n\nPhotoModule->PhotoService \n\n\n\nAppModule -->\n\nSeedModule->AppModule\n\n\n\nAuthModule -->\n\nSubscriptionModule->AuthModule\n\n\n\nMercadopagoModule -->\n\nSubscriptionModule->MercadopagoModule\n\n\n\nAppModule -->\n\nSubscriptionModule->AppModule\n\n\n\n\n\nSubscriptionService \n\nSubscriptionService \n\nSubscriptionService  -->\n\nSubscriptionModule->SubscriptionService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nPasswordResetService\n\nPasswordResetService\n\nAuthModule -->\n\nPasswordResetService->AuthModule\n\n\n\n\n\nFilesService\n\nFilesService\n\nFilesModule -->\n\nFilesService->FilesModule\n\n\n\n\n\nLeadService\n\nLeadService\n\nLeadModule -->\n\nLeadService->LeadModule\n\n\n\n\n\nMailService\n\nMailService\n\nMailModule -->\n\nMailService->MailModule\n\n\n\n\n\nMercadopagoService\n\nMercadopagoService\n\nMercadopagoModule -->\n\nMercadopagoService->MercadopagoModule\n\n\n\n\n\nBuyerOrdersService\n\nBuyerOrdersService\n\nOrdersModule -->\n\nBuyerOrdersService->OrdersModule\n\n\n\n\n\nPhotographerOrdersService\n\nPhotographerOrdersService\n\nOrdersModule -->\n\nPhotographerOrdersService->OrdersModule\n\n\n\n\n\nPaymentService\n\nPaymentService\n\nPaymentModule -->\n\nPaymentService->PaymentModule\n\n\n\n\n\nPhotoService\n\nPhotoService\n\nPhotoModule -->\n\nPhotoService->PhotoModule\n\n\n\n\n\nSeedService\n\nSeedService\n\nSeedModule -->\n\nSeedService->SeedModule\n\n\n\n\n\nSubscriptionService\n\nSubscriptionService\n\nSubscriptionModule -->\n\nSubscriptionService->SubscriptionModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        15 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    16 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    11 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    18 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    38 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    2 Guards\n                \n            \n        \n        \n            \n                \n                    \n                    2 Interfaces\n                \n            \n        \n        \n            \n                \n                    \n                    \n                        0 \n                    \n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"routes.html":{"url":"routes.html","title":"routes - routes","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Routes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            DeliveryStatus   (src/.../order.entity.ts)\n                        \n                        \n                            OrderStatus   (src/.../order.entity.ts)\n                        \n                        \n                            SubscriptionOrderStatus   (src/.../subscription-order.entity.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/order/entities/order.entity.ts\n    \n    \n        \n            \n                \n                    \n                    DeliveryStatus\n                \n            \n            \n                \n                        \"pending\" | \"delivered\" | \"in_progress\"\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    OrderStatus\n                \n            \n            \n                \n                        \"pending\" | \"approved\" | \"authorized\" | \"in_process\" | \"in_mediation\" | \"rejected\" | \"cancelled\" | \"refunded\" | \"charged_back\"\n\n                \n            \n        \n    \n    src/subscription/entities/subscription-order.entity.ts\n    \n    \n        \n            \n                \n                    \n                    SubscriptionOrderStatus\n                \n            \n            \n                \n                        \"pending\" | \"approved\" | \"authorized\" | \"in_process\" | \"in_mediation\" | \"rejected\" | \"cancelled\" | \"refunded\" | \"charged_back\"\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Roles   (src/.../roles.decorator.ts)\n                        \n                        \n                            ROLES_KEY   (src/.../roles.decorator.ts)\n                        \n                        \n                            UserHelpers   (src/.../user.helpers.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/common/decorators/roles.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Roles\n                        \n                    \n                \n            \n                \n                    \n                        Type :     unknown\n\n                    \n                \n                \n                    \n                        Default value : (...roles: ValidRoles[]) => SetMetadata(ROLES_KEY, roles)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ROLES_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'roles'\n                    \n                \n\n\n        \n    \n\n    src/user/helpers/user.helpers.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        UserHelpers\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  getActiveSubscription(user: User) {\n    if (!user.subscriptions?.length) return null;\n    // Encuentra la suscripción activa (endDate === null)\n    return user.subscriptions.find((sub) => sub.endDate === null) ?? null;\n  },\n\n  // 🔹 Calcula el porcentaje de comisión (fee)\n  getFeePercentage(user: User): number {\n    if (user.role !== 'photographer') return 0;\n\n    const activeSub = UserHelpers.getActiveSubscription(user);\n    const planName = activeSub?.plan?.name ?? 'Free';\n\n    // Si es \"Free\" → 19.99%, si es \"Pro\" → 4.99%\n    if (planName === 'Pro') return 4.99;\n    return 19.99;\n  },\n\n  getMaxAlbums(user: User): number {\n    if (user.role !== 'photographer') return 0;\n\n    const activeSub = UserHelpers.getActiveSubscription(user);\n    const planName = activeSub?.plan?.name ?? 'Free';\n\n    switch (planName) {\n      case 'Pro':\n        return 10;\n      case 'Free':\n      default:\n        return 1;\n    }\n  },\n\n  canCreateAlbum(user: User): boolean {\n    if (user.role !== 'photographer') return false;\n    return (user.albums?.length || 0) \n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
